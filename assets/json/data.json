[
    {
        "title": "Giới thiệu",
        "content": "Giới thiệu  HTML viết tắt của từ HyperText Markup Language, hay còn gọi là \"Ngôn ngữ Đánh dấu Siêu                     văn bản\" là một ngôn ngữ đánh dấu được thiết kế ra để tạo nên các trang web trên World Wide Web.                  CSS viết tắt của từ Cascading Style Sheets, hay còn gọi là \"Bảng kiểu mẫu phân cấp\"                 là một ngôn ngữ bổ sung cho HTML, giúp cho việc thiết kế trang web trở nên dễ dàng hơn.                  JavaScript là một ngôn ngữ lập trình kịch bản (scripting language) thường được sử dụng để tạo các                 hiệu ứng động trên trang web."
    },
    {
        "title": "HTML là gì?",
        "content": "HTML là gì?  HTML là viết tắt của Hyper Text Markup Language  HTML là ngôn ngữ đánh dấu chuẩn để tạo trang Web  HTML mô tả cấu trúc của trang Web HTML bao gồm một loạt các phần tử Các phần tử HTML cho trình duyệt biết cách hiển thị nội dung Các phần tử HTML gắn nhãn các phần nội dung như \"đây là tiêu đề\", \"đây là đoạn văn\", \"đây là                         liên kết\", v.v."
    },
    {
        "title": "Cú pháp cơ bản",
        "content": "Cú pháp cơ bản <!DOCTYPE html> <html> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p> </body> </html> Giải thích  <!DOCTYPE html>: Khai báo phiên bản HTML <html>: Thẻ gốc của mọi trang web <head>: Thẻ chứa thông tin về trang web <title>: Thẻ chứa tiêu đề của trang web <body>: Thẻ chứa nội dung hiển thị trên trình duyệt                      <h1>: Thẻ tiêu đề lớn nhất <p>: Thẻ đoạn văn bản"
    },
    {
        "title": "Phần tử HTML là gì?",
        "content": "Phần tử HTML là gì? Một phần tử HTML được định nghĩa bằng cặp thẻ mở và thẻ đóng:  <tên_thẻ> nội dung trong thẻ </tên_thẻ>  Hầu hết các phần tử HTML đều có cặp thẻ mở và đóng <p>Đây là một đoạn văn bản</p> <a href=\"https://www.w3schools.com\">Đây là một liên kết</a>  Đây là một đoạn văn bản Đây là một liên kết  Tuy nhiên có một số thẻ không chứa nội dung không có thẻ đóng <img src=\"hinh-anh.jpg\" alt=\"Biểu tượng mèo đáng yêu\">"
    },
    {
        "title": "Tài liệu HTML",
        "content": "Tài liệu HTML  Tất cả tài liệu HTML phải được khai báo loại tài liệu là html <!DOCTYPE html> Bản thân tài liệu HTML bắt đầu bằng <html> và kết thúc                         bằng </html> Phần hiển thị của tài liệu html nằm giữa <body> và                         </body>"
    },
    {
        "title": "Khai báo loại tài liệu <!DOCTYPE>",
        "content": "Khai báo loại tài liệu <!DOCTYPE>   Khai báo <!DOCTYPE html> giúp trình duyệt hiểu được                         loại tài liệu và hiển thị đúng lên màn hình. <!DOCTYPE html> không phân biệt chữ hoa hay chữ thường                      Khai báo loại tài liệu cho định dạng HTML5 có dạng như sau  <!DOCTYPE html>"
    },
    {
        "title": "Thẻ tiêu đề",
        "content": "Thẻ tiêu đề HTML cung cấp 6 tiêu đề từ h1 đến h6, trong đó h1 là tiêu đề lớn nhất cũng như quan trọng nhất và h6                     là tiêu đề nhỏ nhất đồng thời cũng ít quan trọng nhất <h1>Tiêu đề lớn nhất</h1> <h2>Tiêu đề rất lớn</h2> <h3>Tiêu đề lớn</h3> <h4>Tiêu đề trung bình</h4> <h5>Tiêu đề nhỏ</h5> <h6>Tiêu đề nhỏ nhất</h6>"
    },
    {
        "title": "Thẻ đoạn văn bản",
        "content": "Thẻ đoạn văn bản Thẻ <p> được sử dụng để đánh dấu một đoạn văn bản <p>Đây là một đoạn văn bản</p>  Đây là một đoạn văn bản"
    },
    {
        "title": "Liên kết",
        "content": "Liên kết  Thẻ <a> được sử dụng để tạo liên kết đến một trang web                         khác Đích đến của liên kết nằm trong thuộc tính href   Thuộc tính được sử dụng để cung cấp thông tin bổ sung về các thành phần HTML. <a href=\"https://www.w3schools.com\">Đây là một liên kết</a>  Đây là một liên kết"
    },
    {
        "title": "Hình ảnh",
        "content": "Hình ảnh  Thẻ <img> được sử dụng để hiển thị hình ảnh trên trang                         web Đường dẫn đến hình ảnh nằm trong thuộc tính src Thuộc tính alt được sử dụng để cung cấp mô tả cho hình ảnh                      Thuộc tính width và height                         cho phép thay đổi kích thước hình ảnh  <img src=\"hinh-anh.jpg\" alt=\"Biểu tượng mèo đáng yêu\" width=\"100\" height=\"100\" >"
    },
    {
        "title": "Thuộc tính HTML",
        "content": "Thuộc tính HTML Thuộc tính HTML cung cấp thông tin bổ sung về các phần tử HTML  Thuộc tính luôn được đặt trong thẻ mở Thuộc tính thường được định nghĩa dưới dạng tên/giá trị như: name=\"value\" Thuộc tính không phân biệt chữ hoa chữ thường    Thuộc tính href Thuộc tính href được sử dụng để chỉ định đích đến của liên kết                      <a href=\"https://www.w3schools.com\">Đây là một liên kết</a>  Đây là một liên kết  href viết tắt cho hypertext reference  Lưu ý: Thuộc tính href cũng được sử dụng cho các phần                         tử như <link>, <area>, <base>                         v.v.                         Thuộc tính src Thuộc tính src được sử dụng để chỉ định đường dẫn đến tệp hình                         ảnh <img src=\"hinh-anh.jpg\" >    src viết tắt cho source  Lưu ý: Thuộc tính src cũng được sử dụng cho các phần                         tử như <audio>, <video>, <script> v.v.                         Thuộc tính width và height Thuộc tính width và height                         được sử dụng để chỉ định kích thước của hình ảnh trong thẻ <img> <img src=\"hinh-anh.jpg\" width=\"100\" height=\"100\" >    đơn vị tính của chiều rộng và chiều dài là pixel (px)    Thuộc tính alt Thuộc tính alt được sử dụng để cung cấp mô tả cho hình ảnh                         trong trường hợp ảnh không thể hiển thị vì một vài lí do nào đó (đường dẫn không đúng/tốc độ tải                         thấp) <img src=\"hinh-anh1.jpg\" alt=\"Biểu tượng mèo đáng yêu\" >    alt viết tắt cho alternative    Thuộc tính style Thuộc tính style được sử dụng để thiết lập kiểu CSS cho phần                         tử HTML (màu sắc, kích thước, phông chữ...) <p style=\"color: red; font-size: 20px;\">Đây là một đoạn văn bản</p>  Đây là một đoạn văn bản    Thuộc tính lang Thuộc tính lang được sử dụng để chỉ định ngôn ngữ của phần tử                         HTML, khai báo này giúp trình duyệt cũng như công cụ tìm kiếm biết ngôn ngữ trang web là gì. <!DOCTYPE html> <html lang=\"vi\"> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p> </body> </html> Có thể thêm khu vực vào sau mã ngôn ngữ <!DOCTYPE html> <html lang=\"vi-VN\"> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p> </body> </html> lang viết tắt cho language    Thuộc tính title Thuộc tính title được sử dụng để cung cấp thông tin bổ sung                         khi rê chuột vào phần tử HTML <p title=\"xin chào\">Đây là một đoạn văn</p>  Đây là một đoạn văn  title viết tắt cho tooltip"
    },
    {
        "title": "Thuộc tính href",
        "content": "Thuộc tính href Thuộc tính href được sử dụng để chỉ định đích đến của liên kết                      <a href=\"https://www.w3schools.com\">Đây là một liên kết</a>  Đây là một liên kết  href viết tắt cho hypertext reference  Lưu ý: Thuộc tính href cũng được sử dụng cho các phần                         tử như <link>, <area>, <base>                         v.v."
    },
    {
        "title": "Thuộc tính src",
        "content": "Thuộc tính src Thuộc tính src được sử dụng để chỉ định đường dẫn đến tệp hình                         ảnh <img src=\"hinh-anh.jpg\" >    src viết tắt cho source  Lưu ý: Thuộc tính src cũng được sử dụng cho các phần                         tử như <audio>, <video>, <script> v.v."
    },
    {
        "title": "Thuộc tính width và height",
        "content": "Thuộc tính width và height Thuộc tính width và height                         được sử dụng để chỉ định kích thước của hình ảnh trong thẻ <img> <img src=\"hinh-anh.jpg\" width=\"100\" height=\"100\" >    đơn vị tính của chiều rộng và chiều dài là pixel (px)"
    },
    {
        "title": "Thuộc tính alt",
        "content": "Thuộc tính alt Thuộc tính alt được sử dụng để cung cấp mô tả cho hình ảnh                         trong trường hợp ảnh không thể hiển thị vì một vài lí do nào đó (đường dẫn không đúng/tốc độ tải                         thấp) <img src=\"hinh-anh1.jpg\" alt=\"Biểu tượng mèo đáng yêu\" >    alt viết tắt cho alternative"
    },
    {
        "title": "Thuộc tính style",
        "content": "Thuộc tính style Thuộc tính style được sử dụng để thiết lập kiểu CSS cho phần                         tử HTML (màu sắc, kích thước, phông chữ...) <p style=\"color: red; font-size: 20px;\">Đây là một đoạn văn bản</p>  Đây là một đoạn văn bản"
    },
    {
        "title": "Thuộc tính lang",
        "content": "Thuộc tính lang Thuộc tính lang được sử dụng để chỉ định ngôn ngữ của phần tử                         HTML, khai báo này giúp trình duyệt cũng như công cụ tìm kiếm biết ngôn ngữ trang web là gì. <!DOCTYPE html> <html lang=\"vi\"> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p> </body> </html> Có thể thêm khu vực vào sau mã ngôn ngữ <!DOCTYPE html> <html lang=\"vi-VN\"> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p> </body> </html> lang viết tắt cho language"
    },
    {
        "title": "Thuộc tính title",
        "content": "Thuộc tính title Thuộc tính title được sử dụng để cung cấp thông tin bổ sung                         khi rê chuột vào phần tử HTML <p title=\"xin chào\">Đây là một đoạn văn</p>  Đây là một đoạn văn  title viết tắt cho tooltip"
    },
    {
        "title": "Thẻ tiêu đề",
        "content": "Thẻ tiêu đề HTML cung cấp 6 tiêu đề từ h1 đến h6, trong đó h1 là tiêu đề quan trọng nhất và h6                     là tiêu đề ít quan trọng nhất Thẻ tiêu đề rất quan trọng Thẻ tiêu đề được các công cụ tìm kiếm sử dụng để lập chỉ mục cấu trúc của trang web của bạn Người dùng lướt qua trên tài liệu thường dừng lại ở các tiêu đề. Điều này giúp họ hiểu được nội dung                     của trang web mà không cần đọc toàn bộ nội dung. Thẻ tiêu đề giúp SEO SEO viết tắt của Search Engine Optimization là quá trình tối ưu hóa trang web của bạn để tìm                     kiếm trên các công cụ tìm kiếm như Google, Bing, Yahoo v.v. Thẻ tiêu đề là một trong những yếu tố quan trọng giúp tối ưu hóa trang web của bạn Chú ý: không bao giờ được dùng các thẻ tiêu đề nhằm làm cho văn bản trở lên                     Lớn hơn hoặc Đậm hơn. Chỉ sử dụng cho tiêu đề."
    },
    {
        "title": "Thẻ đoạn văn bản",
        "content": "Thẻ đoạn văn bản Thẻ <p> được sử dụng để đánh dấu một đoạn văn bản. Một đoạn                     văn bản luôn được bắt đầu tại dòng mới và trình duyệt sẽ tự động thêm một khoảng trắng (lề) trước và                     sau một đoạn văn bản. <p>Đây là một đoạn văn bản</p> <p>Đây là một đoạn văn bản khác</p>   Đây là một đoạn văn bản Đây là một đoạn văn bản khác  Bạn không thể thay đổi cách hiển thị văn bản bằng việc thêm dấu cách hoặc xuống                     dòng. Trình duyệt sẽ tự động loại bỏ những khoảng trắng và dòng thừa. <p>Đây là một đoạn văn bản chứa nhiều dòng nhưng trình duyệt bỏ qua nó</p>  <p>Đây là một đoạn văn bản          khác chứa nhiều dấu cách      trong mã       nhưng trình duyệt      cũng bỏ qua nó.</p>  Đây là một đoạn văn bản                         chứa nhiều dòng                         nhưng trình duyệt                         bỏ qua nó Đây là một đoạn văn bản chứa nhiều dấu cách trong mã nhưng trình duyệt cũng bỏ qua nó."
    },
    {
        "title": "Thẻ ngang",
        "content": "Thẻ ngang Thẻ <hr> được sử dụng để tạo ra một đường ngang trên trang                     web <p>Đây là một đoạn văn bản</p> <hr> <p>Đây là một đoạn văn bản khác</p>  Đây là một đoạn văn bản  Đây là một đoạn văn bản khác  Thẻ <hr> không có thẻ đóng"
    },
    {
        "title": "Thẻ ngắt dòng",
        "content": "Thẻ ngắt dòng Thẻ <br> được sử dụng để tạo ra một dòng mới trong cùng một                     đoạn văn bản <p>Đây là một đoạn văn bản<br>Đây là một dòng mới trong cùng một đoạn văn bản</p>  Đây là một đoạn văn bảnĐây là một dòng mới trong cùng một đoạn văn bản  Thẻ <br> không có thẻ đóng"
    },
    {
        "title": "Giải quyết vấn đề văn bản thơ",
        "content": "Giải quyết vấn đề văn bản thơ Trình duyệt tự động loại bỏ khoảng trắng và dòng thừa trong mã nguồn HTML. Điều này dẫn đến việc văn                     bản thơ không hiển thị đúng cách trên trình duyệt <p>Từ ấy trong tôi bừng nắng hạ Mặt trời chân lí chói qua tim Hồn tôi là một vườn hoa lá Rất đậm hương và rộn tiếng chim.</p>  Từ ấy trong tôi bừng nắng hạ                         Mặt trời chân lí chói qua tim                         Hồn tôi là một vườn hoa lá                         Rất đậm hương và rộn tiếng chim.  Để giải quyết vấn đề này, bạn có thể sử dụng thẻ <pre> để                     tạo dòng mới <pre>Từ ấy trong tôi bừng nắng hạ Mặt trời chân lí chói qua tim Hồn tôi là một vườn hoa lá Rất đậm hương và rộn tiếng chim.</pre>  Từ ấy trong tôi bừng nắng hạ Mặt trời chân lí chói qua tim Hồn tôi là một vườn hoa lá Rất đậm hương và rộn tiếng chim.  Thẻ <pre> giữ nguyên định dạng của văn bản                     trong mã nguồn HTML"
    },
    {
        "title": "Thuộc tính style",
        "content": "Thuộc tính style Thuộc tính style được sử dụng để thiết lập kiểu cho một phần tử                     như màu sắc, phông chữ, kích thước và nhiều hơn nữa. <tagname style=\"thuộc_tính: giá_trị;\"> Trong đó:  tagname: tên của phần tử HTML thuộc_tính: tên của thuộc tính CSS giá_trị: giá trị của thuộc tính CSS    Thiết lập màu nền Thuộc tính background-color được sử dụng để thiết lập màu nền                         cho phần tử <body style=\"background-color:powderblue;\">      <h1>Đây là tiêu đề</h1>     <p>Đây là đoạn văn bản.</p> </body>     Thiết lập màu chữ Thuộc tính color được sử dụng để thiết lập màu chữ cho phần tử                      <h1 style=\"color:blue;\">Đây là tiêu đề</h1> <p style=\"color:red;\">Đây là đoạn văn bản.</p>     Thiết lập phông chữ Thuộc tính font-family được sử dụng để thiết lập kiểu phông                         chữ cho phần tử <h1 style=\"font-family:verdana;\">Đây là tiêu đề</h1> <p style=\"font-family:courier;\">Đây là đoạn văn bản</p>     Thiết lập cỡ chữ Thuộc tính font-size được sử dụng để thiết lập kích thước chữ                         cho phần tử <h1 style=\"font-size:250%;\">Đây là tiêu đề</h1> <p style=\"font-size:20px;\">Đây là đoạn văn bản</p>     Thiết lập căn chỉnh chữ Thuộc tính text-align được sử dụng để thiết lập căn chỉnh chữ                         cho phần tử <h1 style=\"text-align:center;\">Đây là tiêu đề</h1> <p style=\"text-align:right;\">Đây là đoạn văn bản được căn phải</p> <p style=\"text-align:left;\">Đây là đoạn văn bản được căn trái</p>"
    },
    {
        "title": "Thiết lập màu nền",
        "content": "Thiết lập màu nền Thuộc tính background-color được sử dụng để thiết lập màu nền                         cho phần tử <body style=\"background-color:powderblue;\">      <h1>Đây là tiêu đề</h1>     <p>Đây là đoạn văn bản.</p> </body>"
    },
    {
        "title": "Thiết lập màu chữ",
        "content": "Thiết lập màu chữ Thuộc tính color được sử dụng để thiết lập màu chữ cho phần tử                      <h1 style=\"color:blue;\">Đây là tiêu đề</h1> <p style=\"color:red;\">Đây là đoạn văn bản.</p>"
    },
    {
        "title": "Thiết lập phông chữ",
        "content": "Thiết lập phông chữ Thuộc tính font-family được sử dụng để thiết lập kiểu phông                         chữ cho phần tử <h1 style=\"font-family:verdana;\">Đây là tiêu đề</h1> <p style=\"font-family:courier;\">Đây là đoạn văn bản</p>"
    },
    {
        "title": "Thiết lập cỡ chữ",
        "content": "Thiết lập cỡ chữ Thuộc tính font-size được sử dụng để thiết lập kích thước chữ                         cho phần tử <h1 style=\"font-size:250%;\">Đây là tiêu đề</h1> <p style=\"font-size:20px;\">Đây là đoạn văn bản</p>"
    },
    {
        "title": "Thiết lập căn chỉnh chữ",
        "content": "Thiết lập căn chỉnh chữ Thuộc tính text-align được sử dụng để thiết lập căn chỉnh chữ                         cho phần tử <h1 style=\"text-align:center;\">Đây là tiêu đề</h1> <p style=\"text-align:right;\">Đây là đoạn văn bản được căn phải</p> <p style=\"text-align:left;\">Đây là đoạn văn bản được căn trái</p>"
    },
    {
        "title": "Phần tử định dạng",
        "content": "Phần tử định dạng Phần tử định dạng HTML được sử dụng để cung cấp thông tin bổ sung về cách hiển thị nội dung  <b>: in đậm văn bản <strong> : văn bản quan trọng thẻ <b> và <strong> tuy cùng in đậm văn bản nhưng mục đích sử dụng                         khác nhau. Thẻ <b> dùng để định nghĩa văn bản đậm nhưng                         không có bất kì tầm quan trọng nào. <i>: in nghiêng văn bản <em>: nhấn mạnh văn bản thẻ <i> và <em> cũng tương tự. Thẻ <i> dùng để định nghĩa văn in nghiêng không có bất kì sự                         nhấn mạnh nào. <mark>: đánh dấu văn bản <small>: hiển thị văn bản nhỏ <big>: hiển thị văn bản lớn <del>: gạch ngang văn bản <ins>: gạch chân văn bản <sub>: hiển thị văn bản dưới dạng chỉ số dưới <sup>: hiển thị văn bản dưới dạng chỉ số trên  <p>Đây là một đoạn văn bản <b>in đậm</b></p> <p>Đây là một đoạn văn bản <strong>quan trọng</strong></p> <p>Đây là một đoạn văn bản <i>in nghiêng</i></p> <p>Đây là một đoạn văn bản <em>nhấn mạnh</em></p> <p>Đây là một đoạn văn bản <mark>đánh dấu</mark></p> <p>Đây là một đoạn văn bản <small>nhỏ</small></p> <p>Đây là một đoạn văn bản <big>lớn</big></p> <p>Đây là một đoạn văn bản <del>gạch ngang</del></p> <p>Đây là một đoạn văn bản <ins>gạch chân</ins></p> <p>Đây là một đoạn văn bản <sub>chỉ số dưới</sub></p> <p>Đây là một đoạn văn bản <sup>chỉ số trên</sup></p>"
    },
    {
        "title": "Phần tử Trích dẫn và Chú thích",
        "content": "Phần tử Trích dẫn và Chú thích Phần tử trích dẫn và chú thích HTML được sử dụng để trích dẫn văn bản từ một nguồn khác  <q>: trích dẫn ngắn <blockquote>: trích dẫn dài <cite>: chú thích nguồn  <abbr>: viết tắt  <address>: địa chỉ  <p>Đây là một đoạn văn bản <q>trích dẫn ngắn</q></p> <p>Đây là một đoạn văn bản <blockquote>trích dẫn dài</blockquote></p> <p>Đây là một đoạn văn bản <cite>chú thích nguồn</cite></p> <p>Đây là một đoạn văn bản <abbr title=\"World Health Organization\">WHO</abbr></p> <p>Đây là một đoạn văn bản <address>Địa chỉ: 123 Đường ABC, Thành phố XYZ</address></p>"
    },
    {
        "title": "Chú thích HTML",
        "content": "Chú thích HTML Chú thích HTML được sử dụng để thêm chú thích vào mã nguồn HTML <!-- Đây là một chú thích --> Chú thích không hiển thị trên trình duyệt và không ảnh hưởng đến nội dung của trang web Chú thích được sử dụng để:  Giải thích mã nguồn HTML Chú thích mã nguồn HTML Chú thích về tác giả của trang web Chú thích về phiên bản của trang web  Chú thích HTML có thể nằm ở bất kì đâu trong mã nguồn HTML <!DOCTYPE html> <html> <head>     <title>Tiêu đề trang web</title> </head> <body>     <h1>Tiêu đề lớn nhất</h1>     <p>Đây là đoạn văn bản.</p>     <!-- Đây là một chú thích --> </body> </html>"
    },
    {
        "title": "Màu sắc HTML",
        "content": "Màu sắc HTML Màu sắc trong HTML có thể được xác định bằng:  Tên màu: <p style=\"color:red\">Đây là một đoạn văn bản</p>  Mã màu HEX: <p style=\"color:#ff0000\">Đây là một đoạn văn bản</p>  Mã màu RGB: <p style=\"color:rgb(255,0,0)\">Đây là một đoạn văn bản</p>   HTML hỗ trợ 140 tên màu chuẩn HTML cũng hỗ trợ màu sắc HEX và RGB Để tìm mã màu HEX hoặc RGB, bạn có thể sử dụng các công cụ trực tuyến như W3Schools Color                         Picker Để xem danh sách tên màu chuẩn, bạn có thể truy cập W3Schools Color                         Names"
    },
    {
        "title": "CSS trong HTML",
        "content": "CSS trong HTML CSS viết tắt của Cascading Style Sheets là ngôn ngữ dùng để mô tả cách hiển thị của trang web                  CSS có thể được sử dụng trong HTML bằng cách:  Sử dụng thuộc tính style trong phần tử HTML (Inline                             CSS) Sử dụng thẻ <style> trong phần tử <head> (Internal CSS) Sử dụng tệp CSS bên ngoài (External CSS)                       thực tế thẻ <style> và tệp CSS bên ngoài được sử dụng phổ                     biến hơn vì chúng giúp tách biệt mã nguồn HTML và CSS, giúp mã nguồn dễ đọc và dễ bảo trì hơn.                    Inline CSS Inline CSS được sử dụng để thiết lập kiểu cho một phần tử HTML Inline CSS sử dụng thuộc tính style trong tử HTML <h1 style=\"color:red;\">Đây là tiêu đề màu đỏ</h1> <p style=\"color:green;\">Đây là đoạn văn bản màu xanh</p>     Internal CSS Internal CSS được sử dụng để thiết lập kiểu cho toàn bộ trang web Internal CSS sử dụng thẻ <style> trong phần tử <head> <!DOCTYPE html> <html> <head>     <style>         h1 {             color: red;         }         p {             color: green;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p>     <p>Đây là một đoạn văn bản khác cũng có màu xanh</p> </body> </html>     External CSS External CSS được sử dụng để thiết lập kiểu cho toàn bộ trang web External CSS sử dụng tệp CSS bên ngoài Để sử dụng External CSS, bạn cần tạo một tệp CSS với phần mở rộng .css và thêm mã CSS vào đó Sau đó, bạn cần liên kết tệp CSS với trang web bằng cách sử dụng thẻ <link> trong phần tử <head> <!DOCTYPE html> <html> <head>     <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p>     <p>Đây là một đoạn văn bản khác cũng có màu xanh</p> </body> </html> Trong đó:  rel=\"stylesheet\": xác định loại tệp type=\"text/css\": xác định kiểu tệp href=\"style.css\": đường dẫn đến tệp CSS  Để tạo một tệp CSS, bạn có thể sử dụng trình soạn thảo văn bản như Notepad, Notepad++, Sublime                         Text, Visual Studio Code v.v. Để liên kết tệp CSS với trang web, bạn cần đặt tệp CSS trong cùng thư mục với tệp HTML hoặc sử                         dụng đường dẫn tuyệt đối hoặc tương đối Nội dung file style.css có thể như sau body {     background-color: powderblue; } h1 {     color: red; } p {     color: green; }     Thiết lập màu, phông chữ và kích thước chữ bằng CSS Trong CSS, bạn có thể thiết lập màu, phông chữ và kích thước chữ cho phần tử HTML <!DOCTYPE html> <html> <head>     <style>         body {             background-color: powderblue;         }         h1 {             color: red;             font-family: verdana;             font-size: 250%;         }         p {             color: green;             font-family: courier;             font-size: 20px;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p> </body> </html>      Đường viền, Khoảng trắng và Lề trong CSS Trong CSS, bạn có thể thiết lập đường viền, khoảng trắng và lề cho phần tử HTML  border: thiết lập đường viền xung quanh phần tử html padding: thiết lập khoảng trắng giữa văn bản và phần viền                          margin: thiết lập khoảng trắng bên ngoài phần viền  <!DOCTYPE html> <html> <head>     <style>         body {             background-color: powderblue;         }         h1 {             color: red;             border: 1px solid black;             padding: 10px;             margin: 10px;         }         p {             color: green;             border: 1px solid black;             padding: 10px;             margin: 10px;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p> </body> </html>   Chú ý: Khoảng trắng và lề có thể được thiết lập bằng các giá trị khác nhau như px, em, rem v.v."
    },
    {
        "title": "Inline CSS",
        "content": "Inline CSS Inline CSS được sử dụng để thiết lập kiểu cho một phần tử HTML Inline CSS sử dụng thuộc tính style trong tử HTML <h1 style=\"color:red;\">Đây là tiêu đề màu đỏ</h1> <p style=\"color:green;\">Đây là đoạn văn bản màu xanh</p>"
    },
    {
        "title": "Internal CSS",
        "content": "Internal CSS Internal CSS được sử dụng để thiết lập kiểu cho toàn bộ trang web Internal CSS sử dụng thẻ <style> trong phần tử <head> <!DOCTYPE html> <html> <head>     <style>         h1 {             color: red;         }         p {             color: green;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p>     <p>Đây là một đoạn văn bản khác cũng có màu xanh</p> </body> </html>"
    },
    {
        "title": "External CSS",
        "content": "External CSS External CSS được sử dụng để thiết lập kiểu cho toàn bộ trang web External CSS sử dụng tệp CSS bên ngoài Để sử dụng External CSS, bạn cần tạo một tệp CSS với phần mở rộng .css và thêm mã CSS vào đó Sau đó, bạn cần liên kết tệp CSS với trang web bằng cách sử dụng thẻ <link> trong phần tử <head> <!DOCTYPE html> <html> <head>     <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p>     <p>Đây là một đoạn văn bản khác cũng có màu xanh</p> </body> </html> Trong đó:  rel=\"stylesheet\": xác định loại tệp type=\"text/css\": xác định kiểu tệp href=\"style.css\": đường dẫn đến tệp CSS  Để tạo một tệp CSS, bạn có thể sử dụng trình soạn thảo văn bản như Notepad, Notepad++, Sublime                         Text, Visual Studio Code v.v. Để liên kết tệp CSS với trang web, bạn cần đặt tệp CSS trong cùng thư mục với tệp HTML hoặc sử                         dụng đường dẫn tuyệt đối hoặc tương đối Nội dung file style.css có thể như sau body {     background-color: powderblue; } h1 {     color: red; } p {     color: green; }"
    },
    {
        "title": "Thiết lập màu, phông chữ và kích thước chữ bằng CSS",
        "content": "Thiết lập màu, phông chữ và kích thước chữ bằng CSS Trong CSS, bạn có thể thiết lập màu, phông chữ và kích thước chữ cho phần tử HTML <!DOCTYPE html> <html> <head>     <style>         body {             background-color: powderblue;         }         h1 {             color: red;             font-family: verdana;             font-size: 250%;         }         p {             color: green;             font-family: courier;             font-size: 20px;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p> </body> </html>"
    },
    {
        "title": "Đường viền, Khoảng trắng và Lề trong CSS",
        "content": "Đường viền, Khoảng trắng và Lề trong CSS Trong CSS, bạn có thể thiết lập đường viền, khoảng trắng và lề cho phần tử HTML  border: thiết lập đường viền xung quanh phần tử html padding: thiết lập khoảng trắng giữa văn bản và phần viền                          margin: thiết lập khoảng trắng bên ngoài phần viền  <!DOCTYPE html> <html> <head>     <style>         body {             background-color: powderblue;         }         h1 {             color: red;             border: 1px solid black;             padding: 10px;             margin: 10px;         }         p {             color: green;             border: 1px solid black;             padding: 10px;             margin: 10px;         }     </style> </head> <body>     <h1>Đây là tiêu đề màu đỏ</h1>     <p>Đây là đoạn văn bản màu xanh</p> </body> </html>   Chú ý: Khoảng trắng và lề có thể được thiết lập bằng các giá trị khác nhau như px, em, rem v.v."
    },
    {
        "title": "Liên kết trong HTML",
        "content": "Liên kết trong HTML Liên kết trong HTML được sử dụng để chuyển hướng người dùng đến một trang web khác Liên kết trong HTML được tạo bằng thẻ <a> <a href=\"https://www.example.com\">Example Domain</a> Trong đó:  href: xác định địa chỉ URL của trang web Nội dung của thẻ <a>: hiển thị văn bản liên kết   Example Domain  Mặc định, liên kết trong HTML sẽ mở trang web trong cùng một tab hoặc cửa sổ trình                     duyệt   Thuộc tính target Thuộc tính target được sử dụng để xác định cách mở trang web                         khi người dùng nhấp vào liên kết  _self: mở trang web trong cùng một tab hoặc cửa sổ trình                             duyệt (mặc định) _blank: mở trang web trong một tab hoặc cửa sổ trình                             duyệt mới _parent: mở trang web trong cửa sổ cha của cửa sổ hiện                             tại _top: mở trang web trong cửa sổ trình duyệt đỉnh nhất                              URL tuyệt đối và URL tương đối URL tuyệt đối là địa chỉ URL đầy đủ của trang web URL tương đối là địa chỉ URL tương đối của trang web Ví dụ về URL tuyệt đối <a href=\"https://www.example.com\">Example Domain</a> Ví dụ về URL tương đối <a href=\"/contact\">Liên hệ</a>    Liên kết hình ảnh Bạn cũng có thể tạo liên kết cho hình ảnh trong HTML <a href=\"https://www.example.com\">     <img src=\"image.jpg\" alt=\"Hình ảnh\"> </a> Trong đó:  src: xác định đường dẫn đến hình ảnh alt: xác định văn bản thay thế cho hình ảnh      Liên kết email Bạn cũng có thể tạo liên kết email trong HTML <a href=\"mailto:namnvhe180863@fpt.edu.vn\">Email</a>  Email     Liên kết điện thoại Bạn cũng có thể tạo liên kết điện thoại trong HTML <a href=\"tel:0587501083\">Điện thoại</a>  Điện thoại     Liên kết nút Bạn cũng có thể tạo liên kết nút trong HTML với thuộc tính onclick <button onclick=\"document.location='https://www.example.com'\">Bấm vào đây</button>  Bấm vào đây   Chú ý: Liên kết nút không sử dụng thẻ <a> mà sử                         dụng thẻ <button> và thuộc tính onclick.Nội dung trong thuộc tính là một đoạn mã javaScript để                         chuyển hướng người dùng đến trang web khác.                         Tiêu đề liên kết Thuộc tính title được sử dụng để xác định tiêu đề cho liên kết                         sẽ hiển thị khi di chuyển con trỏ chuột <a href=\"https://www.example.com\" title=\"Trang chủ\">Trang chủ</a>  Trang chủ"
    },
    {
        "title": "Thuộc tính target",
        "content": "Thuộc tính target Thuộc tính target được sử dụng để xác định cách mở trang web                         khi người dùng nhấp vào liên kết  _self: mở trang web trong cùng một tab hoặc cửa sổ trình                             duyệt (mặc định) _blank: mở trang web trong một tab hoặc cửa sổ trình                             duyệt mới _parent: mở trang web trong cửa sổ cha của cửa sổ hiện                             tại _top: mở trang web trong cửa sổ trình duyệt đỉnh nhất"
    },
    {
        "title": "URL tuyệt đối và URL tương đối",
        "content": "URL tuyệt đối và URL tương đối URL tuyệt đối là địa chỉ URL đầy đủ của trang web URL tương đối là địa chỉ URL tương đối của trang web Ví dụ về URL tuyệt đối <a href=\"https://www.example.com\">Example Domain</a> Ví dụ về URL tương đối <a href=\"/contact\">Liên hệ</a>"
    },
    {
        "title": "Liên kết hình ảnh",
        "content": "Liên kết hình ảnh Bạn cũng có thể tạo liên kết cho hình ảnh trong HTML <a href=\"https://www.example.com\">     <img src=\"image.jpg\" alt=\"Hình ảnh\"> </a> Trong đó:  src: xác định đường dẫn đến hình ảnh alt: xác định văn bản thay thế cho hình ảnh"
    },
    {
        "title": "Liên kết email",
        "content": "Liên kết email Bạn cũng có thể tạo liên kết email trong HTML <a href=\"mailto:namnvhe180863@fpt.edu.vn\">Email</a>  Email"
    },
    {
        "title": "Liên kết điện thoại",
        "content": "Liên kết điện thoại Bạn cũng có thể tạo liên kết điện thoại trong HTML <a href=\"tel:0587501083\">Điện thoại</a>  Điện thoại"
    },
    {
        "title": "Liên kết nút",
        "content": "Liên kết nút Bạn cũng có thể tạo liên kết nút trong HTML với thuộc tính onclick <button onclick=\"document.location='https://www.example.com'\">Bấm vào đây</button>  Bấm vào đây   Chú ý: Liên kết nút không sử dụng thẻ <a> mà sử                         dụng thẻ <button> và thuộc tính onclick.Nội dung trong thuộc tính là một đoạn mã javaScript để                         chuyển hướng người dùng đến trang web khác."
    },
    {
        "title": "Tiêu đề liên kết",
        "content": "Tiêu đề liên kết Thuộc tính title được sử dụng để xác định tiêu đề cho liên kết                         sẽ hiển thị khi di chuyển con trỏ chuột <a href=\"https://www.example.com\" title=\"Trang chủ\">Trang chủ</a>  Trang chủ"
    },
    {
        "title": "Hình ảnh trong HTML",
        "content": "Hình ảnh trong HTML Hình ảnh trong HTML được sử dụng để hiển thị hình ảnh trên trang web Hình ảnh trong HTML được tạo bằng thẻ <img> <img src=\"image.jpg\" alt=\"Hình ảnh\"> Trong đó:  src: xác định đường dẫn đến hình ảnh alt: xác định văn bản thay thế cho hình ảnh       Chiều rộng và chiều cao của hình ảnh Thuộc tính width và height                         được sử dụng để xác định chiều rộng và chiều cao của hình ảnh <img src=\"image.jpg\" alt=\"Hình ảnh\" width=\"100\" height=\"100\">       Hình ảnh động Bạn cũng có thể sử dụng hình ảnh động trong HTML Hình ảnh động được tạo bằng thẻ <img> và thuộc tính                         src trỏ đến đường dẫn của hình ảnh động                      <img src=\"animated.gif\" alt=\"Hình ảnh động\">       Đặt hình ảnh Thuộc tính float được sử dụng để đặt hình ảnh sang trái hoặc                         sang phải của văn bản <img src=\"image.jpg\" alt=\"Hình ảnh\" style=\"float:right\">       Bản đồ hình ảnh Bạn cũng có thể tạo bản đồ hình ảnh trong HTML Bản đồ hình ảnh được sử dụng để tạo các khu vực trên hình ảnh Bản đồ hình ảnh được tạo bằng thẻ <map> và <area> <img src=\"image.jpg\" alt=\"Hình ảnh\" usemap=\"#map\"> <map name=\"map\">     <area shape=\"rect\" coords=\"0,0,50,50\" href=\"https://www.example.com\"> </map>                                Bạn hãy thử click vào góc trên bên trái của hình ảnh để xem kết quả                       Trong đó:  shape: xác định hình dạng của khu vực coords: xác định tọa độ của khu vực href: xác định địa chỉ URL của trang web    Một số định dạng của shape  rect: hình chữ nhật circle: hình tròn poly: hình đa giác    Chú ý: Bản đồ hình ảnh không sử dụng phổ biến vì nó phức tạp và khó bảo trì                       Mẹo: Bạn cũng có thể sử dụng các công cụ trực tuyến như Image Map để tạo bản đồ hình ảnh một                         cách dễ dàng                         Hình ảnh nền Bạn cũng có thể sử dụng hình ảnh làm nền cho trang web Hình ảnh nền được sử dụng để thiết lập hình ảnh làm nền cho trang web Hình ảnh nền được tạo bằng CSS <div style=\"background-color:url(\"anh_nen.jpg\")\">     <h1>Tiêu đề</h1>     <p>Đây là đoạn văn bản</p> </div>   Tiêu đề Đây là đoạn văn bản      Phần tử hình ảnh Phần tử hình ảnh trong HTML5 được sử dụng để hiển thị hình ảnh trên trang web Phần tử hình ảnh trong HTML5 được tạo bằng thẻ <picture>  <picture>     <source srcset=\"image.jpg\" media=\"(min-width: 800px)\">     <img src=\"image.jpg\" alt=\"Hình ảnh\"> </picture>  Trong đó:  <source>: xác định hình ảnh dự phòng cho các                                 thiết bị có kích thước màn hình khác nhau srcset: xác định đường dẫn đến hình ảnh media: xác định điều kiện hiển thị hình ảnh           Ứng dụng của thẻ <picture>:   Hiển thị hình ảnh dự phòng cho các thiết bị có kích thước màn hình khác nhau Tiết kiệm băng thông đối với những thiết bị có màn hình nhỏ chỉ cần tải hình ảnh có kích                                 thước nhỏ hơn.    Chú ý:trình duyệt sẽ chọn <source> đầu tiên mà                         điều kiện media đúng với kích thước màn hình của thiết bị                         người dùng và hiển thị hình ảnh tương ứng."
    },
    {
        "title": "Chiều rộng và chiều cao của hình ảnh",
        "content": "Chiều rộng và chiều cao của hình ảnh Thuộc tính width và height                         được sử dụng để xác định chiều rộng và chiều cao của hình ảnh <img src=\"image.jpg\" alt=\"Hình ảnh\" width=\"100\" height=\"100\">"
    },
    {
        "title": "Hình ảnh động",
        "content": "Hình ảnh động Bạn cũng có thể sử dụng hình ảnh động trong HTML Hình ảnh động được tạo bằng thẻ <img> và thuộc tính                         src trỏ đến đường dẫn của hình ảnh động                      <img src=\"animated.gif\" alt=\"Hình ảnh động\">"
    },
    {
        "title": "Đặt hình ảnh",
        "content": "Đặt hình ảnh Thuộc tính float được sử dụng để đặt hình ảnh sang trái hoặc                         sang phải của văn bản <img src=\"image.jpg\" alt=\"Hình ảnh\" style=\"float:right\">"
    },
    {
        "title": "Bản đồ hình ảnh",
        "content": "Bản đồ hình ảnh Bạn cũng có thể tạo bản đồ hình ảnh trong HTML Bản đồ hình ảnh được sử dụng để tạo các khu vực trên hình ảnh Bản đồ hình ảnh được tạo bằng thẻ <map> và <area> <img src=\"image.jpg\" alt=\"Hình ảnh\" usemap=\"#map\"> <map name=\"map\">     <area shape=\"rect\" coords=\"0,0,50,50\" href=\"https://www.example.com\"> </map>                                Bạn hãy thử click vào góc trên bên trái của hình ảnh để xem kết quả                       Trong đó:  shape: xác định hình dạng của khu vực coords: xác định tọa độ của khu vực href: xác định địa chỉ URL của trang web    Một số định dạng của shape  rect: hình chữ nhật circle: hình tròn poly: hình đa giác    Chú ý: Bản đồ hình ảnh không sử dụng phổ biến vì nó phức tạp và khó bảo trì                       Mẹo: Bạn cũng có thể sử dụng các công cụ trực tuyến như Image Map để tạo bản đồ hình ảnh một                         cách dễ dàng"
    },
    {
        "title": "Hình ảnh nền",
        "content": "Hình ảnh nền Bạn cũng có thể sử dụng hình ảnh làm nền cho trang web Hình ảnh nền được sử dụng để thiết lập hình ảnh làm nền cho trang web Hình ảnh nền được tạo bằng CSS <div style=\"background-color:url(\"anh_nen.jpg\")\">     <h1>Tiêu đề</h1>     <p>Đây là đoạn văn bản</p> </div>   Tiêu đề Đây là đoạn văn bản"
    },
    {
        "title": "Phần tử hình ảnh",
        "content": "Phần tử hình ảnh Phần tử hình ảnh trong HTML5 được sử dụng để hiển thị hình ảnh trên trang web Phần tử hình ảnh trong HTML5 được tạo bằng thẻ <picture>  <picture>     <source srcset=\"image.jpg\" media=\"(min-width: 800px)\">     <img src=\"image.jpg\" alt=\"Hình ảnh\"> </picture>  Trong đó:  <source>: xác định hình ảnh dự phòng cho các                                 thiết bị có kích thước màn hình khác nhau srcset: xác định đường dẫn đến hình ảnh media: xác định điều kiện hiển thị hình ảnh           Ứng dụng của thẻ <picture>:   Hiển thị hình ảnh dự phòng cho các thiết bị có kích thước màn hình khác nhau Tiết kiệm băng thông đối với những thiết bị có màn hình nhỏ chỉ cần tải hình ảnh có kích                                 thước nhỏ hơn.    Chú ý:trình duyệt sẽ chọn <source> đầu tiên mà                         điều kiện media đúng với kích thước màn hình của thiết bị                         người dùng và hiển thị hình ảnh tương ứng."
    },
    {
        "title": "Favicon trong HTML",
        "content": "Favicon trong HTML Favicon trong HTML được sử dụng để hiển thị biểu tượng trang web trên trình duyệt Favicon trong HTML được tạo bằng thẻ <link> <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">  Thêm Icon Trong đó:  rel=\"icon\": xác định loại biểu tượng href: xác định đường dẫn đến biểu tượng type=\"image/x-icon\": xác định kiểu biểu tượng   Chú ý: Favicon thường có định dạng .ico và kích thước                     16x16 hoặc 32x32 pixel                   Mẹo: Bạn cũng có thể sử dụng các công cụ trực tuyến như Favicon Generator để tạo favicon                     một cách dễ dàng"
    },
    {
        "title": "Tiêu đề trang web trong HTML",
        "content": "Tiêu đề trang web trong HTML Tiêu đề trang web trong HTML được sử dụng để xác định chủ đề của trang web Tiêu đề trang web trong HTML được tạo bằng thẻ <title> Tiêu đề rất quan trọng cho SEO (Search Engine Optimization). Tiêu đề được các công cụ tìm kiếm                     căn cứ vào để quyết định sắp xếp thứ tự trong kết quả tìm kiếm. Phần tử <title>:   Hiển thị trên thanh tiêu đề của trình duyệt Hiển thị trong kết quả tìm kiếm của các công cụ tìm kiếm Là tiêu đề khi người dùng thêm trang vào mục yêu thích  <title>Tiêu đề trang web</title>  Thay đổi tiêu đề"
    },
    {
        "title": "Bảng trong HTML",
        "content": "Bảng trong HTML Bảng trong HTML được sử dụng để hiển thị dữ liệu dưới dạng bảng Bảng trong HTML được tạo bằng thẻ <table> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>   Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4    Chú ý:  <tr>: xác định hàng trong bảng <th>: xác định tiêu đề cột <td>: xác định dữ liệu     Ô bảng Mỗi ô trong bảng được định nghĩa trong cặp thẻ <td> và                         </td>  Ô bảng có thể chứa văn bản, hình ảnh, liên kết, danh sách v.v.  <td> viết tắt của table data     Hàng bảng Mỗi hàng trong bảng được định nghĩa trong cặp thẻ <tr>                         và </tr> Hàng bảng chứa các ô bảng  <tr> viết tắt của table row     Tiêu đề bảng Mỗi tiêu đề cột trong bảng được định nghĩa trong cặp thẻ <th> và </th>  Tiêu đề cột thường được viết in đậm và căn giữa  <th> viết tắt của table header     Đường viền bảng Thuộc tính border được sử dụng để thiết lập đường viền cho bảng                      <style>     table, th, td {         border: 1px solid black;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>     Đường viền bảng gấp Thuộc tính border-collapse được sử dụng để thiết lập đường viền                         bảng gấp <style>     table, th, td {         border: 1px solid black;         border-collapse: collapse;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>     Đường viền bảng phong cách Nếu thiết lập màu nền cho mỗi ô đồng thời chuyển màu viền cùng màu với màu nền bạn sẽ có viền                         trông giống tàng hình <style>     table, th, td {         border: 1px solid #f4f4f4;         border-collapse: collapse;     }     th, td {         background-color: powderblue;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>     Đường viền bảng tròn Thuộc tính border-radius được sử dụng để thiết lập đường viền                         tròn cho bảng <style>     th, td {         border: 1px solid black;         border-radius: 10px;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>     Phong cách đường viền Thuộc tính border-style được sử dụng để thiết lập kiểu đường                         viền cho bảng <style>     th, td {         border-width: 2px;         border-style: dotted;         border-color: red;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chọn kiểu đường viền:  Solid Dotted Dashed Double Groove Ridge Inset Outset None Hidden     Kích thước bảng Bạn có thể tùy chỉnh kích thước trong bảng như độ rộng cột, độ cao hàng hoặc là toàn bảng Thuộc tính width và height                         được sử dụng để thiết lập kích thước bảng Độ rộng bảng  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chú ý: chiều rộng bảng được thiết lập bằng phần trăm width:100% để bảng tự động điều chỉnh kích thước theo kích thước                         của phần tử cha                      Độ rộng cột  <table style=\"width:100%\">     <tr>         <th style=\"width:60%\">Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4                             Để chỉnh độ rộng của cột bạn cần thiết lập width cho thẻ <th>  Độ cao hàng  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr style=\"height:150px;\">         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4                             Để chỉnh độ cao của hàng bạn cần thiết lập height cho thẻ                         <tr>     Đầu bảng Bảng có thể có nhiều tiêu đề cho mỗi hàng, cột hoặc nhiều hàng, cột Tiêu đề cho nhiều cột                          Để tạo tiêu đề cho nhiều cột có thể dùng thuộc tính colspan                         trong thẻ <th> để gộp các cột lại với nhau                       <table style=\"width:100%\">     <tr>         <th colspan=\"2\">Tiêu đề cột 1&2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr style=\"height:150px;\">          <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>         <td>Dữ liệu 3</td>     </tr>     <tr>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>     </tr> </tr> </table>    Tiêu đề cột 1&2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2 Dữ liệu 3   Dữ liệu 4 Dữ liệu 5 Dữ liệu 6     Chú ý: thuộc tính colspan được sử dụng để gộp các cột                         lại với nhau                      Chú thích bảng Bạn có thể thêm chú thích vào bảng bằng cách sử dụng cặp thẻ <caption> và </caption>  <table style=\"width:100%\">     <caption>Chú thích bảng</caption>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>   Chú thích bảng  Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chú ý:                         thẻ <caption> phải được thêm ngay sau thẻ <table>     Thuộc tính colspan và rowspan Thuộc tính colspan và rowspan được sử dụng để gộp các cột hoặc hàng lại với nhau Thuộc tính colspan được sử dụng để gộp các cột lại với nhau                      Thuộc tính rowspan được sử dụng để gộp các hàng lại với nhau                      Thuộc tính colspan   <table style=\"width:100%\">     <tr>         <th colspan=\"2\">Tiêu đề cột 1&2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr\">          <td>Dữ liệu 1</td>         <td colspan=\"2\">Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>     </tr> </tr> </table>    Tiêu đề cột 1&2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4 Dữ liệu 5    Thuộc tính rowspan   <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr>          <td rowspan=\"2\">Dữ liệu 1</td>         <td>Dữ liệu 2</td>         <td>Dữ liệu 3</td>     </tr>     <tr>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2 Dữ liệu 3   Dữ liệu 4 Dữ liệu 5       Kiểu bảng Bạn có thể tùy chỉnh kiểu bảng bằng cách sử dụng CSS, một số kiểu thông dụng như sọc ngựa vằn                         (Zebra Stripes) hoặc sọc ngựa vằn dọc (Vetical Zebra Stripes) ... Sọc ngựa vằn Để tạo sọc ngựa vằn cho bảng bạn cần thiết lập màu nền cho các hàng chẵn và lẻ Mã CSS  table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  tr:nth-child(even) {     background-color: #5decff; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Thuộc tính border-collapse: collapse; được sử dụng để                                 gộp các đường viền của bảng lại với nhau Thuộc tính tr:nth-child(even) được sử dụng để chọn các                                 hàng chẵn (2, 4, 6,...) Nếu muốn áp dụng với các hàng lẻ sử dụng thuộc tính tr:nth-child(odd)    Sọc ngựa vằn dọc Để tạo sọc ngựa vằn dọc cho bảng bạn cần thiết lập màu nền cho các cột chẵn và lẻ Mã CSS  table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  th:nth-child(even), td:nth-child(even) {     background-color: #5decff; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Thuộc tính th:nth-child(even), td:nth-child(even) được                                 sử dụng để chọn các cột chẵn (2, 4, 6,...) Nếu muốn áp dụng với các cột lẻ sử dụng thuộc tính th:nth-child(odd), td:nth-child(odd)    Kết hợp sọc ngang và dọc Bạn cũng có thể kết hợp cả sọc ngang và dọc cho bảng Mã CSS      table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  tr:nth-child(even) {     background-color: #78efff65; }  th:nth-child(even), td:nth-child(even) {     background-color: #78efff65; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Để kết hợp cả sọc ngang và dọc bạn cần thiết lập màu nền cho cả hàng và cột chẵn   Chia ngang Bạn cũng có thể chia bảng thành nhiều phần ngang bằng cách sử dụng thuộc tính border-bottom cho các hàng Mã CSS table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left;     border-bottom: 1px solid black; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </table>    Chú ý:  Thuộc tính border-bottom: 1px solid black; được sử                                 dụng để tạo đường viền dưới cho các hàng   nổi bật hàng khi di chuột Bạn cũng có thể làm cho hàng nổi bật khi di chuột qua bằng cách sử dụng thuộc tính :hover Mã CSS table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left;     border-bottom: 1px solid black; }  tr:hover {     background-color: #78efff65; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </table>    Chú ý:  Thuộc tính tr:hover được sử dụng để chọn hàng khi di                                 chuột qua       Danh sách Danh sách là một phần quan trọng trong việc hiển thị thông tin, danh sách có thể là danh sách                         không có thứ tự, có thứ tự hoặc là danh sách con Danh sách không có thứ tự Danh sách không có thứ tự là danh sách mà các mục không được đánh số hoặc đánh dấu Mã HTML  <ul>     <li>Mục 1</li>     <li>Mục 2</li>     <li>Mục 3</li>     <li>Mục 4</li> </ul>   Danh sách có thứ tự Danh sách có thứ tự là danh sách mà các mục được đánh số hoặc đánh dấu Mã HTML  <ol>     <li>Mục 1</li>     <li>Mục 2</li>     <li>Mục 3</li>     <li>Mục 4</li> </ol>   Danh sách con Danh sách con là danh sách mà một mục trong danh sách có thể chứa một danh sách khác Mã HTML  <ul>     <li>Mục 1</li>     <li>Mục 2     <ul>         <li>Mục con 1</li>         <li>Mục con 2</li>         <li>Mục con 3</li>     </ul>     </li>     <li>Mục 3</li>     <li>Mục 4</li> </ul>"
    },
    {
        "title": "Ô bảng",
        "content": "Ô bảng Mỗi ô trong bảng được định nghĩa trong cặp thẻ <td> và                         </td>  Ô bảng có thể chứa văn bản, hình ảnh, liên kết, danh sách v.v.  <td> viết tắt của table data"
    },
    {
        "title": "Hàng bảng",
        "content": "Hàng bảng Mỗi hàng trong bảng được định nghĩa trong cặp thẻ <tr>                         và </tr> Hàng bảng chứa các ô bảng  <tr> viết tắt của table row"
    },
    {
        "title": "Tiêu đề bảng",
        "content": "Tiêu đề bảng Mỗi tiêu đề cột trong bảng được định nghĩa trong cặp thẻ <th> và </th>  Tiêu đề cột thường được viết in đậm và căn giữa  <th> viết tắt của table header"
    },
    {
        "title": "Đường viền bảng",
        "content": "Đường viền bảng Thuộc tính border được sử dụng để thiết lập đường viền cho bảng                      <style>     table, th, td {         border: 1px solid black;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>"
    },
    {
        "title": "Đường viền bảng gấp",
        "content": "Đường viền bảng gấp Thuộc tính border-collapse được sử dụng để thiết lập đường viền                         bảng gấp <style>     table, th, td {         border: 1px solid black;         border-collapse: collapse;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>"
    },
    {
        "title": "Đường viền bảng phong cách",
        "content": "Đường viền bảng phong cách Nếu thiết lập màu nền cho mỗi ô đồng thời chuyển màu viền cùng màu với màu nền bạn sẽ có viền                         trông giống tàng hình <style>     table, th, td {         border: 1px solid #f4f4f4;         border-collapse: collapse;     }     th, td {         background-color: powderblue;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>"
    },
    {
        "title": "Đường viền bảng tròn",
        "content": "Đường viền bảng tròn Thuộc tính border-radius được sử dụng để thiết lập đường viền                         tròn cho bảng <style>     th, td {         border: 1px solid black;         border-radius: 10px;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>"
    },
    {
        "title": "Phong cách đường viền",
        "content": "Phong cách đường viền Thuộc tính border-style được sử dụng để thiết lập kiểu đường                         viền cho bảng <style>     th, td {         border-width: 2px;         border-style: dotted;         border-color: red;     } </style> <table>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chọn kiểu đường viền:  Solid Dotted Dashed Double Groove Ridge Inset Outset None Hidden"
    },
    {
        "title": "Kích thước bảng",
        "content": "Kích thước bảng Bạn có thể tùy chỉnh kích thước trong bảng như độ rộng cột, độ cao hàng hoặc là toàn bảng Thuộc tính width và height                         được sử dụng để thiết lập kích thước bảng Độ rộng bảng  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chú ý: chiều rộng bảng được thiết lập bằng phần trăm width:100% để bảng tự động điều chỉnh kích thước theo kích thước                         của phần tử cha                      Độ rộng cột  <table style=\"width:100%\">     <tr>         <th style=\"width:60%\">Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4                             Để chỉnh độ rộng của cột bạn cần thiết lập width cho thẻ <th>  Độ cao hàng  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr style=\"height:150px;\">         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4                             Để chỉnh độ cao của hàng bạn cần thiết lập height cho thẻ                         <tr>"
    },
    {
        "title": "Đầu bảng",
        "content": "Đầu bảng Bảng có thể có nhiều tiêu đề cho mỗi hàng, cột hoặc nhiều hàng, cột Tiêu đề cho nhiều cột                          Để tạo tiêu đề cho nhiều cột có thể dùng thuộc tính colspan                         trong thẻ <th> để gộp các cột lại với nhau                       <table style=\"width:100%\">     <tr>         <th colspan=\"2\">Tiêu đề cột 1&2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr style=\"height:150px;\">          <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>         <td>Dữ liệu 3</td>     </tr>     <tr>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>     </tr> </tr> </table>    Tiêu đề cột 1&2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2 Dữ liệu 3   Dữ liệu 4 Dữ liệu 5 Dữ liệu 6     Chú ý: thuộc tính colspan được sử dụng để gộp các cột                         lại với nhau                      Chú thích bảng Bạn có thể thêm chú thích vào bảng bằng cách sử dụng cặp thẻ <caption> và </caption>  <table style=\"width:100%\">     <caption>Chú thích bảng</caption>     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>     </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>     </tr> </tr> </table>   Chú thích bảng  Tiêu đề cột 1 Tiêu đề cột 2   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4     Chú ý:                         thẻ <caption> phải được thêm ngay sau thẻ <table>"
    },
    {
        "title": "Thuộc tính colspan và rowspan",
        "content": "Thuộc tính colspan và rowspan Thuộc tính colspan và rowspan được sử dụng để gộp các cột hoặc hàng lại với nhau Thuộc tính colspan được sử dụng để gộp các cột lại với nhau                      Thuộc tính rowspan được sử dụng để gộp các hàng lại với nhau                      Thuộc tính colspan   <table style=\"width:100%\">     <tr>         <th colspan=\"2\">Tiêu đề cột 1&2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr\">          <td>Dữ liệu 1</td>         <td colspan=\"2\">Dữ liệu 2</td>     </tr>     <tr>         <td>Dữ liệu 3</td>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>     </tr> </tr> </table>    Tiêu đề cột 1&2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2   Dữ liệu 3 Dữ liệu 4 Dữ liệu 5    Thuộc tính rowspan   <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>         <th>Tiêu đề cột 3</th>     </tr>     <tr>          <td rowspan=\"2\">Dữ liệu 1</td>         <td>Dữ liệu 2</td>         <td>Dữ liệu 3</td>     </tr>     <tr>         <td>Dữ liệu 4</td>         <td>Dữ liệu 5</td>     </tr> </tr> </table>    Tiêu đề cột 1 Tiêu đề cột 2 Tiêu đề cột 3   Dữ liệu 1 Dữ liệu 2 Dữ liệu 3   Dữ liệu 4 Dữ liệu 5"
    },
    {
        "title": "Kiểu bảng",
        "content": "Kiểu bảng Bạn có thể tùy chỉnh kiểu bảng bằng cách sử dụng CSS, một số kiểu thông dụng như sọc ngựa vằn                         (Zebra Stripes) hoặc sọc ngựa vằn dọc (Vetical Zebra Stripes) ... Sọc ngựa vằn Để tạo sọc ngựa vằn cho bảng bạn cần thiết lập màu nền cho các hàng chẵn và lẻ Mã CSS  table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  tr:nth-child(even) {     background-color: #5decff; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Thuộc tính border-collapse: collapse; được sử dụng để                                 gộp các đường viền của bảng lại với nhau Thuộc tính tr:nth-child(even) được sử dụng để chọn các                                 hàng chẵn (2, 4, 6,...) Nếu muốn áp dụng với các hàng lẻ sử dụng thuộc tính tr:nth-child(odd)    Sọc ngựa vằn dọc Để tạo sọc ngựa vằn dọc cho bảng bạn cần thiết lập màu nền cho các cột chẵn và lẻ Mã CSS  table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  th:nth-child(even), td:nth-child(even) {     background-color: #5decff; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Thuộc tính th:nth-child(even), td:nth-child(even) được                                 sử dụng để chọn các cột chẵn (2, 4, 6,...) Nếu muốn áp dụng với các cột lẻ sử dụng thuộc tính th:nth-child(odd), td:nth-child(odd)    Kết hợp sọc ngang và dọc Bạn cũng có thể kết hợp cả sọc ngang và dọc cho bảng Mã CSS      table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left; }  tr:nth-child(even) {     background-color: #78efff65; }  th:nth-child(even), td:nth-child(even) {     background-color: #78efff65; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </tr> </table>    Chú ý:  Để kết hợp cả sọc ngang và dọc bạn cần thiết lập màu nền cho cả hàng và cột chẵn   Chia ngang Bạn cũng có thể chia bảng thành nhiều phần ngang bằng cách sử dụng thuộc tính border-bottom cho các hàng Mã CSS table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left;     border-bottom: 1px solid black; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </table>    Chú ý:  Thuộc tính border-bottom: 1px solid black; được sử                                 dụng để tạo đường viền dưới cho các hàng   nổi bật hàng khi di chuột Bạn cũng có thể làm cho hàng nổi bật khi di chuột qua bằng cách sử dụng thuộc tính :hover Mã CSS table {     border-collapse: collapse;     width: 100%; }  th, td {     text-align: left;     border-bottom: 1px solid black; }  tr:hover {     background-color: #78efff65; }  Mã HTML  <table style=\"width:100%\">     <tr>         <th>Tiêu đề cột 1</th>         <th>Tiêu đề cột 2</th>           <th>Tiêu đề cột 3</th>           <th>Tiêu đề cột 4</th>       </tr>     <tr>         <td>Dữ liệu 1</td>         <td>Dữ liệu 2</td>           <td>Dữ liệu 3</td>           <td>Dữ liệu 4</td>       </tr>     <tr>         <td>Dữ liệu 5</td>         <td>Dữ liệu 6</td>         <td>Dữ liệu 7</td>         <td>Dữ liệu 8</td>     </tr>     <tr>         <td>Dữ liệu 9</td>         <td>Dữ liệu 10</td>         <td>Dữ liệu 11</td>         <td>Dữ liệu 12</td>     </tr>     <tr>         <td>Dữ liệu 13</td>         <td>Dữ liệu 14</td>         <td>Dữ liệu 15</td>         <td>Dữ liệu 16</td>     </tr> </table>    Chú ý:  Thuộc tính tr:hover được sử dụng để chọn hàng khi di                                 chuột qua"
    },
    {
        "title": "Danh sách",
        "content": "Danh sách Danh sách là một phần quan trọng trong việc hiển thị thông tin, danh sách có thể là danh sách                         không có thứ tự, có thứ tự hoặc là danh sách con Danh sách không có thứ tự Danh sách không có thứ tự là danh sách mà các mục không được đánh số hoặc đánh dấu Mã HTML  <ul>     <li>Mục 1</li>     <li>Mục 2</li>     <li>Mục 3</li>     <li>Mục 4</li> </ul>   Danh sách có thứ tự Danh sách có thứ tự là danh sách mà các mục được đánh số hoặc đánh dấu Mã HTML  <ol>     <li>Mục 1</li>     <li>Mục 2</li>     <li>Mục 3</li>     <li>Mục 4</li> </ol>   Danh sách con Danh sách con là danh sách mà một mục trong danh sách có thể chứa một danh sách khác Mã HTML  <ul>     <li>Mục 1</li>     <li>Mục 2     <ul>         <li>Mục con 1</li>         <li>Mục con 2</li>         <li>Mục con 3</li>     </ul>     </li>     <li>Mục 3</li>     <li>Mục 4</li> </ul>"
    },
    {
        "title": "Phần tử khối và phần tử nội dòng",
        "content": "Phần tử khối và phần tử nội dòng Phần tử khối là phần tử mà nó chiếm toàn bộ chiều rộng của trang web, phần tử nội dòng là phần tử mà                     nó chỉ chiếm chiều rộng của nội dung Phần tử khối Các phần tử khối thường được sử dụng để tạo các khối lớn trên trang web như tiêu đề, đoạn văn, bảng,                     danh sách, hình ảnh, video, form, ... Các phần tử khối thường có chiều rộng mặc định là 100% chiều rộng của trang web Một số phần tử khối phổ biến:  <address> <article> <aside> <blockquote> <canvas> <dd> <div> <dl> <dt> <fieldset> <figcaption> <figure> <footer> <form> <h1> - <h6> <header> <hr> <li> <main> <nav> <noscript> <ol> <p> <pre> <section> <table> <tfoot> <ul> <video>  Phần tử nội dòng Các phần tử nội dòng thường được sử dụng để tạo các phần tử nhỏ trong trang web như đoạn văn, từ,                     hình ảnh, video, ... Các phần tử nội dòng thường có chiều rộng mặc định là chiều rộng của nội dung Một số phần tử nội dòng phổ biến:  <a> <abbr> <acronym> <b> <bdo> <big> <br> <button> <cite> <code> <dfn> <em> <i> <img> <input> <kbd> <label> <map> <object> <output> <q> <samp> <script> <select> <small> <span> <strong> <sub> <sup> <textarea> <time> <tt> <var>    Phần tử <div> và <span> Phần tử <div> và <span> là hai phần tử khối và nội dòng phổ biến nhất                         trong HTML Phần tử <div> được sử dụng để tạo một khối lớn trên                         trang web, phần tử <span> được sử dụng để tạo một phần                         tử nhỏ trong trang web Phần tử <div> Phần tử <div> thường được sử dụng để tạo các khối lớn                         trên trang web như tiêu đề, đoạn văn, bảng, danh sách, hình ảnh, video, form, ... Phần tử <div> không có thuộc tính bắt buộc, nhưng nó                         thường có những thuộc tính id, class và style Mã HTML  <div id=\"exDiv\" class=\"exDiv\" style=\"background-color: aqua; padding: 10px; color: red;\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn   Phần tử <span> Phần tử <span> thường được sử dụng để tạo các phần tử                         nhỏ trong trang web như từ, hình ảnh, video, ... Phần tử <span> không có thuộc tính bắt buộc, nhưng nó                         thường có những thuộc tính id, class và style Mã HTML  <p>Đây là một đoạn văn bản bình thường, <span style=\"color: red;\">đây là một từ nổi bật</span></p>  Đây là một đoạn văn bản bình thường, đây là một từ nổi bật"
    },
    {
        "title": "Phần tử <div> và <span>",
        "content": "Phần tử <div> và <span> Phần tử <div> và <span> là hai phần tử khối và nội dòng phổ biến nhất                         trong HTML Phần tử <div> được sử dụng để tạo một khối lớn trên                         trang web, phần tử <span> được sử dụng để tạo một phần                         tử nhỏ trong trang web Phần tử <div> Phần tử <div> thường được sử dụng để tạo các khối lớn                         trên trang web như tiêu đề, đoạn văn, bảng, danh sách, hình ảnh, video, form, ... Phần tử <div> không có thuộc tính bắt buộc, nhưng nó                         thường có những thuộc tính id, class và style Mã HTML  <div id=\"exDiv\" class=\"exDiv\" style=\"background-color: aqua; padding: 10px; color: red;\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn   Phần tử <span> Phần tử <span> thường được sử dụng để tạo các phần tử                         nhỏ trong trang web như từ, hình ảnh, video, ... Phần tử <span> không có thuộc tính bắt buộc, nhưng nó                         thường có những thuộc tính id, class và style Mã HTML  <p>Đây là một đoạn văn bản bình thường, <span style=\"color: red;\">đây là một từ nổi bật</span></p>  Đây là một đoạn văn bản bình thường, đây là một từ nổi bật"
    },
    {
        "title": "Phần tử <div>",
        "content": "Phần tử <div> Phần tử <div> là một phần tử khối được sử dụng để tạo một                     khối lớn trên trang web Phần tử <div> không có thuộc tính bắt buộc, nhưng nó thường                     có những thuộc tính id, class                     và style   Phần tử <div> là một container Phần tử <div> thường được sử dụng để tạo một container                         chứa                         các phần tử khác nhau như tiêu đề, đoạn văn, bảng, danh sách, hình ảnh, video, form, ... Mã HTML <div id=\"exDiv\" class=\"exDiv\" style=\"style=\"background-color:rgb(255, 255, 102);\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn      Căn giữa phần tử <div> Bạn có thể căn giữa phần tử <div> bằng cách sử dụng CSS                         với thuộc tính margin được đặt là auto  <div id=\"centerDiv\" class=\"centerDiv\" style=\"background-color:rgb(255, 255, 102); width: 50%; margin: auto;\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn      Nhiều thẻ <div> Bạn có thể thêm nhiều thẻ <div> trong cùng trang. Mã HTML  <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102);\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115);\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255);\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3      Căn lề các phần tử <div> cạnh nhau Bạn có thể căn lề các phần tử <div> cạnh nhau bằng cách                         sử dụng CSS với thuộc tính float Mã HTML  <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); float:left; width:33%;\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); float:left; width:33%;\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); float:left; width:33%;\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3      Phần tử <div> với thuộc tính display: inline-block Bạn có thể sử dụng thuộc tính display: inline-block để tạo các                         phần tử <div> nằm cạnh nhau  Chú ý: Thuộc tính display: inline-block sẽ chuyển đổi                         từ dạng khối sang nội dòng, tức là các phần tử <div> sẽ                         nằm cạnh nhau thay vì xuống dòng mới                      Mã HTML <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3      Phần tử <div> với thuộc tính display: flex                          flexbox là một mô hình layout mà các phần tử con của một phần tử cha có thể được sắp xếp theo                         bất kỳ hướng nào và có thể căn chỉnh theo kích thước của phần tử cha                      Mã HTML <div id=\"container\" class=\"container\" style=\"display: flex;\">     <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); width:33%;\">         <h1>Tiêu đề 1</h1>         <p>Đoạn văn 1</p>     </div>      <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); width:33%;\">         <h1>Tiêu đề 2</h1>         <p>Đoạn văn 2</p>     </div>      <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); width:33%;\">         <h1>Tiêu đề 3</h1>         <p>Đoạn văn 3</p>     </div> </div>     Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3       Phần tử <div> với thuộc tính display: grid                          grid layout là một mô hình layout mà các phần tử con của một phần tử cha có thể được sắp xếp                         theo hàng và cột                      Mã HTML <div id=\"container\" class=\"container\" style=\"display: grid; grid-template-columns: 33% 33% 33%;\">     <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102);\">         <h1>Tiêu đề 1</h1>         <p>Đoạn văn 1</p>     </div>      <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115);\">         <h1>Tiêu đề 2</h1>         <p>Đoạn văn 2</p>     </div>      <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255);\">         <h1>Tiêu đề 3</h1>         <p>Đoạn văn 3</p>     </div> </div>     Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3     Chú ý:  Thuộc tính display: grid sẽ chuyển đổi từ dạng khối                                 sang grid layout Thuộc tính grid-template-columns sẽ chia các cột thành                                 các phần tử con"
    },
    {
        "title": "Phần tử <div> là một container",
        "content": "Phần tử <div> là một container Phần tử <div> thường được sử dụng để tạo một container                         chứa                         các phần tử khác nhau như tiêu đề, đoạn văn, bảng, danh sách, hình ảnh, video, form, ... Mã HTML <div id=\"exDiv\" class=\"exDiv\" style=\"style=\"background-color:rgb(255, 255, 102);\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn"
    },
    {
        "title": "Căn giữa phần tử <div>",
        "content": "Căn giữa phần tử <div> Bạn có thể căn giữa phần tử <div> bằng cách sử dụng CSS                         với thuộc tính margin được đặt là auto  <div id=\"centerDiv\" class=\"centerDiv\" style=\"background-color:rgb(255, 255, 102); width: 50%; margin: auto;\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div>   Tiêu đề Đoạn văn"
    },
    {
        "title": "Nhiều thẻ <div>",
        "content": "Nhiều thẻ <div> Bạn có thể thêm nhiều thẻ <div> trong cùng trang. Mã HTML  <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102);\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115);\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255);\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3"
    },
    {
        "title": "Căn lề các phần tử <div> cạnh nhau",
        "content": "Căn lề các phần tử <div> cạnh nhau Bạn có thể căn lề các phần tử <div> cạnh nhau bằng cách                         sử dụng CSS với thuộc tính float Mã HTML  <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); float:left; width:33%;\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); float:left; width:33%;\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); float:left; width:33%;\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3"
    },
    {
        "title": "Phần tử <div> với thuộc tính display: inline-block",
        "content": "Phần tử <div> với thuộc tính display: inline-block Bạn có thể sử dụng thuộc tính display: inline-block để tạo các                         phần tử <div> nằm cạnh nhau  Chú ý: Thuộc tính display: inline-block sẽ chuyển đổi                         từ dạng khối sang nội dòng, tức là các phần tử <div> sẽ                         nằm cạnh nhau thay vì xuống dòng mới                      Mã HTML <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 1</h1>     <p>Đoạn văn 1</p> </div>  <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 2</h1>     <p>Đoạn văn 2</p> </div>  <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); display:\"inline-block\"; width:30%;\">     <h1>Tiêu đề 3</h1>     <p>Đoạn văn 3</p> </div>    Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3"
    },
    {
        "title": "Phần tử <div> với thuộc tính display: flex",
        "content": "Phần tử <div> với thuộc tính display: flex                          flexbox là một mô hình layout mà các phần tử con của một phần tử cha có thể được sắp xếp theo                         bất kỳ hướng nào và có thể căn chỉnh theo kích thước của phần tử cha                      Mã HTML <div id=\"container\" class=\"container\" style=\"display: flex;\">     <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102); width:33%;\">         <h1>Tiêu đề 1</h1>         <p>Đoạn văn 1</p>     </div>      <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115); width:33%;\">         <h1>Tiêu đề 2</h1>         <p>Đoạn văn 2</p>     </div>      <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255); width:33%;\">         <h1>Tiêu đề 3</h1>         <p>Đoạn văn 3</p>     </div> </div>     Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3"
    },
    {
        "title": "Phần tử <div> với thuộc tính display: grid",
        "content": "Phần tử <div> với thuộc tính display: grid                          grid layout là một mô hình layout mà các phần tử con của một phần tử cha có thể được sắp xếp                         theo hàng và cột                      Mã HTML <div id=\"container\" class=\"container\" style=\"display: grid; grid-template-columns: 33% 33% 33%;\">     <div id=\"div1\" class=\"div1\" style=\"background-color:rgb(255, 255, 102);\">         <h1>Tiêu đề 1</h1>         <p>Đoạn văn 1</p>     </div>      <div id=\"div2\" class=\"div2\" style=\"background-color:rgb(115, 255, 115);\">         <h1>Tiêu đề 2</h1>         <p>Đoạn văn 2</p>     </div>      <div id=\"div3\" class=\"div3\" style=\"background-color:rgb(122, 122, 255);\">         <h1>Tiêu đề 3</h1>         <p>Đoạn văn 3</p>     </div> </div>     Tiêu đề 1 Đoạn văn 1   Tiêu đề 2 Đoạn văn 2   Tiêu đề 3 Đoạn văn 3     Chú ý:  Thuộc tính display: grid sẽ chuyển đổi từ dạng khối                                 sang grid layout Thuộc tính grid-template-columns sẽ chia các cột thành                                 các phần tử con"
    },
    {
        "title": "Thuộc tính class trong HTML",
        "content": "Thuộc tính class trong HTML Thuộc tính class trong HTML được sử dụng để xác định một hoặc                     nhiều phần tử có cùng một lớp Thuộc tính class thường được sử dụng để tạo CSS cho một hoặc nhiều                     phần tử cũng như dùng bởi javaScript để tìm kiếm các phần tử bằng tên lớp Mã HTML <div class=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS .content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }   Chú ý:  Thuộc tính class có thể được sử dụng cho bất cứ phần tử                             HTML nào Tên class không thể bắt đầu bằng số hoặc ký tự đặc biệt                             và có phân biệt giữa chữ hoa và chữ thường Tên class không thể chứa khoảng trắng Một class có thể dùng chung cho nhiều phần tử    Cú pháp class trong CSS Cú pháp của class bắt đầu bằng dấu chấm (.) và theo sau là tên                         của lớp Mã HTML <div class=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS .content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }    Nhiều class Bạn có thể thêm nhiều class cho một phần tử bằng cách sử dụng                         dấu cách để phân tách giữa các tên lớp Mã HTML <div class=\"content green\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content red\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content yellow\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS .content {     color: black;     border: 1px solid black;     margin: 10px;     padding: 20px; }  .green {     background-color: green; }  .red {     background-color: red; }  .yellow {     background-color: yellow; }     Dùng class trong javaScript Bạn có thể sử dụng thuộc tính class để tìm kiếm các phần tử                         trong javaScript Mã JavaScript var x = document.getElementsByClassName(\"content\"); hoặc var x = document.querySelectorAll(\".content\");  Chú ý:  Phương thức getElementsByClassName() trả về một                                 HTMLCollection Phương thức querySelectorAll() trả về một NodeList                            HTMLCollection & NodeList sẽ được tìm hiểu ở bài học về JavaScript"
    },
    {
        "title": "Cú pháp class trong CSS",
        "content": "Cú pháp class trong CSS Cú pháp của class bắt đầu bằng dấu chấm (.) và theo sau là tên                         của lớp Mã HTML <div class=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS .content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }"
    },
    {
        "title": "Nhiều class",
        "content": "Nhiều class Bạn có thể thêm nhiều class cho một phần tử bằng cách sử dụng                         dấu cách để phân tách giữa các tên lớp Mã HTML <div class=\"content green\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content red\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> <div class=\"content yellow\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS .content {     color: black;     border: 1px solid black;     margin: 10px;     padding: 20px; }  .green {     background-color: green; }  .red {     background-color: red; }  .yellow {     background-color: yellow; }"
    },
    {
        "title": "Dùng class trong javaScript",
        "content": "Dùng class trong javaScript Bạn có thể sử dụng thuộc tính class để tìm kiếm các phần tử                         trong javaScript Mã JavaScript var x = document.getElementsByClassName(\"content\"); hoặc var x = document.querySelectorAll(\".content\");  Chú ý:  Phương thức getElementsByClassName() trả về một                                 HTMLCollection Phương thức querySelectorAll() trả về một NodeList                            HTMLCollection & NodeList sẽ được tìm hiểu ở bài học về JavaScript"
    },
    {
        "title": "Thuộc tính id trong HTML",
        "content": "Thuộc tính id trong HTML Thuộc tính id trong HTML được sử dụng để xác định một phần tử duy                     nhất Thuộc tính id thường được sử dụng để tạo CSS cho một phần tử cũng                     như dùng bởi javaScript để tìm kiếm một phần tử duy nhất Mã HTML <div id=\"content\">      <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS #content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }    Chú ý:  Thuộc tính id không thể được sử dụng cho nhiều phần tử                          Tên id không thể bắt đầu bằng số hoặc ký tự đặc biệt và                             có phân biệt giữa chữ hoa và chữ thường Tên id không thể chứa khoảng trắng    Cú pháp id trong CSS Cú pháp của id bắt đầu bằng dấu thăng (#) và theo sau là tên                         của id Mã HTML <div id=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS #content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }    Dùng id trong javaScript Bạn có thể sử dụng thuộc tính id để tìm kiếm một phần tử                         duy nhất trong javaScript Mã JavaScript var x = document.getElementById(\"content\");                     hoặc                     var x = document.querySelector(\"#content\");  Chú ý:                         hai phương thức trên đều trả về một phần tử duy nhất                        Sự khác nhau giữa id và class      id class   Độ ưu tiên Cao Thấp   Sử dụng Chỉ dùng cho một phần tử duy nhất Dùng cho nhiều phần tử   JavaScript document.getElementById() hoặc document.querySelector() document.getElementsByClassName() hoặc document.querySelectorAll()   CSS #id .class      Trick - Đánh dấu với id và liên kết Bạn có thể sử dụng thuộc tính id để đánh dấu một phần tử và                         liên kết đến nó Mã HTML <section id=\"intro\"> ... </section> <a href=\"#intro\">Đến Section intro</a>  Đến Section intro"
    },
    {
        "title": "Cú pháp id trong CSS",
        "content": "Cú pháp id trong CSS Cú pháp của id bắt đầu bằng dấu thăng (#) và theo sau là tên                         của id Mã HTML <div id=\"content\">     <h1>Tiêu đề</h1>     <p>Đoạn văn</p> </div> Mã CSS #content {     background-color: orange;     color: white;     border: 1px solid black;     margin: 10px;     padding: 20px; }"
    },
    {
        "title": "Dùng id trong javaScript",
        "content": "Dùng id trong javaScript Bạn có thể sử dụng thuộc tính id để tìm kiếm một phần tử                         duy nhất trong javaScript Mã JavaScript var x = document.getElementById(\"content\");                     hoặc                     var x = document.querySelector(\"#content\");  Chú ý:                         hai phương thức trên đều trả về một phần tử duy nhất"
    },
    {
        "title": "Trick - Đánh dấu với id và liên kết",
        "content": "Trick - Đánh dấu với id và liên kết Bạn có thể sử dụng thuộc tính id để đánh dấu một phần tử và                         liên kết đến nó Mã HTML <section id=\"intro\"> ... </section> <a href=\"#intro\">Đến Section intro</a>  Đến Section intro"
    },
    {
        "title": "Iframe trong HTML",
        "content": "Iframe trong HTML Phần tử <iframe> được sử dụng để nhúng một trang web khác                     vào trang web hiện tại Mã HTML <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Hg1TRtbZbxM?si=v5SHR9QPBYZl9vLo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe> Kết quả   Chú ý:  Thuộc tính src xác định URL của trang web cần nhúng Thuộc tính width và height                             xác định kích thước của iframe Thuộc tính frameborder xác định viền của iframe Thuộc tính allow xác định các quyền hạn của iframe  accelerometer: cho phép truy cập cảm biến gia tốc                              autoplay: cho phép video tự động phát clipboard-write: cho phép truy cập clipboard encrypted-media: cho phép truy cập media được mã hóa                              gyroscope: cho phép truy cập cảm biến quay picture-in-picture: cho phép chế độ hình ảnh trong                                 hình web-share: cho phép chia sẻ trên web  Thuộc tính referrerpolicy xác định chính sách chuyển                             hướng của iframe  no-referrer: không chuyển hướng no-referrer-when-downgrade: không chuyển hướng khi                                 downgrade origin: chuyển hướng từ cùng một nguồn origin-when-cross-origin: chuyển hướng từ cùng một                                 nguồn hoặc cùng một nguồn khi cross-origin same-origin: chuyển hướng từ cùng một nguồn strict-origin: chuyển hướng từ cùng một nguồn strict-origin-when-cross-origin: chuyển hướng từ cùng                                 một nguồn hoặc cùng một nguồn khi cross-origin unsafe-url: chuyển hướng từ bất kỳ nguồn nào  Thuộc tính allowfullscreen cho phép iframe mở toàn màn                             hình     Iframe - Mục tiêu cho một liên kết Bạn có thể sử dụng thuộc tính target để mở một liên kết trong                         một iframe Mã HTML <iframe name=\"iframe_a\" class=\"example\" src=\"https://www.youtube.com/embed/Hg1TRtbZbxM?si=v5SHR9QPBYZl9vLo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe> <a href=\"./index.html\" target=\"iframe_a\">Mở Trang hiện tại trong iframe</a>  Mở Trang hiện tại trong iframe"
    },
    {
        "title": "Iframe - Mục tiêu cho một liên kết",
        "content": "Iframe - Mục tiêu cho một liên kết Bạn có thể sử dụng thuộc tính target để mở một liên kết trong                         một iframe Mã HTML <iframe name=\"iframe_a\" class=\"example\" src=\"https://www.youtube.com/embed/Hg1TRtbZbxM?si=v5SHR9QPBYZl9vLo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe> <a href=\"./index.html\" target=\"iframe_a\">Mở Trang hiện tại trong iframe</a>  Mở Trang hiện tại trong iframe"
    },
    {
        "title": "JavaScript trong HTML",
        "content": "JavaScript trong HTML JavaScript là một ngôn ngữ lập trình phổ biến được sử dụng để tạo các trang web tương tác JavaScript có thể được sử dụng để thay đổi nội dung của trang web, kiểm tra dữ liệu, thêm sự kiện và                     nhiều hơn nữa Mã HTML <button onclick=\"alert('Hello World!')\">Click me!</button> Kết quả Click me!   Thẻ <script> Thẻ <script> được sử dụng để nhúng mã JavaScript vào                         trang                         web Mã HTML <script> alert('Hello World!'); </script>  Chú ý:  Mã JavaScript có thể được đặt trong thẻ <script>                                 hoặc trong một tệp riêng Thẻ <script> có thể được đặt ở đầu hoặc cuối                                 trang      Thẻ <noscript> Thẻ <noscript> được sử dụng để cung cấp nội dung cho các                         trình duyệt không hỗ trợ JavaScript hoặc đã bị vô hiệu hóa Mã HTML <script> document.write('Hello World!'); </script> <noscript> Your browser does not support JavaScript! </noscript>"
    },
    {
        "title": "Thẻ <script>",
        "content": "Thẻ <script> Thẻ <script> được sử dụng để nhúng mã JavaScript vào                         trang                         web Mã HTML <script> alert('Hello World!'); </script>  Chú ý:  Mã JavaScript có thể được đặt trong thẻ <script>                                 hoặc trong một tệp riêng Thẻ <script> có thể được đặt ở đầu hoặc cuối                                 trang"
    },
    {
        "title": "Thẻ <noscript>",
        "content": "Thẻ <noscript> Thẻ <noscript> được sử dụng để cung cấp nội dung cho các                         trình duyệt không hỗ trợ JavaScript hoặc đã bị vô hiệu hóa Mã HTML <script> document.write('Hello World!'); </script> <noscript> Your browser does not support JavaScript! </noscript>"
    },
    {
        "title": "Thẻ <head> trong HTML",
        "content": "Thẻ <head> trong HTML Thẻ <head> chứa các thông tin về trang web như tiêu đề, tập                     tin CSS, tập tin JavaScript và nhiều hơn nữa Mã HTML <head>     <title>Trang web của tôi</title>     <link rel=\"stylesheet\" href=\"style.css\">     <script src=\"script.js\"></script> </head>  Chú ý:  Thẻ <head> không hiển thị nội dung trên trình duyệt                          Thẻ <head> thường được đặt ở đầu trang    head cho SEO Thẻ <head> chứa các thông tin quan trọng cho SEO như                         tiêu                         đề, mô tả, từ khóa và nhiều hơn nữa    Thẻ <link> Thẻ <link> được sử dụng để liên kết một tập tin CSS với                         trang web Mã HTML <link rel=\"stylesheet\" href=\"style.css\">  Chú ý:  Thuộc tính rel xác định mối quan hệ giữa trang web và                                 tập tin được liên kết Thuộc tính href xác định URL của tập tin CSS      Thẻ <meta> Thẻ <meta> được sử dụng để cung cấp thông tin về trang                         web Mã HTML <meta charset=\"UTF-8\">  Chú ý:  Thuộc tính charset xác định bảng mã của trang web                                 <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">  Chú ý:  Thuộc tính name xác định loại thông tin Thuộc tính content xác định giá trị của thông tin                                 Một số cặp name/content trong thẻ meta  name=\"description\": mô tả trang web name=\"author\": tác giả trang web name=\"viewport\": hiển thị trang web trên thiết bị di                                 động                              name=\"robots\": chỉ định cách trình duyệt tìm kiếm xử                                 lý                                 trang web    <meta http-equiv=\"refresh\" content=\"30;>                          làm mới trang mỗi 30 giây                         Thẻ <base> Thẻ <base> được sử dụng để xác định URL cơ sở cho tất cả                         các URL tương đối trong trang web Mã HTML <base href=\"https://www.example.com/\">  Chú ý:  Thuộc tính href xác định URL cơ sở"
    },
    {
        "title": "Thẻ <link>",
        "content": "Thẻ <link> Thẻ <link> được sử dụng để liên kết một tập tin CSS với                         trang web Mã HTML <link rel=\"stylesheet\" href=\"style.css\">  Chú ý:  Thuộc tính rel xác định mối quan hệ giữa trang web và                                 tập tin được liên kết Thuộc tính href xác định URL của tập tin CSS"
    },
    {
        "title": "Thẻ <meta>",
        "content": "Thẻ <meta> Thẻ <meta> được sử dụng để cung cấp thông tin về trang                         web Mã HTML <meta charset=\"UTF-8\">  Chú ý:  Thuộc tính charset xác định bảng mã của trang web                                 <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">  Chú ý:  Thuộc tính name xác định loại thông tin Thuộc tính content xác định giá trị của thông tin                                 Một số cặp name/content trong thẻ meta  name=\"description\": mô tả trang web name=\"author\": tác giả trang web name=\"viewport\": hiển thị trang web trên thiết bị di                                 động                              name=\"robots\": chỉ định cách trình duyệt tìm kiếm xử                                 lý                                 trang web    <meta http-equiv=\"refresh\" content=\"30;>                          làm mới trang mỗi 30 giây"
    },
    {
        "title": "Thẻ <base>",
        "content": "Thẻ <base> Thẻ <base> được sử dụng để xác định URL cơ sở cho tất cả                         các URL tương đối trong trang web Mã HTML <base href=\"https://www.example.com/\">  Chú ý:  Thuộc tính href xác định URL cơ sở"
    },
    {
        "title": "Layout trong HTML",
        "content": "Layout trong HTML Layout trong HTML là cách sắp xếp các phần tử trên trang web Có nhiều cách để tạo layout trong HTML như sử dụng bố cục dạng khối, bố cục dạng inline, bố cục dạng                     grid và nhiều hơn nữa   Các phần tử layout trong HTML Có một số phần tử layout trong HTML giúp tạo layout cho trang web       <header>: định nghĩa phần đầu trang web                                  <nav>: định nghĩa phần điều hướng trang web                                  <section>: định nghĩa một phần của trang                                     web <article>: định nghĩa một bài viết hoặc bài                                     báo                                  <aside>: định nghĩa một phần bên cạnh nội                                     dung                                     chính                                  <footer>: định nghĩa phần cuối trang web                                   <details> : định nghĩa một chi tiết bổ sung                                   <summary> : định nghĩa một tổng kết cho chi                                     tiết                                                                 Các kỹ thuật layout trong HTML                      Có nhiều kỹ thuật layout trong HTML giúp tạo layout cho trang web  CSS Framework (Bootstrap, Tailwind, Materialize, Bulma, Skeleton...) Thuộc tính Float của CSS Thuộc tính Flexbox của CSS Thuộc tính Grid của CSS                           Những kĩ thuật trên sẽ được tìm hiểu ở phần sau"
    },
    {
        "title": "Các phần tử layout trong HTML",
        "content": "Các phần tử layout trong HTML Có một số phần tử layout trong HTML giúp tạo layout cho trang web       <header>: định nghĩa phần đầu trang web                                  <nav>: định nghĩa phần điều hướng trang web                                  <section>: định nghĩa một phần của trang                                     web <article>: định nghĩa một bài viết hoặc bài                                     báo                                  <aside>: định nghĩa một phần bên cạnh nội                                     dung                                     chính                                  <footer>: định nghĩa phần cuối trang web                                   <details> : định nghĩa một chi tiết bổ sung                                   <summary> : định nghĩa một tổng kết cho chi                                     tiết"
    },
    {
        "title": "Các kỹ thuật layout trong HTML",
        "content": "Các kỹ thuật layout trong HTML                      Có nhiều kỹ thuật layout trong HTML giúp tạo layout cho trang web  CSS Framework (Bootstrap, Tailwind, Materialize, Bulma, Skeleton...) Thuộc tính Float của CSS Thuộc tính Flexbox của CSS Thuộc tính Grid của CSS                           Những kĩ thuật trên sẽ được tìm hiểu ở phần sau"
    },
    {
        "title": "Các phần tử mã máy tính trong HTML",
        "content": "Các phần tử mã máy tính trong HTML Các phần tử mã máy tính trong HTML được sử dụng để hiển thị mã máy tính hoặc mã nguồn trên trang web                  Có một số phần tử mã máy tính trong HTML như <code>, <pre>, <var>, <samp> và nhiều hơn nữa   Thẻ <code> Thẻ <code> được sử dụng để hiển thị mã máy tính hoặc mã                         nguồn trên trang web Mã HTML <code>var x = 5;</code> Kết quả var x = 5;    Thẻ <pre> Thẻ <pre> được sử dụng để hiển thị mã máy tính hoặc mã                         nguồn với định dạng ban đầu Mã HTML <pre>     var x = 5;     var y = 6;     var z = x + y; </pre> Kết quả      var x = 5;     var y = 6;     var z = x + y;         Thẻ <kbd> Thẻ <kbd> được sử dụng để hiển thị phím hoặc phím tắt                         trên                         trang web Mã HTML <kbd>Ctrl + C</kbd> Kết quả Ctrl + C    Thẻ <samp> Thẻ <samp> được sử dụng để hiển thị kết quả của một mã                         máy tính hoặc mã nguồn trên trang web Mã HTML <samp>Hello World!</samp> Kết quả Hello World!    Thẻ <var> Thẻ <var> được sử dụng để hiển thị một biến hoặc một                         tham số trên trang web Mã HTML <var>x</var> = <var>5</var>; Kết quả x = 5;"
    },
    {
        "title": "Thẻ <code>",
        "content": "Thẻ <code> Thẻ <code> được sử dụng để hiển thị mã máy tính hoặc mã                         nguồn trên trang web Mã HTML <code>var x = 5;</code> Kết quả var x = 5;"
    },
    {
        "title": "Thẻ <pre>",
        "content": "Thẻ <pre> Thẻ <pre> được sử dụng để hiển thị mã máy tính hoặc mã                         nguồn với định dạng ban đầu Mã HTML <pre>     var x = 5;     var y = 6;     var z = x + y; </pre> Kết quả      var x = 5;     var y = 6;     var z = x + y;"
    },
    {
        "title": "Thẻ <kbd>",
        "content": "Thẻ <kbd> Thẻ <kbd> được sử dụng để hiển thị phím hoặc phím tắt                         trên                         trang web Mã HTML <kbd>Ctrl + C</kbd> Kết quả Ctrl + C"
    },
    {
        "title": "Thẻ <samp>",
        "content": "Thẻ <samp> Thẻ <samp> được sử dụng để hiển thị kết quả của một mã                         máy tính hoặc mã nguồn trên trang web Mã HTML <samp>Hello World!</samp> Kết quả Hello World!"
    },
    {
        "title": "Thẻ <var>",
        "content": "Thẻ <var> Thẻ <var> được sử dụng để hiển thị một biến hoặc một                         tham số trên trang web Mã HTML <var>x</var> = <var>5</var>; Kết quả x = 5;"
    },
    {
        "title": "Các phần tử ngữ nghĩa trong HTML",
        "content": "Các phần tử ngữ nghĩa trong HTML Phần tử ngữ nghĩa mô tả rõ ràng ý nghĩa của nó đối với cả trình duyệt và nhà phát triển. Một số phần tử phi ngữ nghĩa như <div> và <span> không mô tả ý nghĩa của những nội dung nằm bên trong                     chúng                       Các phần tử ngữ nghĩa trong HTML như <header>, <footer>, <article>,                     <section>, <nav>,                     <aside> giúp mô tả ý nghĩa của nội dung bên trong chúng                  Trong HTML bạn có thể dùng các phần tử sau để định nghĩa các phần khác nhau của trang web  <article> <aside> <details> <figcaption> <figure> <footer> <header> <main> <mark> <nav> <section> <summary> <time>    Phần tử <section> Phần tử <section> định nghĩa một phần của trang web Phần tử <section> có thể dùng để chứa những nội dung như                         sau:  Chương Đề mục Phần Thảo luận ...  Mã HTML <section>     <h1>HTML5</h1>     <p>HTML5 là một ngôn ngữ cấu trúc và trình bày nội dung cho World Wide Web và sẽ là công nghệ cốt lõi của Internet trong tương lai không xa, được đề xuất đầu tiên bởi Opera Software. </p> </section>  <section>     <h1>CSS</h1>     <p>Trong tin học, các tập tin định kiểu theo tầng – dịch từ tiếng Anh là Cascading Style Sheets (CSS) – được dùng để miêu tả cách trình bày các tài liệu viết bằng ngôn ngữ HTML và XHTML.</p> </section>     Phần tử <article> Phần tử <article> định nghĩa một bài viết hoặc bài báo                      Phần tử <article> có thể dùng để chứa những nội dung như                         sau:  Bài viết Bài báo Tin tức Comment Nội dung quảng cáo ...  Một <article> cũng có thể có các element <header>, <footer> và <section>, vì vậy bạn thực sự có thể sử dụng nó để nhúng                         một đoạn tài liệu đầy đủ với tất cả cấu trúc mà nó cần trong một trang khác. Mã HTML <article>     <header>         <h1>Bài viết 1</h1>     </header>     <section>         <header>             <h2>Luận điểm 1</h2>         </header>         <p>Luận cứ cho luận điểm 1</p>     </section>     <section>         <header>             <h2>Luận điểm 2</h2>         </header>         <p>Luận cứ cho luận điểm 2</p>     </section>     <footer>         <p>Người viết: ...</p>     </footer> </article>     Phần tử <header> Phần tử <header> định nghĩa phần đầu trang web Phần tử <header> có thể chứa các phần tử như <h1>, <h2>,                         <h3>, <h4>,                         <h5>, <h6>,                         <p>, <img>,                         <nav>, <form>                         và nhiều                         hơn nữa                      Phần tử <header> có thể dùng để chứa những nội dung như                         sau:  Logo hoặc icon Thông tin tác giả Các tiêu đề ...  Mã HTML <header>     <h1>Trang chủ</h1>     <nav>         <a href=\"#\">Trang chủ</a>         <a href=\"#\">Giới thiệu</a>         <a href=\"#\">Liên hệ</a>     </nav> </header>     Phần tử <footer> Phần tử <footer> định nghĩa phần cuối cùng của trang web                      Phần tử <footer> có thể dùng để chứa những nội dung như                         sau:  Thông tin liên hệ Thông tin bản quyền Sơ đồ trang web Liên kết quay lại đầu trang Các tài liệu liên quan ...  Mã HTML <footer>     <p>Trang web của tôi</p>     <p>Email:         <a href=\"mailto:namnvhe180863@fpt.edu.vn\">namnvhe180863@fpt.edu.vn</a>     </p> </footer>     Phần tử <nav> Phần tử <nav> định nghĩa phần điều hướng của trang web                      Phần tử <nav> có thể dùng để chứa các liên kết đến các                         trang web khác hoặc các phần của trang web hiện tại Mã HTML <nav>     <a href=\"#\">Trang chủ</a>     <a href=\"#\">Giới thiệu</a>     <a href=\"#\">Liên hệ</a> </nav>     Phần tử <aside> Phần tử <aside> định nghĩa một phần nội dung khác nằm                         bên cạnh nội dung chính (thanh bên)                      Phần tử <aside> có thể dùng để chứa các nội dung như                         quảng cáo, bài viết liên quan,... Mã HTML <aside>     <h2>Quảng cáo</h2>     <p>Quảng cáo của bạn ở đây</p> </aside>     Phần tử <figure> và <figcaption> Phần tử <figure> định nghĩa nội dung đồ họa như hình                         ảnh,                         biểu đồ, video,... Phần tử <figcaption> định nghĩa chú thích cho phần tử                         <figure>  Mã HTML <figure>     <img src=\"hinh-anh.png\" alt=\"Hình ảnh mèo dễ thương\">     <figcaption>Hình ảnh mèo dễ thương</figcaption> </figure>     Phần tử <details> và <summary> Phần tử <details> định nghĩa một chi tiết bổ sung Phần tử <summary> định nghĩa một tổng kết cho chi tiết                      Mã HTML <details>     <summary>Click để xem chi tiết</summary>     <p>Nội dung chi tiết ở đây</p>     <ul>         <li>Mục 1</li>         <li>Mục 2</li>         <li>Mục 3</li>     </ul> </details>     Phần tử <main> Phần tử <main> định nghĩa nội dung chính của trang web                      Phần tử <main> không được chứa trong phần tử <header>, <footer>,                         <article>, <aside>,                         <nav> hoặc <section>  Mã HTML <main>     <header>                    <h1>Trang chủ</h1>         <p>Nội dung trang chủ ở đây</p>          <nav>             <a href=\"#\">Trang chủ</a>             <a href=\"#\">Giới thiệu</a>             <a href=\"#\">Liên hệ</a>         </nav>     </header>      <section>         <h2>Bài viết 1</h2>         <p>Nội dung bài viết 1</p>     </section>      <section>         <h2>Bài viết 2</h2>         <p>Nội dung bài viết 2</p>     </section>      <footer>         <p>Người viết: ...</p>     </footer>  </main>     Phần tử <mark> Phần tử <mark> định nghĩa một phần của nội dung cần được                         đánh dấu Mã HTML <p>Đây là một đoạn văn bản <mark>được đánh dấu</mark></p>     Phần tử <time> Phần tử <time> định nghĩa một thời gian hoặc ngày tháng                      Mã HTML <p>Ngày sinh của tôi là <time datetime=\"2004-09-14\">14 tháng 9, 2004</time></p>   Chú ý:  Thuộc tính datetime xác định ngày tháng Phần tử <time> không hiển thị bất cứ điều gì                                 đặc biệt trong trình duyệt.     Chú ý: Hạn chế việc sử dụng phần tử không ngữ nghĩa như <div> và <span>                     trong trường hợp có thể sử dụng các phần tử ngữ nghĩa khác.                     Sử dụng các phần tử ngữ nghĩa giúp trình duyệt hiểu rõ hơn về cấu trúc của trang web và cải thiện                     SEO."
    },
    {
        "title": "Phần tử <section>",
        "content": "Phần tử <section> Phần tử <section> định nghĩa một phần của trang web Phần tử <section> có thể dùng để chứa những nội dung như                         sau:  Chương Đề mục Phần Thảo luận ...  Mã HTML <section>     <h1>HTML5</h1>     <p>HTML5 là một ngôn ngữ cấu trúc và trình bày nội dung cho World Wide Web và sẽ là công nghệ cốt lõi của Internet trong tương lai không xa, được đề xuất đầu tiên bởi Opera Software. </p> </section>  <section>     <h1>CSS</h1>     <p>Trong tin học, các tập tin định kiểu theo tầng – dịch từ tiếng Anh là Cascading Style Sheets (CSS) – được dùng để miêu tả cách trình bày các tài liệu viết bằng ngôn ngữ HTML và XHTML.</p> </section>"
    },
    {
        "title": "Phần tử <article>",
        "content": "Phần tử <article> Phần tử <article> định nghĩa một bài viết hoặc bài báo                      Phần tử <article> có thể dùng để chứa những nội dung như                         sau:  Bài viết Bài báo Tin tức Comment Nội dung quảng cáo ...  Một <article> cũng có thể có các element <header>, <footer> và <section>, vì vậy bạn thực sự có thể sử dụng nó để nhúng                         một đoạn tài liệu đầy đủ với tất cả cấu trúc mà nó cần trong một trang khác. Mã HTML <article>     <header>         <h1>Bài viết 1</h1>     </header>     <section>         <header>             <h2>Luận điểm 1</h2>         </header>         <p>Luận cứ cho luận điểm 1</p>     </section>     <section>         <header>             <h2>Luận điểm 2</h2>         </header>         <p>Luận cứ cho luận điểm 2</p>     </section>     <footer>         <p>Người viết: ...</p>     </footer> </article>"
    },
    {
        "title": "Phần tử <header>",
        "content": "Phần tử <header> Phần tử <header> định nghĩa phần đầu trang web Phần tử <header> có thể chứa các phần tử như <h1>, <h2>,                         <h3>, <h4>,                         <h5>, <h6>,                         <p>, <img>,                         <nav>, <form>                         và nhiều                         hơn nữa                      Phần tử <header> có thể dùng để chứa những nội dung như                         sau:  Logo hoặc icon Thông tin tác giả Các tiêu đề ...  Mã HTML <header>     <h1>Trang chủ</h1>     <nav>         <a href=\"#\">Trang chủ</a>         <a href=\"#\">Giới thiệu</a>         <a href=\"#\">Liên hệ</a>     </nav> </header>"
    },
    {
        "title": "Phần tử <footer>",
        "content": "Phần tử <footer> Phần tử <footer> định nghĩa phần cuối cùng của trang web                      Phần tử <footer> có thể dùng để chứa những nội dung như                         sau:  Thông tin liên hệ Thông tin bản quyền Sơ đồ trang web Liên kết quay lại đầu trang Các tài liệu liên quan ...  Mã HTML <footer>     <p>Trang web của tôi</p>     <p>Email:         <a href=\"mailto:namnvhe180863@fpt.edu.vn\">namnvhe180863@fpt.edu.vn</a>     </p> </footer>"
    },
    {
        "title": "Phần tử <nav>",
        "content": "Phần tử <nav> Phần tử <nav> định nghĩa phần điều hướng của trang web                      Phần tử <nav> có thể dùng để chứa các liên kết đến các                         trang web khác hoặc các phần của trang web hiện tại Mã HTML <nav>     <a href=\"#\">Trang chủ</a>     <a href=\"#\">Giới thiệu</a>     <a href=\"#\">Liên hệ</a> </nav>"
    },
    {
        "title": "Phần tử <aside>",
        "content": "Phần tử <aside> Phần tử <aside> định nghĩa một phần nội dung khác nằm                         bên cạnh nội dung chính (thanh bên)                      Phần tử <aside> có thể dùng để chứa các nội dung như                         quảng cáo, bài viết liên quan,... Mã HTML <aside>     <h2>Quảng cáo</h2>     <p>Quảng cáo của bạn ở đây</p> </aside>"
    },
    {
        "title": "Phần tử <figure> và <figcaption>",
        "content": "Phần tử <figure> và <figcaption> Phần tử <figure> định nghĩa nội dung đồ họa như hình                         ảnh,                         biểu đồ, video,... Phần tử <figcaption> định nghĩa chú thích cho phần tử                         <figure>  Mã HTML <figure>     <img src=\"hinh-anh.png\" alt=\"Hình ảnh mèo dễ thương\">     <figcaption>Hình ảnh mèo dễ thương</figcaption> </figure>"
    },
    {
        "title": "Phần tử <details> và <summary>",
        "content": "Phần tử <details> và <summary> Phần tử <details> định nghĩa một chi tiết bổ sung Phần tử <summary> định nghĩa một tổng kết cho chi tiết                      Mã HTML <details>     <summary>Click để xem chi tiết</summary>     <p>Nội dung chi tiết ở đây</p>     <ul>         <li>Mục 1</li>         <li>Mục 2</li>         <li>Mục 3</li>     </ul> </details>"
    },
    {
        "title": "Phần tử <main>",
        "content": "Phần tử <main> Phần tử <main> định nghĩa nội dung chính của trang web                      Phần tử <main> không được chứa trong phần tử <header>, <footer>,                         <article>, <aside>,                         <nav> hoặc <section>  Mã HTML <main>     <header>                    <h1>Trang chủ</h1>         <p>Nội dung trang chủ ở đây</p>          <nav>             <a href=\"#\">Trang chủ</a>             <a href=\"#\">Giới thiệu</a>             <a href=\"#\">Liên hệ</a>         </nav>     </header>      <section>         <h2>Bài viết 1</h2>         <p>Nội dung bài viết 1</p>     </section>      <section>         <h2>Bài viết 2</h2>         <p>Nội dung bài viết 2</p>     </section>      <footer>         <p>Người viết: ...</p>     </footer>  </main>"
    },
    {
        "title": "Phần tử <mark>",
        "content": "Phần tử <mark> Phần tử <mark> định nghĩa một phần của nội dung cần được                         đánh dấu Mã HTML <p>Đây là một đoạn văn bản <mark>được đánh dấu</mark></p>"
    },
    {
        "title": "Phần tử <time>",
        "content": "Phần tử <time> Phần tử <time> định nghĩa một thời gian hoặc ngày tháng                      Mã HTML <p>Ngày sinh của tôi là <time datetime=\"2004-09-14\">14 tháng 9, 2004</time></p>   Chú ý:  Thuộc tính datetime xác định ngày tháng Phần tử <time> không hiển thị bất cứ điều gì                                 đặc biệt trong trình duyệt."
    },
    {
        "title": "Hướng dẫn viết mã HTML",
        "content": "Hướng dẫn viết mã HTML Viết mã HTML theo một cách chuẩn giúp mã nguồn trở nên dễ đọc và dễ bảo trì Dưới đây là một số quy tắc viết mã HTML  Luôn luôn khai báo kiểu tài liệu Luôn luôn khai báo kiểu tài liệu HTML ở đầu trang web Mã HTML <!DOCTYPE html>   Dùng chữ thường để viết tên các thẻ HTML HTML cho phép trộn chữ hoa và chữ thường trong tên thành phần. Tuy nhiên, nên viết tên các phần tử bằng chữ viết thường vì những lý do sau:  Trộn tên chữ hoa và chữ thường làm mã nguồn trở lên xấu và khó đọc Các nhà phát triển khác thường sử dụng tên chữ thường Chữ thường trông sạch sẽ hơn Chữ thường dễ viết hơn  Cách viết tốt hơn <body>     <h1>Tiêu đề trang web</h1>     <p>Nội dung trang web</p> </body> Cách viết không tốt <BODY>     <H1>Tiêu đề trang web</H1>     <P>Nội dung trang web</P> </BODY>   Đóng các tất cả các phần tử HTML Trong HTML, bạn không cần phải đóng tất cả các phần tử (ví dụ phần tử <p> ). Tuy nhiên, việc đóng tất cả các phần tử giúp mã nguồn trở nên dễ đọc và dễ bảo trì Cách viết tốt hơn <p>Nội dung</p> Cách viết không tốt <p>Nội dung   Luôn luôn đặt giá trị thuộc tính trong dấu nháy kép HTML cho phép các giá trị thuộc tính không có dấu nháy kép. Tuy nhiên, nên đặt giá trị trong dấu nháy kép vì những lý do sau  Các nhà phát triển thường đặt giá trị thuộc tính trong dấu nháy kép Giá trị trong dấu nháy kép dễ đọc hơn Bạn PHẢI sử dụng dấu ngoặc kép nếu giá trị chứa dấu cách  Cách viết tốt hơn <div class=\"c1\"> Cách viết không tốt <div class=c1> Cách viết cực kì tệ <div class=c1 c2>   Luôn thêm thuộc tính alt, chiều rộng và chiều cao cho hình ảnh Luôn đặt thuộc tính alt cho hình ảnh. Thuộc tính này rất quan                         trọng nếu hình ảnh vì lý do nào đó không thể hiển thị được. Ngoài ra, hãy luôn xác định width và height của hình ảnh. Điều này làm giảm hiện tượng nhấp nháy vì                         trình duyệt có thể dành dung lượng cho hình ảnh trước khi tải. Cách viết tốt <img src=\"hinh-anh.jpg\" alt=\"Hình ảnh\" width=\"500\" height=\"600\"> Cách viết không tốt <img src=\"hinh-anh.jpg\">   Dấu cách và dấu bằng HTML cho phép khoảng trắng xung quanh dấu bằng. Nhưng dấu cách ít hơn sẽ dễ đọc hơn và nhóm các                         thực thể lại với nhau tốt hơn. Cách viết tốt <img src=\"hinh-anh.jpg\" alt=\"Hình ảnh\" width=\"500\" height=\"600\"> Cách viết không tốt <img src = \"hinh-anh.jpg\" alt = \"Hình ảnh\" width = \"500\" height = \"600\">   Tránh viết những dòng mã dài Khi sử dụng trình soạn thảo HTML, việc cuộn sang phải và trái để đọc mã HTML KHÔNG thuận                         tiện. Viết mã HTML ngắn gọn giúp mã nguồn trở nên dễ đọc và dễ bảo trì   Dòng trống và thụt lề Thêm dòng trống và thụt lề giúp mã nguồn trở nên dễ đọc hơn Cách viết tốt <div>     <h1>Tiêu đề</h1>     <p>Nội dung</p> </div> Cách viết không tốt <div> <h1>Tiêu đề</h1><p>Nội dung</p> </div>   Không bỏ qua thẻ <title> Thẻ <title> định nghĩa tiêu đề của trang web Thẻ <title> không hiển thị trên trang web, nhưng nó xuất                         hiện trên thanh tiêu đề của trình duyệt Thẻ <title> cũng ảnh hưởng lớn trong SEO (đã từng đề cập                         trước đó)   Không bỏ qua thẻ <html> và <body> Trình duyệt vẫn có thể hiểu và hiển thị một trang mà không có 2 thẻ trên Tuy nhiên, việc sử dụng 2 thẻ này giúp mã nguồn trở nên dễ đọc hơn Bỏ qua thẻ <body> có thể gây lỗi ở một vài trình duyệt                         cũ hơn Bỏ qua thẻ <html> và <body> có thể làm hỏng DOM và XML                          DOM: Document Object Model (Mô hình đối tượng tài liệu)                                                  XML: Extensible Markup Language (Ngôn ngữ đánh dấu mở rộng)                        Không bỏ qua thẻ <head> Thẻ <head> chứa thông tin về trang web như tiêu đề, tập                         tin CSS, tập tin JavaScript,... Nếu không có thẻ <head> trình duyệt sẽ tự động thêm theo                         mặc định   Đóng các phần tử HTML không nội dung Trong HTML bạn có thể đóng hoặc không đóng tại các thẻ không nội dung (điều này là tùy chọn) Không đóng <img src=\"hinh-anh.jpg\"> Đóng <img src=\"hinh-anh.jpg\" />  Chú ý: Nếu bạn muốn các phần mềm XML/XHTML xử lý mã nguồn của bạn, hãy đóng tất cả các                         phần tử HTML (bao gồm các phần tử không nội dung) vì điều này là bắt buộc.                         Thêm thuộc tính lang Thuộc tính lang xác định ngôn ngữ của trang web Thuộc tính lang giúp trình duyệt hiểu được ngôn ngữ của trang                         web và dịch nội dung trang web   Thêm thuộc tính charset Thuộc tính charset xác định bảng mã ký tự của trang web Thuộc tính charset giúp trình duyệt hiểu được bảng mã ký tự                         của trang web và hiển thị nội dung đúng cách   Thiết lập viewport Thẻ <meta> với thuộc tính name=\"viewport\" giúp trang web hiển thị đúng trên các thiết bị                         di động Mã HTML <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">  width=device-width - Thiết lập chiều rộng của trang web bằng                         chiều rộng của thiết bị                          initial-scale=1.0 - Thiết lập tỷ lệ phóng to ban đầu của                         trang web                        Comment trong HTML Comment trong HTML giúp bạn giữ lại thông tin cho bản thân hoặc cho những người khác Comment không hiển thị trên trình duyệt Ghi chú một dòng <!-- Đây là một comment --> Ghi chú nhiều dòng <!--     Đây là một comment     Nhiều dòng -->   Đặt tên file là chữ thường Đặt tên file là chữ thường giúp tránh nhầm lẫn khi di chuyển file giữa các hệ thống hoặc trên các                         hệ điều hành khác nhau                          Một số máy chủ web (Apache, Unix) phân biệt chữ hoa chữ thường đối với tên tệp                                                  Ví dụ: file.html và File.html là 2 tệp khác nhau                                                  Một số máy chủ khác (Microsoft, IIS), tên tệp không phân biệt chữ hoa chữ thường                                                  Ví dụ: file.html và File.html là cùng một tệp                        Phần mở rộng file Phần mở rộng file giúp trình duyệt hiểu được loại file và cách xử lý file Phần mở rộng file cũng giúp người dùng biết được nội dung của file Tệp HTML có phần mở rộng là .html (.htm cũng được chấp nhận) Tệp CSS có phần mở rộng là .css Tệp JavaScript có phần mở rộng là .js   Tên tệp mặc định Trình duyệt web sẽ tìm kiếm các tệp mặc định khi truy cập trang web Tệp mặc định của trang web là index.html hoặc index.htm Trình duyệt sẽ tìm kiếm các tệp mặc định theo thứ tự sau:  index.html index.htm default.html default.htm"
    },
    {
        "title": "Luôn luôn khai báo kiểu tài liệu",
        "content": "Luôn luôn khai báo kiểu tài liệu Luôn luôn khai báo kiểu tài liệu HTML ở đầu trang web Mã HTML <!DOCTYPE html>"
    },
    {
        "title": "Dùng chữ thường để viết tên các thẻ HTML",
        "content": "Dùng chữ thường để viết tên các thẻ HTML HTML cho phép trộn chữ hoa và chữ thường trong tên thành phần. Tuy nhiên, nên viết tên các phần tử bằng chữ viết thường vì những lý do sau:  Trộn tên chữ hoa và chữ thường làm mã nguồn trở lên xấu và khó đọc Các nhà phát triển khác thường sử dụng tên chữ thường Chữ thường trông sạch sẽ hơn Chữ thường dễ viết hơn  Cách viết tốt hơn <body>     <h1>Tiêu đề trang web</h1>     <p>Nội dung trang web</p> </body> Cách viết không tốt <BODY>     <H1>Tiêu đề trang web</H1>     <P>Nội dung trang web</P> </BODY>"
    },
    {
        "title": "Đóng các tất cả các phần tử HTML",
        "content": "Đóng các tất cả các phần tử HTML Trong HTML, bạn không cần phải đóng tất cả các phần tử (ví dụ phần tử <p> ). Tuy nhiên, việc đóng tất cả các phần tử giúp mã nguồn trở nên dễ đọc và dễ bảo trì Cách viết tốt hơn <p>Nội dung</p> Cách viết không tốt <p>Nội dung"
    },
    {
        "title": "Luôn luôn đặt giá trị thuộc tính trong dấu nháy kép",
        "content": "Luôn luôn đặt giá trị thuộc tính trong dấu nháy kép HTML cho phép các giá trị thuộc tính không có dấu nháy kép. Tuy nhiên, nên đặt giá trị trong dấu nháy kép vì những lý do sau  Các nhà phát triển thường đặt giá trị thuộc tính trong dấu nháy kép Giá trị trong dấu nháy kép dễ đọc hơn Bạn PHẢI sử dụng dấu ngoặc kép nếu giá trị chứa dấu cách  Cách viết tốt hơn <div class=\"c1\"> Cách viết không tốt <div class=c1> Cách viết cực kì tệ <div class=c1 c2>"
    },
    {
        "title": "Luôn thêm thuộc tính alt, chiều rộng và chiều cao cho hình ảnh",
        "content": "Luôn thêm thuộc tính alt, chiều rộng và chiều cao cho hình ảnh Luôn đặt thuộc tính alt cho hình ảnh. Thuộc tính này rất quan                         trọng nếu hình ảnh vì lý do nào đó không thể hiển thị được. Ngoài ra, hãy luôn xác định width và height của hình ảnh. Điều này làm giảm hiện tượng nhấp nháy vì                         trình duyệt có thể dành dung lượng cho hình ảnh trước khi tải. Cách viết tốt <img src=\"hinh-anh.jpg\" alt=\"Hình ảnh\" width=\"500\" height=\"600\"> Cách viết không tốt <img src=\"hinh-anh.jpg\">"
    },
    {
        "title": "Dấu cách và dấu bằng",
        "content": "Dấu cách và dấu bằng HTML cho phép khoảng trắng xung quanh dấu bằng. Nhưng dấu cách ít hơn sẽ dễ đọc hơn và nhóm các                         thực thể lại với nhau tốt hơn. Cách viết tốt <img src=\"hinh-anh.jpg\" alt=\"Hình ảnh\" width=\"500\" height=\"600\"> Cách viết không tốt <img src = \"hinh-anh.jpg\" alt = \"Hình ảnh\" width = \"500\" height = \"600\">"
    },
    {
        "title": "Tránh viết những dòng mã dài",
        "content": "Tránh viết những dòng mã dài Khi sử dụng trình soạn thảo HTML, việc cuộn sang phải và trái để đọc mã HTML KHÔNG thuận                         tiện. Viết mã HTML ngắn gọn giúp mã nguồn trở nên dễ đọc và dễ bảo trì"
    },
    {
        "title": "Dòng trống và thụt lề",
        "content": "Dòng trống và thụt lề Thêm dòng trống và thụt lề giúp mã nguồn trở nên dễ đọc hơn Cách viết tốt <div>     <h1>Tiêu đề</h1>     <p>Nội dung</p> </div> Cách viết không tốt <div> <h1>Tiêu đề</h1><p>Nội dung</p> </div>"
    },
    {
        "title": "Không bỏ qua thẻ <title>",
        "content": "Không bỏ qua thẻ <title> Thẻ <title> định nghĩa tiêu đề của trang web Thẻ <title> không hiển thị trên trang web, nhưng nó xuất                         hiện trên thanh tiêu đề của trình duyệt Thẻ <title> cũng ảnh hưởng lớn trong SEO (đã từng đề cập                         trước đó)"
    },
    {
        "title": "Không bỏ qua thẻ <html> và <body>",
        "content": "Không bỏ qua thẻ <html> và <body> Trình duyệt vẫn có thể hiểu và hiển thị một trang mà không có 2 thẻ trên Tuy nhiên, việc sử dụng 2 thẻ này giúp mã nguồn trở nên dễ đọc hơn Bỏ qua thẻ <body> có thể gây lỗi ở một vài trình duyệt                         cũ hơn Bỏ qua thẻ <html> và <body> có thể làm hỏng DOM và XML                          DOM: Document Object Model (Mô hình đối tượng tài liệu)                                                  XML: Extensible Markup Language (Ngôn ngữ đánh dấu mở rộng)"
    },
    {
        "title": "Không bỏ qua thẻ <head>",
        "content": "Không bỏ qua thẻ <head> Thẻ <head> chứa thông tin về trang web như tiêu đề, tập                         tin CSS, tập tin JavaScript,... Nếu không có thẻ <head> trình duyệt sẽ tự động thêm theo                         mặc định"
    },
    {
        "title": "Đóng các phần tử HTML không nội dung",
        "content": "Đóng các phần tử HTML không nội dung Trong HTML bạn có thể đóng hoặc không đóng tại các thẻ không nội dung (điều này là tùy chọn) Không đóng <img src=\"hinh-anh.jpg\"> Đóng <img src=\"hinh-anh.jpg\" />  Chú ý: Nếu bạn muốn các phần mềm XML/XHTML xử lý mã nguồn của bạn, hãy đóng tất cả các                         phần tử HTML (bao gồm các phần tử không nội dung) vì điều này là bắt buộc."
    },
    {
        "title": "Thêm thuộc tính lang",
        "content": "Thêm thuộc tính lang Thuộc tính lang xác định ngôn ngữ của trang web Thuộc tính lang giúp trình duyệt hiểu được ngôn ngữ của trang                         web và dịch nội dung trang web"
    },
    {
        "title": "Thêm thuộc tính charset",
        "content": "Thêm thuộc tính charset Thuộc tính charset xác định bảng mã ký tự của trang web Thuộc tính charset giúp trình duyệt hiểu được bảng mã ký tự                         của trang web và hiển thị nội dung đúng cách"
    },
    {
        "title": "Thiết lập viewport",
        "content": "Thiết lập viewport Thẻ <meta> với thuộc tính name=\"viewport\" giúp trang web hiển thị đúng trên các thiết bị                         di động Mã HTML <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">  width=device-width - Thiết lập chiều rộng của trang web bằng                         chiều rộng của thiết bị                          initial-scale=1.0 - Thiết lập tỷ lệ phóng to ban đầu của                         trang web"
    },
    {
        "title": "Comment trong HTML",
        "content": "Comment trong HTML Comment trong HTML giúp bạn giữ lại thông tin cho bản thân hoặc cho những người khác Comment không hiển thị trên trình duyệt Ghi chú một dòng <!-- Đây là một comment --> Ghi chú nhiều dòng <!--     Đây là một comment     Nhiều dòng -->"
    },
    {
        "title": "Đặt tên file là chữ thường",
        "content": "Đặt tên file là chữ thường Đặt tên file là chữ thường giúp tránh nhầm lẫn khi di chuyển file giữa các hệ thống hoặc trên các                         hệ điều hành khác nhau                          Một số máy chủ web (Apache, Unix) phân biệt chữ hoa chữ thường đối với tên tệp                                                  Ví dụ: file.html và File.html là 2 tệp khác nhau                                                  Một số máy chủ khác (Microsoft, IIS), tên tệp không phân biệt chữ hoa chữ thường                                                  Ví dụ: file.html và File.html là cùng một tệp"
    },
    {
        "title": "Phần mở rộng file",
        "content": "Phần mở rộng file Phần mở rộng file giúp trình duyệt hiểu được loại file và cách xử lý file Phần mở rộng file cũng giúp người dùng biết được nội dung của file Tệp HTML có phần mở rộng là .html (.htm cũng được chấp nhận) Tệp CSS có phần mở rộng là .css Tệp JavaScript có phần mở rộng là .js"
    },
    {
        "title": "Tên tệp mặc định",
        "content": "Tên tệp mặc định Trình duyệt web sẽ tìm kiếm các tệp mặc định khi truy cập trang web Tệp mặc định của trang web là index.html hoặc index.htm Trình duyệt sẽ tìm kiếm các tệp mặc định theo thứ tự sau:  index.html index.htm default.html default.htm"
    },
    {
        "title": "HTML Entities",
        "content": "HTML Entities HTML Entities là các ký tự đặc biệt trong HTML HTML Entities được sử dụng để hiển thị các ký tự đặc biệt trong HTML HTML Entities bắt đầu bằng dấu & và kết thúc bằng dấu ; Nếu bạn sử dụng các dấu nhỏ hơn (<) hoặc lớn hơn (>) trong văn bản HTML của mình, trình duyệt                     có thể kết hợp chúng với các thẻ. Tên thực thể hoặc số thực thể có thể được sử dụng để hiển thị các ký tự HTML dành riêng. Thực thể số bắt đầu bằng dấu &# và kết thúc bằng dấu ; Thực thể tên bắt đầu bằng dấu & và kết thúc bằng dấu ; Để thêm nhiều dấu cách mà không bị trình duyệt xóa bỏ, có thể dùng &nbsp;  Các thực thể HTML phổ biến   Thực thể Mô tả Thực thể Mô tả   &lt; Dấu nhỏ hơn (<) &gt; Dấu lớn hơn (>)   &copy; Dấu bản quyền (©) &reg; Dấu đăng ký (®)   &trade; Dấu thương hiệu (™) &euro; Đồng Euro (€)   &cent; Đồng xu (¢) &pound; Bảng Anh (£)   &yen; Yên Nhật (¥) &sect; Phần (§)   &para; Dấu đoạn (¶) &micro; Micro (µ)   &deg; Độ (°) &plusmn; Dấu cộng trừ (±)   &times; Dấu nhân (×) &divide; Dấu chia (÷)   &alpha; Chữ Alpha (α) &beta; Chữ Beta (β)   &gamma; Chữ Gamma (γ) &delta; Chữ Delta (δ)   &epsilon; Chữ Epsilon (ε) &theta; Chữ Theta (θ)   &lambda; Chữ Lambda (λ) &mu; Chữ Mu (μ)   &pi; Chữ Pi (π) &sigma; Chữ Sigma (σ)   &omega; Chữ Omega (ω) &hellip; Dấu ba chấm (...)   &ndash; Dấu gạch ngang dài (–) &mdash; Dấu gạch ngang kép (—)   &lsquo; Dấu ngoặc đơn trái (‘) &rsquo; Dấu ngoặc đơn phải (’)"
    },
    {
        "title": "Các thực thể HTML phổ biến",
        "content": "Các thực thể HTML phổ biến   Thực thể Mô tả Thực thể Mô tả   &lt; Dấu nhỏ hơn (<) &gt; Dấu lớn hơn (>)   &copy; Dấu bản quyền (©) &reg; Dấu đăng ký (®)   &trade; Dấu thương hiệu (™) &euro; Đồng Euro (€)   &cent; Đồng xu (¢) &pound; Bảng Anh (£)   &yen; Yên Nhật (¥) &sect; Phần (§)   &para; Dấu đoạn (¶) &micro; Micro (µ)   &deg; Độ (°) &plusmn; Dấu cộng trừ (±)   &times; Dấu nhân (×) &divide; Dấu chia (÷)   &alpha; Chữ Alpha (α) &beta; Chữ Beta (β)   &gamma; Chữ Gamma (γ) &delta; Chữ Delta (δ)   &epsilon; Chữ Epsilon (ε) &theta; Chữ Theta (θ)   &lambda; Chữ Lambda (λ) &mu; Chữ Mu (μ)   &pi; Chữ Pi (π) &sigma; Chữ Sigma (σ)   &omega; Chữ Omega (ω) &hellip; Dấu ba chấm (...)   &ndash; Dấu gạch ngang dài (–) &mdash; Dấu gạch ngang kép (—)   &lsquo; Dấu ngoặc đơn trái (‘) &rsquo; Dấu ngoặc đơn phải (’)"
    },
    {
        "title": "Form trong HTML",
        "content": "Form trong HTML Form trong HTML là một phần quan trọng của trang web Form được sử dụng để thu thập thông tin từ người dùng Form trong HTML bao gồm các phần tử như input, textarea, button,... Form được gửi đến một trang xử lý thông qua phương thức GET hoặc POST Form trong HTML được định nghĩa bởi thẻ <form>  Phần tử <form> Phần tử <form> định nghĩa một form trong HTML Form được gửi đến một trang xử lý thông qua thuộc tính action  Phương thức gửi form được xác định bởi thuộc tính method Mã HTML <form action=\"/xuly.php\" method=\"post\">     <label for=\"username\">Tên người dùng:</label>     <input type=\"text\" id=\"username\" name=\"username\">     <input type=\"submit\" value=\"Gửi\"> </form>    Phần tử <input> Phần tử <input> định nghĩa một trường nhập trong form                      Phần tử <input> có nhiều kiểu khác nhau như text,                         password, radio, checkbox,...   Loại Mô tả   <input type=\"text\"> Hiển thị trường nhập văn bản một dòng   <input type=\"radio\"> Hiển thị nút radio (để chọn một trong nhiều lựa chọn)   <input type=\"checkbox\"> Hiển thị nút checkbox (để chọn một hoặc nhiều lựa chọn)   <input type=\"submit\"> Hiển thị nút gửi form   <input type=\"button\"> Hiển thị nút có thể click     Trường văn bản Trường văn bản cho phép người dùng nhập văn bản Mã HTML <form>     <label for=\"fname\">Họ:</label> <br>     <input type=\"text\" id=\"fname\" name=\"fname\"> <br>     <label for=\"lname\">Tên:</label> <br>     <input type=\"text\" id=\"lname\" name=\"lname\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   Chú ý: Bản thân biểu mẫu không thể nhìn thấy được. Cũng lưu ý rằng độ rộng mặc định của                         trường đầu vào là 20 ký tự.                        Thẻ <lable> Thẻ <lable> định nghĩa một nhãn cho một phần tử input                      Người dùng có thể click vào nhãn để chọn phần tử input Thuộc tính for của thẻ <lable> phải bằng thuộc tính id của phần tử <input>                         để liên kết chúng lại với nhau.   Nút Radio Nút radio cho phép người dùng chọn một trong nhiều lựa chọn Mã HTML <p> Chọn giới tính:</p> <form>     <input type=\"radio\" id=\"male\" name=\"sex\" value=\"male\">     <label for=\"male\">Nam</label><br>     <input type=\"radio\" id=\"female\" name=\"sex\" value=\"female\">     <label for=\"female\">Nữ</label><br>     <input type=\"radio\" id=\"other\" name=\"sex\" value=\"other\">     <label for=\"other\">Khác</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>    Hộp kiểm Hộp kiểm cho phép người dùng chọn một hoặc nhiều lựa chọn Mã HTML <p> Chọn ngôn ngữ yêu thích:</p> <form>     <input type=\"checkbox\" id=\"html\" name=\"html\" value=\"html\">     <label for=\"html\">HTML</label><br>     <input type=\"checkbox\" id=\"css\" name=\"css\" value=\"css\">     <label for=\"css\">CSS</label><br>     <input type=\"checkbox\" id=\"js\" name=\"js\" value=\"js\">     <label for=\"js\">JavaScript</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>    Nút gửi Nút gửi cho phép người dùng gửi form Trình xử lý biểu mẫu thường là một tệp trên máy chủ có tập lệnh để xử lý dữ liệu đầu vào. Trình xử lý biểu mẫu được chỉ định trong thuộc tính action của                         biểu mẫu.   Thuộc tính name trong thẻ <input> Thuộc tính name trong thẻ <input> xác định tên của phần tử input khi form được gửi                         đến trình xử lý biểu mẫu Nếu thuộc tính name bị bỏ qua, giá trị của trường đầu vào sẽ                         không được gửi đi."
    },
    {
        "title": "Phần tử <form>",
        "content": "Phần tử <form> Phần tử <form> định nghĩa một form trong HTML Form được gửi đến một trang xử lý thông qua thuộc tính action  Phương thức gửi form được xác định bởi thuộc tính method Mã HTML <form action=\"/xuly.php\" method=\"post\">     <label for=\"username\">Tên người dùng:</label>     <input type=\"text\" id=\"username\" name=\"username\">     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Phần tử <input>",
        "content": "Phần tử <input> Phần tử <input> định nghĩa một trường nhập trong form                      Phần tử <input> có nhiều kiểu khác nhau như text,                         password, radio, checkbox,...   Loại Mô tả   <input type=\"text\"> Hiển thị trường nhập văn bản một dòng   <input type=\"radio\"> Hiển thị nút radio (để chọn một trong nhiều lựa chọn)   <input type=\"checkbox\"> Hiển thị nút checkbox (để chọn một hoặc nhiều lựa chọn)   <input type=\"submit\"> Hiển thị nút gửi form   <input type=\"button\"> Hiển thị nút có thể click"
    },
    {
        "title": "Trường văn bản",
        "content": "Trường văn bản Trường văn bản cho phép người dùng nhập văn bản Mã HTML <form>     <label for=\"fname\">Họ:</label> <br>     <input type=\"text\" id=\"fname\" name=\"fname\"> <br>     <label for=\"lname\">Tên:</label> <br>     <input type=\"text\" id=\"lname\" name=\"lname\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   Chú ý: Bản thân biểu mẫu không thể nhìn thấy được. Cũng lưu ý rằng độ rộng mặc định của                         trường đầu vào là 20 ký tự."
    },
    {
        "title": "Thẻ <lable>",
        "content": "Thẻ <lable> Thẻ <lable> định nghĩa một nhãn cho một phần tử input                      Người dùng có thể click vào nhãn để chọn phần tử input Thuộc tính for của thẻ <lable> phải bằng thuộc tính id của phần tử <input>                         để liên kết chúng lại với nhau."
    },
    {
        "title": "Nút Radio",
        "content": "Nút Radio Nút radio cho phép người dùng chọn một trong nhiều lựa chọn Mã HTML <p> Chọn giới tính:</p> <form>     <input type=\"radio\" id=\"male\" name=\"sex\" value=\"male\">     <label for=\"male\">Nam</label><br>     <input type=\"radio\" id=\"female\" name=\"sex\" value=\"female\">     <label for=\"female\">Nữ</label><br>     <input type=\"radio\" id=\"other\" name=\"sex\" value=\"other\">     <label for=\"other\">Khác</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Hộp kiểm",
        "content": "Hộp kiểm Hộp kiểm cho phép người dùng chọn một hoặc nhiều lựa chọn Mã HTML <p> Chọn ngôn ngữ yêu thích:</p> <form>     <input type=\"checkbox\" id=\"html\" name=\"html\" value=\"html\">     <label for=\"html\">HTML</label><br>     <input type=\"checkbox\" id=\"css\" name=\"css\" value=\"css\">     <label for=\"css\">CSS</label><br>     <input type=\"checkbox\" id=\"js\" name=\"js\" value=\"js\">     <label for=\"js\">JavaScript</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Nút gửi",
        "content": "Nút gửi Nút gửi cho phép người dùng gửi form Trình xử lý biểu mẫu thường là một tệp trên máy chủ có tập lệnh để xử lý dữ liệu đầu vào. Trình xử lý biểu mẫu được chỉ định trong thuộc tính action của                         biểu mẫu."
    },
    {
        "title": "Thuộc tính name trong thẻ <input>",
        "content": "Thuộc tính name trong thẻ <input> Thuộc tính name trong thẻ <input> xác định tên của phần tử input khi form được gửi                         đến trình xử lý biểu mẫu Nếu thuộc tính name bị bỏ qua, giá trị của trường đầu vào sẽ                         không được gửi đi."
    },
    {
        "title": "Thuộc tính của Form trong HTML",
        "content": "Thuộc tính của Form trong HTML Thuộc tính của Form trong HTML giúp bạn kiểm soát cách form hoạt động Thuộc tính của Form trong HTML bao gồm action, method, target, autocomplete, novalidate,...  Thuộc tính action Thuộc tính action xác định trang xử lý form khi form được gửi                         đi Trang xử lý form có thể là một tệp trên máy chủ hoặc một URL Mã HTML <form action=\"/xuly.php\" method=\"post\">  Chú ý: Khi form được gửi, dữ liệu form sẽ được gửi đến tệp xuly.php trên máy chủ                       Mẹo: Nếu thuộc tính action bị bỏ qua, form sẽ được gửi                         đến trang hiện tại                        Thuộc tính target Thuộc tính target xác định cách hiển thị kết quả khi form được                         gửi đi Giá trị của thuộc tính target có thể là _blank, _self,                         _parent, _top hoặc tên của một cửa sổ hoặc khung   Giá trị Mô tả   _blank Mở kết quả trong một cửa sổ hoặc tab mới   _self Mở kết quả trong cùng một cửa sổ/tab   _parent Mở kết quả trong khung cha của cửa sổ/tab hiện tại   _top Mở kết quả trong cửa sổ/tab trên cùng   tên frame Mở kết quả trong một frame với tên frame được chỉ định     Thuộc tính method Thuộc tính method xác định phương thức gửi dữ liệu form Phương thức gửi dữ liệu form có thể là GET hoặc POST   Phương thức Mô tả   GET Gửi dữ liệu form dưới dạng chuỗi truy vấn   POST Gửi dữ liệu form dưới dạng gói tin HTTP   Phương thức 'GET' <form action=\"/xuly.php\" method=\"get\">     <label for=\"search\">Tìm kiếm:</label>     <input type=\"text\" id=\"search\" name=\"search\">     <input type=\"submit\" value=\"Tìm\"> </form>   Đối với phương thức 'GET'                          Dữ liệu form được gửi dưới dạng chuỗi truy vấn và hiển thị trên URL dưới dạng tên/giá trị (trong                         ví dụ trên, dữ liệu form được gửi dưới dạng /xuly.php?search=giatri với giatri là dữ liệu nhập                         vào) KHÔNG BAO GIỜ sử dụng phương thức 'GET' để gửi dữ liệu nhạy cảm như mật khẩu hoặc thông                         tin tài khoản ngân hàng vì dữ liệu sẽ hiển thị trên URL                          Kích thước dữ liệu gửi đi bằng phương thức 'GET' có giới hạn (2048 ký tự)                          Hữu ích cho việc gửi biểu mẫu khi người dùng muốn đánh dấu kết quả hoặc lưu trữ URL                          GET phù hợp với dữ liệu không nhạy cảm, như chuỗi truy vấn trong Google                      Phương thức 'POST' <form action=\"/xuly.php\" method=\"post\">     <label for=\"username\">Tên người dùng:</label>     <input type=\"text\" id=\"username\" name=\"username\">     <input type=\"submit\" value=\"Gửi\"> </form>   Đối với phương thức 'POST'                          Dữ liệu form được gửi dưới dạng gói tin HTTP và không hiển thị trên URL                          POST không có giới hạn về kích thước dữ liệu gửi đi                          POST phù hợp với dữ liệu nhạy cảm, như mật khẩu hoặc thông tin tài khoản ngân hàng                          POST không phù hợp với việc gửi biểu mẫu khi người dùng muốn đánh dấu kết quả hoặc lưu trữ URL                        Thuộc tính autocomplete Thuộc tính autocomplete xác định xem trình duyệt có nên tự                         động hoàn thành thông tin form hay không Giá trị của thuộc tính autocomplete có thể là on hoặc off Giá trị mặc định của thuộc tính autocomplete là on  Chú ý: Thuộc tính autocomplete hoạt động khi người                         dùng đã nhập thông tin vào form trước đó                        Thuộc tính novalidate Thuộc tính novalidate xác định xem form có nên được kiểm tra                         bởi trình duyệt hay không Giá trị của thuộc tính novalidate có thể là no hoặc empty  Chú ý: Thuộc tính novalidate không kiểm tra dữ liệu                         form trước khi gửi form"
    },
    {
        "title": "Thuộc tính action",
        "content": "Thuộc tính action Thuộc tính action xác định trang xử lý form khi form được gửi                         đi Trang xử lý form có thể là một tệp trên máy chủ hoặc một URL Mã HTML <form action=\"/xuly.php\" method=\"post\">  Chú ý: Khi form được gửi, dữ liệu form sẽ được gửi đến tệp xuly.php trên máy chủ                       Mẹo: Nếu thuộc tính action bị bỏ qua, form sẽ được gửi                         đến trang hiện tại"
    },
    {
        "title": "Thuộc tính target",
        "content": "Thuộc tính target Thuộc tính target xác định cách hiển thị kết quả khi form được                         gửi đi Giá trị của thuộc tính target có thể là _blank, _self,                         _parent, _top hoặc tên của một cửa sổ hoặc khung   Giá trị Mô tả   _blank Mở kết quả trong một cửa sổ hoặc tab mới   _self Mở kết quả trong cùng một cửa sổ/tab   _parent Mở kết quả trong khung cha của cửa sổ/tab hiện tại   _top Mở kết quả trong cửa sổ/tab trên cùng   tên frame Mở kết quả trong một frame với tên frame được chỉ định"
    },
    {
        "title": "Thuộc tính method",
        "content": "Thuộc tính method Thuộc tính method xác định phương thức gửi dữ liệu form Phương thức gửi dữ liệu form có thể là GET hoặc POST   Phương thức Mô tả   GET Gửi dữ liệu form dưới dạng chuỗi truy vấn   POST Gửi dữ liệu form dưới dạng gói tin HTTP   Phương thức 'GET' <form action=\"/xuly.php\" method=\"get\">     <label for=\"search\">Tìm kiếm:</label>     <input type=\"text\" id=\"search\" name=\"search\">     <input type=\"submit\" value=\"Tìm\"> </form>   Đối với phương thức 'GET'                          Dữ liệu form được gửi dưới dạng chuỗi truy vấn và hiển thị trên URL dưới dạng tên/giá trị (trong                         ví dụ trên, dữ liệu form được gửi dưới dạng /xuly.php?search=giatri với giatri là dữ liệu nhập                         vào) KHÔNG BAO GIỜ sử dụng phương thức 'GET' để gửi dữ liệu nhạy cảm như mật khẩu hoặc thông                         tin tài khoản ngân hàng vì dữ liệu sẽ hiển thị trên URL                          Kích thước dữ liệu gửi đi bằng phương thức 'GET' có giới hạn (2048 ký tự)                          Hữu ích cho việc gửi biểu mẫu khi người dùng muốn đánh dấu kết quả hoặc lưu trữ URL                          GET phù hợp với dữ liệu không nhạy cảm, như chuỗi truy vấn trong Google                      Phương thức 'POST' <form action=\"/xuly.php\" method=\"post\">     <label for=\"username\">Tên người dùng:</label>     <input type=\"text\" id=\"username\" name=\"username\">     <input type=\"submit\" value=\"Gửi\"> </form>   Đối với phương thức 'POST'                          Dữ liệu form được gửi dưới dạng gói tin HTTP và không hiển thị trên URL                          POST không có giới hạn về kích thước dữ liệu gửi đi                          POST phù hợp với dữ liệu nhạy cảm, như mật khẩu hoặc thông tin tài khoản ngân hàng                          POST không phù hợp với việc gửi biểu mẫu khi người dùng muốn đánh dấu kết quả hoặc lưu trữ URL"
    },
    {
        "title": "Thuộc tính autocomplete",
        "content": "Thuộc tính autocomplete Thuộc tính autocomplete xác định xem trình duyệt có nên tự                         động hoàn thành thông tin form hay không Giá trị của thuộc tính autocomplete có thể là on hoặc off Giá trị mặc định của thuộc tính autocomplete là on  Chú ý: Thuộc tính autocomplete hoạt động khi người                         dùng đã nhập thông tin vào form trước đó"
    },
    {
        "title": "Thuộc tính novalidate",
        "content": "Thuộc tính novalidate Thuộc tính novalidate xác định xem form có nên được kiểm tra                         bởi trình duyệt hay không Giá trị của thuộc tính novalidate có thể là no hoặc empty  Chú ý: Thuộc tính novalidate không kiểm tra dữ liệu                         form trước khi gửi form"
    },
    {
        "title": "Các phần tử trong Form",
        "content": "Các phần tử trong Form Phần tử <form> có thể chứa một hoặc nhiều phần tử sau đây                   Phần tử <input> Phần tử <label> Phần tử <select> Phần tử <textarea> Phần tử <button> Phần tử <fieldset> Phần tử <legend> Phần tử <datalist> Phần tử <output> Phần tử <option> Phần tử <optgroup>   Phần tử <input> Phần tử <input> có thể hiển thị dưới nhiều dạng khác                         nhau phụ thuộc vào thuộc tính <type>   Phần tử <label> Phần tử <label> định nghĩa một nhãn cho một phần tử                         input Người dùng có thể click vào nhãn để chọn phần tử input Thuộc tính for của thẻ <label> phải bằng thuộc tính id của phần tử <input>                         để liên kết chúng lại với nhau.                          Phần tử <label> cũng giúp những người dùng gặp khó khăn                         trong việc nhìn thấy hoặc click vào phần tử input (như nút radio hoặc checkbox) bởi vì khi click                         vào nhãn, phần tử input sẽ được chọn                        Phần tử <select> Phần tử <select> định nghĩa một danh sách thả xuống Phần tử <select> có thể chứa một hoặc nhiều phần tử                         <option>  Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Theo mặc định, phần tử đầu tiên trong danh sách sẽ được chọn Để chọn một phần tử khác, bạn có thể sử dụng thuộc tính selected trong phần tử <option> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\" selected>JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Mặc định số lượng phần tử có thể nhìn thấy là 1, bạn có thể tăng số lượng này lên bằng cách thêm                         thuộc tính <size> vào phần tử <select> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\" size=\"2\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>         <option value=\"java\">java</option>         <option value=\"C#\">C#</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Để chọn nhiều phần tử trong danh sách, bạn có thể thêm thuộc tính multiple vào phần tử <select> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\" size=\"4\" multiple>         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>         <option value=\"java\">java</option>         <option value=\"C#\">C#</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Chú ý: Để chọn nhiều phần tử, bạn có thể giữ phím Ctrl và click vào các phần tử bạn muốn                         chọn với windows và Linux hoặc giữ phím Command và click vào các phần tử bạn muốn chọn với Mac                        Phần tử <textarea> Phần tử <textarea> định nghĩa một trường nhập văn bản                         nhiều dòng Phần tử <textarea> có thể chứa một số văn bản mặc định                      Mã HTML <form>     <label for=\"message\">Nhập nội dung:</label> <br>     <textarea id=\"message\" name=\"message\" rows=\"10\", cols=\"20\">Nhập nội dung ở đây...</textarea> <br>     <input type=\"submit\" value=\"Gửi\"> </form>                          Thuộc tính rows xác định số hàng của trường văn bản                          Thuộc tính cols xác định số cột của trường văn bản                          Nếu không có giá trị mặc định, trường văn bản sẽ có 20 cột và 2 hàng                          Bạn cũng có thể dùng CSS để xác định kích thước của trường văn bản                                                   Phần tử <button>  Phần tử <button> định nghĩa một nút trong form Phần tử <button> có thể chứa văn bản, hình ảnh hoặc các                         phần tử khác Mã HTML <form>     <button type=\"button\" onclick=\"alert('Á, đừng màaaaaaa!')\">Bấm vô đây!</button> </form>   Chú ý: Thuộc tính type xác định loại nút (button,                         submit, reset)                                                  Phần tử <fieldset> và <legend>  Phần tử <fieldset> định nghĩa một nhóm phần tử có liên                         quan trong form Phần tử <legend> định nghĩa một tiêu đề cho phần tử                         <fieldset>  Mã HTML <form>     <fieldset>         <legend>Thông tin cá nhân</legend>         <label for=\"fname\">Họ:</label> <br>         <input type=\"text\" id=\"fname\" name=\"fname\"> <br>         <label for=\"lname\">Tên:</label> <br>         <input type=\"text\" id=\"lname\" name=\"lname\"> <br>     </fieldset>      <fieldset>         <legend>Thông tin liên hệ</legend>         <label for=\"email\">Email:</label> <br>         <input type=\"email\" id=\"email\" name=\"email\"> <br>         <label for=\"phone\">Số điện thoại:</label> <br>         <input type=\"tel\" id=\"phone\" name=\"phone\"> <br>     </fieldset>     <input type=\"submit\" value=\"Gửi\"> </form>                             Phần tử <datalist>  Phần tử <datalist> định nghĩa một danh sách các giá trị                         cho một trường nhập văn bản Phần tử <input> có thể chứa một danh sách các giá trị từ                         phần tử <datalist> Mã HTML <form>     <label for=\"os\">Chọn Hệ Điều Hành:</label> <br>     <input list=\"osChoice\" id=\"os\" name=\"os\"> <br>     <datalist id=\"osChoice\">         <option value=\"Windows\">         <option value=\"macOS\">         <option value=\"Linux\">         <option value=\"Android\">         <option value=\"iOS\">     </datalist>     <input type=\"submit\" value=\"Gửi\"> </form>                             Phần tử <output>  Phần tử <output> định nghĩa kết quả của một tính toán                         hoặc kết quả của một biểu mẫu Phần tử <output> có thể chứa một số giá trị mặc định Mã HTML <form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\">     0 <input type=\"range\" id=\"a\" value=\"50\"> 100 +     <input type=\"number\" id=\"b\" value=\"50\"> =     <output name=\"result\" for=\"a b\">100</output> </form>                             Phần tử <option>  Phần tử <option> định nghĩa một lựa chọn trong một danh                         sách thả xuống Phần tử <option> phải được đặt trong một phần tử <select> Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>    Phần tử <optgroup> Phần tử <optgroup> định nghĩa một nhóm các phần tử <option> trong một danh sách thả xuống Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ:</label>     <select id=\"language\" name=\"language\">         <optgroup label=\"Web\">             <option value=\"html\">HTML</option>             <option value=\"css\">CSS</option>             <option value=\"js\">JavaScript</option>         </optgroup>         <optgroup label=\"Backend\">             <option value=\"php\">PHP</option>             <option value=\"python\">Python</option>             <option value=\"java\">Java</option>         </optgroup>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Phần tử <input>",
        "content": "Phần tử <input> Phần tử <input> có thể hiển thị dưới nhiều dạng khác                         nhau phụ thuộc vào thuộc tính <type>"
    },
    {
        "title": "Phần tử <label>",
        "content": "Phần tử <label> Phần tử <label> định nghĩa một nhãn cho một phần tử                         input Người dùng có thể click vào nhãn để chọn phần tử input Thuộc tính for của thẻ <label> phải bằng thuộc tính id của phần tử <input>                         để liên kết chúng lại với nhau.                          Phần tử <label> cũng giúp những người dùng gặp khó khăn                         trong việc nhìn thấy hoặc click vào phần tử input (như nút radio hoặc checkbox) bởi vì khi click                         vào nhãn, phần tử input sẽ được chọn"
    },
    {
        "title": "Phần tử <select>",
        "content": "Phần tử <select> Phần tử <select> định nghĩa một danh sách thả xuống Phần tử <select> có thể chứa một hoặc nhiều phần tử                         <option>  Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Theo mặc định, phần tử đầu tiên trong danh sách sẽ được chọn Để chọn một phần tử khác, bạn có thể sử dụng thuộc tính selected trong phần tử <option> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\" selected>JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Mặc định số lượng phần tử có thể nhìn thấy là 1, bạn có thể tăng số lượng này lên bằng cách thêm                         thuộc tính <size> vào phần tử <select> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\" size=\"2\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>         <option value=\"java\">java</option>         <option value=\"C#\">C#</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Để chọn nhiều phần tử trong danh sách, bạn có thể thêm thuộc tính multiple vào phần tử <select> <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\" size=\"4\" multiple>         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>         <option value=\"java\">java</option>         <option value=\"C#\">C#</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>   Chú ý: Để chọn nhiều phần tử, bạn có thể giữ phím Ctrl và click vào các phần tử bạn muốn                         chọn với windows và Linux hoặc giữ phím Command và click vào các phần tử bạn muốn chọn với Mac"
    },
    {
        "title": "Phần tử <textarea>",
        "content": "Phần tử <textarea> Phần tử <textarea> định nghĩa một trường nhập văn bản                         nhiều dòng Phần tử <textarea> có thể chứa một số văn bản mặc định                      Mã HTML <form>     <label for=\"message\">Nhập nội dung:</label> <br>     <textarea id=\"message\" name=\"message\" rows=\"10\", cols=\"20\">Nhập nội dung ở đây...</textarea> <br>     <input type=\"submit\" value=\"Gửi\"> </form>                          Thuộc tính rows xác định số hàng của trường văn bản                          Thuộc tính cols xác định số cột của trường văn bản                          Nếu không có giá trị mặc định, trường văn bản sẽ có 20 cột và 2 hàng                          Bạn cũng có thể dùng CSS để xác định kích thước của trường văn bản"
    },
    {
        "title": "Phần tử <button>",
        "content": "Phần tử <button>  Phần tử <button> định nghĩa một nút trong form Phần tử <button> có thể chứa văn bản, hình ảnh hoặc các                         phần tử khác Mã HTML <form>     <button type=\"button\" onclick=\"alert('Á, đừng màaaaaaa!')\">Bấm vô đây!</button> </form>   Chú ý: Thuộc tính type xác định loại nút (button,                         submit, reset)"
    },
    {
        "title": "Phần tử <fieldset> và <legend>",
        "content": "Phần tử <fieldset> và <legend>  Phần tử <fieldset> định nghĩa một nhóm phần tử có liên                         quan trong form Phần tử <legend> định nghĩa một tiêu đề cho phần tử                         <fieldset>  Mã HTML <form>     <fieldset>         <legend>Thông tin cá nhân</legend>         <label for=\"fname\">Họ:</label> <br>         <input type=\"text\" id=\"fname\" name=\"fname\"> <br>         <label for=\"lname\">Tên:</label> <br>         <input type=\"text\" id=\"lname\" name=\"lname\"> <br>     </fieldset>      <fieldset>         <legend>Thông tin liên hệ</legend>         <label for=\"email\">Email:</label> <br>         <input type=\"email\" id=\"email\" name=\"email\"> <br>         <label for=\"phone\">Số điện thoại:</label> <br>         <input type=\"tel\" id=\"phone\" name=\"phone\"> <br>     </fieldset>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Phần tử <datalist>",
        "content": "Phần tử <datalist>  Phần tử <datalist> định nghĩa một danh sách các giá trị                         cho một trường nhập văn bản Phần tử <input> có thể chứa một danh sách các giá trị từ                         phần tử <datalist> Mã HTML <form>     <label for=\"os\">Chọn Hệ Điều Hành:</label> <br>     <input list=\"osChoice\" id=\"os\" name=\"os\"> <br>     <datalist id=\"osChoice\">         <option value=\"Windows\">         <option value=\"macOS\">         <option value=\"Linux\">         <option value=\"Android\">         <option value=\"iOS\">     </datalist>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Phần tử <output>",
        "content": "Phần tử <output>  Phần tử <output> định nghĩa kết quả của một tính toán                         hoặc kết quả của một biểu mẫu Phần tử <output> có thể chứa một số giá trị mặc định Mã HTML <form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\">     0 <input type=\"range\" id=\"a\" value=\"50\"> 100 +     <input type=\"number\" id=\"b\" value=\"50\"> =     <output name=\"result\" for=\"a b\">100</output> </form>"
    },
    {
        "title": "Phần tử <option>",
        "content": "Phần tử <option>  Phần tử <option> định nghĩa một lựa chọn trong một danh                         sách thả xuống Phần tử <option> phải được đặt trong một phần tử <select> Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ lập trình:</label>     <select id=\"language\" name=\"language\">         <option value=\"python\">python</option>         <option value=\"go\">go</option>         <option value=\"js\">JavaScript</option>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Phần tử <optgroup>",
        "content": "Phần tử <optgroup> Phần tử <optgroup> định nghĩa một nhóm các phần tử <option> trong một danh sách thả xuống Mã HTML <form>     <label for=\"language\">Chọn một ngôn ngữ:</label>     <select id=\"language\" name=\"language\">         <optgroup label=\"Web\">             <option value=\"html\">HTML</option>             <option value=\"css\">CSS</option>             <option value=\"js\">JavaScript</option>         </optgroup>         <optgroup label=\"Backend\">             <option value=\"php\">PHP</option>             <option value=\"python\">Python</option>             <option value=\"java\">Java</option>         </optgroup>     </select>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Các loại Input trong HTML",
        "content": "Các loại Input trong HTML                  Phần tử <input> có thể hiển thị dưới nhiều dạng khác nhau                     phụ thuộc vào thuộc tính <type> Thuộc tính <type> xác định loại dữ liệu mà phần tử <input> sẽ chứa Danh sách các loại input  <input type=\"button\"> <input type=\"checkbox\"> <input type=\"color\"> <input type=\"date\"> <input type=\"datetime-local\"> <input type=\"email\"> <input type=\"file\"> <input type=\"hidden\"> <input type=\"image\"> <input type=\"month\"> <input type=\"number\"> <input type=\"password\"> <input type=\"radio\"> <input type=\"range\"> <input type=\"reset\"> <input type=\"search\"> <input type=\"submit\"> <input type=\"tel\"> <input type=\"text\"> <input type=\"time\"> <input type=\"url\"> <input type=\"week\">   text là loại mặc định của phần tử <input>  <input type=\"text\"> định nghĩa trường văn bản một                         dòng <form>     <label for=\"fname\">Họ:</label> <br>     <input type=\"text\" id=\"fname\" name=\"fname\"> <br>     <label for=\"lname\">Tên:</label> <br>     <input type=\"text\" id=\"lname\" name=\"lname\"> <br> </form>  <input type=\"text\"> định nghĩa trường mật khẩu <form>     <label for=\"password\">Mật khẩu:</label> <br>     <input type=\"password\" id=\"password\" name=\"password\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>                       Các kí tự nhập vào trường mật khẩu sẽ được ẩn bằng dấu chấm hoặc dấu sao                  <input type=\"submit\"> định nghĩa một nút để gửi dữ                         liệu đến máy chủ <form>     <input type=\"text\" name=\"search\">     <input type=\"submit\" value=\"Tìm\"> </form>  <input type=\"reset\"> định nghĩa một nút để thiết lập lại                         dữ liệu trong form <form>     <label for=\"fname\">Họ:</label> <br>     <input type=\"text\" id=\"fname\" name=\"fname\" value=\"Nguyễn\"> <br>     <label for=\"lname\">Tên:</label> <br>     <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Nam\"> <br>     <input type=\"reset\" value=\"Xóa\"> </form>  <input type=\"radio\"> định nghĩa một nút radio để chọn                     một giá trị <p> Chọn giới tính:</p> <form>     <input type=\"radio\" id=\"male\" name=\"sex\" value=\"male\">     <label for=\"male\">Nam</label><br>     <input type=\"radio\" id=\"female\" name=\"sex\" value=\"female\">     <label for=\"female\">Nữ</label><br>     <input type=\"radio\" id=\"other\" name=\"sex\" value=\"other\">     <label for=\"other\">Khác</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>  <input type=\"checkbox\"> định nghĩa một nút checkbox                     để chọn một hoặc nhiều giá trị <p> Chọn ngôn ngữ yêu thích:</p> <form>     <input type=\"checkbox\" id=\"html\" name=\"html\" value=\"html\">     <label for=\"html\">HTML</label><br>     <input type=\"checkbox\" id=\"css\" name=\"css\" value=\"css\">     <label for=\"css\">CSS</label><br>     <input type=\"checkbox\" id=\"js\" name=\"js\" value=\"js\">     <label for=\"js\">JavaScript</label><br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"button\"> định nghĩa một nút để thực                     hiện một hành động                  <form>     <input type=\"button\" value=\"Click me\" onclick=\"alert('Hello World!')\"> </form>   <input type=\"color\"> định nghĩa một trường chọn màu  <form>     <label for=\"color\">Chọn một màu:</label> <br>     <input type=\"color\" id=\"color\" name=\"color\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"date\"> định nghĩa một trường chọn ngày  <form>     <label for=\"birthday\">Ngày sinh:</label> <br>     <input type=\"date\" id=\"birthday\" name=\"birthday\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"datetime-local\"> định nghĩa một trường chọn                         ngày và giờ  <form>     <label for=\"meeting\">Hẹn gặp:</label> <br>     <input type=\"datetime-local\" id=\"meeting\" name=\"meeting\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"email\"> định nghĩa một trường nhập                         email  <form>     <label for=\"email\">Email:</label> <br>     <input type=\"email\" id=\"email\" name=\"email\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"file\"> định nghĩa một trường chọn file  <form>     <label for=\"file\">Chọn một file:</label> <br>     <input type=\"file\" id=\"file\" name=\"file\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"hidden\"> định nghĩa một trường ẩn  <form>     <input type=\"hidden\" name=\"id\" value=\"123\">     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"image\"> định nghĩa một hình ảnh làm nút  <form>     <input type=\"image\" src=\"hinh-anh.png\" width=\"20\" alt=\"Submit\"> </form>   <input type=\"month\"> định nghĩa một trường chọn                         tháng  <form>     <label for=\"month\">Chọn một tháng:</label> <br>     <input type=\"month\" id=\"month\" name=\"month\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"number\"> định nghĩa một trường nhập số  <form>     <label for=\"quantity\">Số lượng:</label> <br>     <input type=\"number\" id=\"quantity\" name=\"quantity\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"range\"> định nghĩa một thanh trượt  <form>     <label for=\"volume\">Âm lượng:</label> <br>     <input type=\"range\" id=\"volume\" name=\"volume\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"search\"> định nghĩa một trường tìm kiếm  <form>     <label for=\"search\">Tìm kiếm:</label> <br>     <input type=\"search\" id=\"search\" name=\"search\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"tel\"> định nghĩa một trường nhập số điện                         thoại  <form>     <label for=\"phone\">Số điện thoại:</label> <br>     <input type=\"tel\" id=\"phone\" name=\"phone\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"time\"> định nghĩa một trường chọn thời                         gian  <form>     <label for=\"time\">Chọn một thời gian:</label> <br>     <input type=\"time\" id=\"time\" name=\"time\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"url\"> định nghĩa một trường nhập URL  <form>     <label for=\"url\">URL:</label> <br>     <input type=\"url\" id=\"url\" name=\"url\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>   <input type=\"week\"> định nghĩa một trường chọn tuần  <form>     <label for=\"week\">Chọn một tuần:</label> <br>     <input type=\"week\" id=\"week\" name=\"week\"> <br>     <input type=\"submit\" value=\"Gửi\"> </form>"
    },
    {
        "title": "Thuộc tính thẻ <input>",
        "content": "Thuộc tính thẻ <input> Thẻ input có khá nhiều thuộc tính được áp dụng như trong bảng dưới đây    Thuộc tính Mô tả Áp dụng cho Ví dụ   accept Xác định kiểu file được chấp nhận file <input type=\"file\" accept=\"image/*\">   value Xác định giá trị mặc định của trường nhập text, search, tel, url, email, password, date, month, week, time, datetime-local,                                 number, range, color <input type=\"text\" value=\"Hello World!\">   readonly Xác định trường nhập chỉ đọc text, search, tel, url, email, password, date, month, week, time, datetime-local,                                 number, range, color <input type=\"text\" value=\"Hello World!\" readonly>    disable Xác định trường nhập bị vô hiệu hóa text, search, tel, url, email, password, date, month, week, time, datetime-local,                                 number, range, color, checkbox, radio, submit, reset, button <input type=\"text\" value=\"Hello World!\" disabled>    size Xác định kích thước của trường nhập text, search, tel, url, email, password <input type=\"text\" size=\"30\">   maxlength Xác định số kí tự tối đa được nhập vào trường nhập text, search, tel, url, email, password <input type=\"text\" maxlength=\"10\">   min/max Xác định giá trị tối thiểu/tối đa của trường nhập number, range, date, month, week, time, datetime-local <input type=\"number\" min=\"1\" max=\"10\">   multiple Xác định có cho phép chọn nhiều file hay không file <input type=\"file\" multiple>   pattern Xác định một biểu thức chính quy (regex) để kiểm tra giá trị của trường nhập text, search, tel, url, email <input type=\"text\" pattern=\"[A-Za-z]{3}\" title=\"3 kí tự chữ cái\">    placeholder Xác định một văn bản mẫu trong trường nhập text, search, tel, url, email, password <input type=\"text\" placeholder=\"Nhập tên của bạn\">    required Xác định trường nhập bắt buộc phải nhập text, search, tel, url, email, password, checkbox, radio, file, date, month, week, time,                                 datetime-local, number, range, color <input type=\"text\" required>   step Xác định bước nhảy của trường nhập number, range, date, month, week, time, datetime-local <input type=\"number\" step=\"2\">   autofocus Xác định trường nhập tự động được chọn khi trang được tải text, search, tel, url, email, password, date, month, week, time, datetime-local,                                 number, range, color <input type=\"text\" autofocus>   height/width Xác định chiều cao/rộng của trường nhập image <input type=\"image\" src=\"hinh-anh.png\" width=\"20\" height=\"20\">    list Xác định một danh sách giá trị cho trường nhập với giá trị list = id của datalist text, search, tel, url, email, password click để xem   autocomplete Xác định trường nhập có hỗ trợ tự động hoàn thành hay không text, search, tel, url, email, password <input type=\"text\" autocomplete=\"on\">"
    },
    {
        "title": "Thuộc tính form* của phần tử <input>",
        "content": "Thuộc tính form* của phần tử <input>  dưới đây là những thuộc tính form* của phần tử <input>    Thuộc tính Mô tả Áp dụng cho Ví dụ   form Xác định một form mà phần tử <input> thuộc về.                                 Thường áp dụng cho các phần tử <input> không                                 đặt trong cặp thẻ <form> và </form> nhưng vẫn là một phần của form đó. text, search, tel, url, email, password, date, month, week, time, datetime-local,                                 number, range, color, checkbox, radio, file, submit, reset, button, image <input form=\"form_name\">   formaction Xác định URL mà dữ liệu form sẽ được gửi đến khi nút submit được nhấn submit, image <input type=\"submit\" formaction=\"https://www.example.com\">    formenctype Xác định cách mã hóa dữ liệu form trước khi gửi đến máy chủ submit, image <input type=\"submit\" formenctype=\"application/x-www-form-urlencoded\">    formmethod Xác định phương thức HTTP mà form sẽ sử dụng khi gửi dữ liệu submit, image <input type=\"submit\" formmethod=\"get\">   formtarget Xác định cửa sổ hoặc khung mục tiêu mà dữ liệu form sẽ được hiển thị submit, image <input type=\"submit\" formtarget=\"_blank\">   formnovalidate Xác định không kiểm tra dữ liệu form trước khi gửi đến máy chủ. Phương pháp tương                             tự: thêm thuộc tính novalidate vào <form> submit, image <input type=\"submit\" formnovalidate>"
    },
    {
        "title": "Đồ họa trong HTML",
        "content": "Đồ họa trong HTML                  HTML cung cấp một số phần tử để hiển thị đồ họa trên trang web                           phần tử <canvas>  Phần tử <canvas> được sử dụng để vẽ đồ họa trên trang                         web Phần tử này không có nội dung mặc định. Bạn cần sử dụng JavaScript để vẽ hình ảnh                            phần tử <svg>  Phần tử <svg> được sử dụng để vẽ đồ họa vector trên                         trang web Phần tử này có thể chứa các hình ảnh, văn bản, đường, hình tròn, v.v. <svg width=\"100\" height=\"100\">     <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg>        So sánh SVG và Canvas                     SVG Canvas   Độ phân giải độc lập Canvas là một phần tử HTML   Hỗ trợ cho trình xử lý sự kiện Không hỗ trợ cho trình xử lý sự kiện   Chất lượng hình ảnh cao Chất lượng hình ảnh thấp   Chỉnh sửa dễ dàng Không thể chỉnh sửa   Không tốt cho ứng dụng game Tốt cho game đồ họa"
    },
    {
        "title": "phần tử <canvas>",
        "content": "phần tử <canvas>  Phần tử <canvas> được sử dụng để vẽ đồ họa trên trang                         web Phần tử này không có nội dung mặc định. Bạn cần sử dụng JavaScript để vẽ hình ảnh"
    },
    {
        "title": "phần tử <svg>",
        "content": "phần tử <svg>  Phần tử <svg> được sử dụng để vẽ đồ họa vector trên                         trang web Phần tử này có thể chứa các hình ảnh, văn bản, đường, hình tròn, v.v. <svg width=\"100\" height=\"100\">     <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg>"
    },
    {
        "title": "Đa phương tiện trong HTML",
        "content": "Đa phương tiện trong HTML                  HTML cung cấp một số phần tử để hiển thị đa phương tiện trên trang web Các phần tử đa phương tiện (như âm thanh hoặc video) được lưu trữ trong các tệp phương tiện. Cách phổ biến nhất để kiểm tra loại tệp là xem phần mở rộng của tệp. Tệp đa phương tiện có các định dạng và phần mở rộng khác nhau như: .wav, .mp3, .mp4, .mpg, .wmv,                     .avi. ... Các định dạng video phổ biến   Định dạng Phần mở rộng Mô tả   MPEG .mpg, .mpeg Được phát triển bởi Nhóm chuyên gia về Hình ảnh Chuyển động. Định dạng video phổ biến đầu                             tiên trên web. Không được hỗ trợ nữa trong HTML.   AVI .avi Được phát triển bởi Microsoft. Định dạng video phổ biến trên Windows. Không hoạt động trên                             trình duyệt web.   WMV .wmv Được phát triển bởi Microsoft. Định dạng video phổ biến trên Windows. Không hoạt động trên                             trình duyệt web.   QuickTime .mov Được phát triển bởi Apple. Định dạng video phổ biến trên Mac. Không hoạt động trên trình                             duyệt web.   RealVideo .rm, .ram Được phát triển bởi RealNetworks. Định dạng video phổ biến trước đây. Không hoạt động trên                             trình duyệt web.   Flash .swf, .flv Được phát triển bởi Macromedia. Yêu cầu trình duyệt có thành phần bổ xung (plug-in) để chạy.                            Ogg .ogg Định dạng video mã nguồn mở. Được hỗ trợ bởi trình duyệt web.   WebM .webm Định dạng video mã nguồn mở. Được hỗ trợ bởi trình duyệt web.   MPEG-4 hay MP4 .mp4 Được phát triển bởi Moving Pictures Expert Group. Định dạng video phổ biến trên web. Được hỗ                             trợ bởi hầu hết trình duyệt web.    Chú ý: Chỉ MP4, WebM, and Ogg được hỗ trợ để chạy trên trình duyệt.                  Các định dạng âm thanh phổ biến   Định dạng Phần mở rộng Mô tả   MIDI .mid, .midi Được phát triển bởi Roland. Định dạng âm thanh phổ biến trên web. Không được hỗ trợ trong                             HTML.   RealAudio .rm, .ram Được phát triển bởi RealNetworks. Định dạng âm thanh phổ biến trước đây. Không hoạt động                             trên trình duyệt web.   WMA .wma Được phát triển bởi Microsoft. Định dạng âm thanh phổ biến trên Windows. Không hoạt động                             trên trình duyệt web.   AAC .aac Phát triển bởi Apple, không hỗ trợ phát trên trình duyệt.   WAV .wav Được phát triển bởi IBM và Microsoft. Định dạng âm thanh phổ biến trên Windows. Được hỗ trợ                             bởi hầu hết trình duyệt web.   Ogg .ogg Định dạng âm thanh mã nguồn mở. Được hỗ trợ bởi trình duyệt web.   MP3 .mp3 Được phát triển bởi Moving Pictures Expert Group. Định dạng âm thanh phổ biến trên web. Được                             hỗ trợ bởi hầu hết trình duyệt web.   MP4 .mp4 Được phát triển bởi Moving Pictures Expert Group. Tuy là định dạng video nhưng có thể sử                             dụng để lưu trữ hình ảnh. Hỗ trợ bởi tất cả trình duyệt.    Chú ý: Chỉ MP3, WAV, and Ogg được hỗ trợ để chạy trên trình duyệt."
    },
    {
        "title": "Phần tử <video>",
        "content": "Phần tử <video>  Phần tử <video> được sử dụng để chèn video trên trang web                  Phần tử này không có nội dung mặc định. Bạn cần sử dụng các thuộc tính để chèn video <video width=\"640\" height=\"360\" controls>     <source src=\"movie.mp4\" type=\"video/mp4\">     <source src=\"movie.ogg\" type=\"video/ogg\">     Your browser does not support the video tag. </video>                             Your browser does not support the video tag.                       Trong ví dụ trên:  width và height xác định                         kích                         thước của video controls hiển thị thanh điều khiển video <source> xác định video và loại video Nếu trình duyệt không hỗ trợ video, văn bản trong thẻ <video> sẽ được hiển thị                             Thuộc tính autoplay  Thuộc tính autoplay tự động phát video khi trang web được tải                      <video width=\"640\" height=\"360\" autoplay>     <source src=\"movie.mp4\" type=\"video/mp4\">     <source src=\"movie.ogg\" type=\"video/ogg\">     Your browser does not support the video tag. </video>                                 Your browser does not support the video tag.                            Chú ý: Trình duyệt chạy trên nhân chromium (chrome, edge, opera, brave, v.v.) không hỗ                         trợ tự                         động phát video khi trang web được tải. Bạn cần tương tác với trang web để phát video."
    },
    {
        "title": "Thuộc tính autoplay",
        "content": "Thuộc tính autoplay  Thuộc tính autoplay tự động phát video khi trang web được tải                      <video width=\"640\" height=\"360\" autoplay>     <source src=\"movie.mp4\" type=\"video/mp4\">     <source src=\"movie.ogg\" type=\"video/ogg\">     Your browser does not support the video tag. </video>                                 Your browser does not support the video tag.                            Chú ý: Trình duyệt chạy trên nhân chromium (chrome, edge, opera, brave, v.v.) không hỗ                         trợ tự                         động phát video khi trang web được tải. Bạn cần tương tác với trang web để phát video."
    },
    {
        "title": "Phần tử <audio>",
        "content": "Phần tử <audio>  Phần tử <audio> được sử dụng để chèn âm thanh trên trang                     web Phần tử này không có nội dung mặc định. Bạn cần sử dụng các thuộc tính để chèn âm thanh <audio controls>     <source src=\"song.mp3\" type=\"audio/mpeg\">     <source src=\"song.ogg\" type=\"audio/ogg\">     Your browser does not support the audio tag. </audio>                             Your browser does not support the audio tag.                       Trong ví dụ trên:  controls hiển thị thanh điều khiển âm thanh <source> xác định âm thanh và loại âm thanh Nếu trình duyệt không hỗ trợ âm thanh, văn bản trong thẻ <audio> sẽ được hiển thị                             Thuộc tính autoplay  Thuộc tính autoplay tự động phát âm thanh khi trang web được                         tải                      <audio controls autoplay>     <source src=\"song.mp3\" type=\"audio/mpeg\">     <source src=\"song.ogg\" type=\"audio/ogg\">     Your browser does not support the audio tag. </audio>                                 Your browser does not support the audio tag.                            Chú ý: Trình duyệt chạy trên nhân chromium (chrome, edge, opera, brave, v.v.) không hỗ                         trợ tự                         động phát âm thanh khi trang web được tải. Bạn cần tương tác với trang web để phát âm thanh."
    },
    {
        "title": "Thuộc tính autoplay",
        "content": "Thuộc tính autoplay  Thuộc tính autoplay tự động phát âm thanh khi trang web được                         tải                      <audio controls autoplay>     <source src=\"song.mp3\" type=\"audio/mpeg\">     <source src=\"song.ogg\" type=\"audio/ogg\">     Your browser does not support the audio tag. </audio>                                 Your browser does not support the audio tag.                            Chú ý: Trình duyệt chạy trên nhân chromium (chrome, edge, opera, brave, v.v.) không hỗ                         trợ tự                         động phát âm thanh khi trang web được tải. Bạn cần tương tác với trang web để phát âm thanh."
    },
    {
        "title": "CSS là gì",
        "content": "CSS là gì CSS là viết tắt của cụm từ Cascading Style Sheets, dịch ra tiếng Việt có nghĩa là Bảng điều khiển kiểu                 mẫu. CSS là ngôn ngữ lập trình dùng để quy định cách hiển thị của các phần tử HTML trên trình duyệt. CSS                 giúp chúng ta tạo ra các trang web đẹp mắt, dễ đọc và dễ bảo trì."
    },
    {
        "title": "CSS",
        "content": "CSS  Cú pháp của CSS Cú pháp của CSS rất đơn giản, mỗi quy tắc CSS bao gồm 2 phần: một phần chọn phần tử HTML và một phần                     quy định cách hiển thị của phần tử đó. selector {     property1: value1;     property2: value2;     ... }  Trong đó:  selector: là phần chọn phần tử HTML. property: là thuộc tính của phần tử HTML. value: là giá trị của thuộc tính.                      Các khối lệnh CSS được bao bọc bởi cặp dấu ngoặc nhọn {}. Mỗi khối lệnh CSS được phân                     cách bởi dấu chấm phẩy ;.                  Ví dụ: Để định dạng thẻ <p> căn giữa và có màu chữ là đỏ ta có thể                     khai báo như sau p {     text-align: center;     color: red; }   Bộ chọn phần tử CSS (CSS selector) Bộ chọn phần tử CSS là cách chúng ta chọn phần tử HTML mà chúng ta muốn áp dụng CSS. Có nhiều cách                     chọn phần tử khác nhau, mỗi cách chọn phần tử sẽ áp dụng cho một trường hợp cụ thể. Dưới đây là một số bộ chọn phần tử phổ biến:  Bộ chọn đơn giản (Simple selector): chọn các thành phần dựa trên tên thẻ, id, class  Bộ chọn kết hợp (Combinator): chọn các thành phần dựa trên mối quan hệ giữa các thành phần Bộ chọn lớp giả (Pseudo-class selectors): chọn các yếu tố dựa trên một trạng thái nhất định                      Bộ chọn lớp giả phức tạp (Pseudo-element selectors): chọn một phần cụ thể của một phần tử Bộ chọn thuộc tính (Attribute selectors): chọn các phần tử dựa trên một hoặc nhiều thuộc tính                         của chúng                            Chọn phần tử theo tên thẻ                      Để chọn tất cả các thẻ <p> trong trang web, bạn có thể                         sử dụng bộ chọn phần tử đơn giản như sau: p {     color: red; }   Chọn phần tử theo id Để chọn một phần tử dựa trên id của nó, bạn có thể sử dụng dấu # trước tên id của                         phần tử đó. #header {     background-color: lightblue; }   Chọn phần tử theo class Để chọn một phần tử dựa trên class của nó, bạn có thể sử dụng dấu . trước tên class                         của phần tử đó. .container {     width: 100%; }   Kết hợp chọn theo tên + class Bạn cũng có thể kết hợp chọn phần tử theo tên thẻ và class của nó. p.container {     color: blue; }   Chọn chung tất cả các phần tử HTML Để chọn tất cả các phần tử HTML, bạn có thể sử dụng dấu *. * {     margin: 0;     padding: 0; }   Chọn nhóm các phần tử Để chọn một nhóm các phần tử, bạn có thể sử dụng dấu phẩy , để phân tách các bộ chọn                         phần tử. Thay vì code như sau h1 {     color: red; } h2 {     color: red; } h3 {     color: red; } Bạn có thể viết ngắn gọn hơn như sau h1, h2, h3 {     color: red; }    Làm sao để thêm CSS Có 3 cách để thêm CSS vào trang web:  CSS bên ngoài (external CSS) CSS nội bộ (internal CSS) CSS nội tuyến (inline CSS)   CSS bên ngoài (external CSS) Để thêm CSS bên ngoài, bạn cần tạo một tập tin CSS riêng biệt và sau đó liên kết tập tin CSS đó                         vào trang HTML bằng thẻ <link>. <link rel=\"stylesheet\" href=\"style.css\"> Mã HTML <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <link rel=\"stylesheet\" href=\"style.css\"> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html> Mã CSS body {     background-color: lightblue; }  h1 {     color: red; }  p {     margin-left: 20px; }  Lưu ý: Không được thêm khoảng trắng giữa giá trị(20) và đơn vị đo(px).                        CSS nội bộ (internal CSS) Để thêm CSS nội bộ, bạn cần sử dụng thẻ <style> trong thẻ                         <head>                         của trang HTML.                      <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <style>         body {             background-color: lightblue;         }          h1 {             color: red;         }          p {             margin-left: 20px;         }     </style> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html>   CSS nội tuyến (inline CSS) Để thêm CSS nội tuyến, bạn cần sử dụng thuộc tính style trong thẻ HTML. <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body style=\"background-color: lightblue;\">     <h1 style=\"color: red\">Đây là tiêu đề</h1>     <p style=\"margin-left: 20px\">Đây là nội dung</p> </body> </html>  Chú ý: nên hạn chế sử dụng CSS nội tuyến vì khó bảo trì và quản lý.                        Nhiều Style Sheets Nếu một số thuộc tính đã được xác định cho cùng một bộ chọn (phần tử) trong các biểu định kiểu                         khác nhau, thì giá trị từ biểu định kiểu đã đọc cuối cùng sẽ được sử dụng.  Để xác định thứ tự ưu tiên của các biểu định kiểu, bạn cần sắp xếp chúng theo thứ tự sau:   Thứ tự ưu tiên  Kiểu nội tuyến (inline style) có độ ưu tiên cao nhất. Kiểu nội bộ (internal style) và kiểu bên ngoài (external style) có độ ưu tiên thấp hơn. Kiểu mặc định (do trình duyệt định nhĩa) có độ ưu tiên thấp nhất.     Chú thích trong CSS Để chú thích trong CSS, bạn có thể sử dụng dấu /* để bắt đầu chú thích và dấu                     */                     để kết thúc chú thích.                                       Chú thích có thể đặt ở bất kỳ đâu trong file CSS, nó không ảnh hưởng đến việc hiển thị của trang                     web.                  /* Đây là chú thích */ selector {     property: value; /* Đây là chú thích 2 */ } /*     Đây là chú thích dài     với nhiều dòng */    Màu sắc trong CSS Trong CSS, màu sắc có thể được xác định bằng cách sử dụng tên màu, mã màu hoặc giá trị RGB.                      CSS hỗ trợ lên đến 140 tên màu chuẩn, bạn có thể xem danh sách tên màu tại w3schools.                   Màu nền Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                       <h1 style=\"background-color: lightblue;\">Đây là tiêu đề</h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>                         Màu chữ Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color.  <h1 style=\"color: red;\">Hello </h1> <p style=\"color: blue;\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aspernatur adipisci quidem pariatur eveniet, fugiat recusandae ducimus explicabo ipsa corrupti, nulla ratione mollitia inventore impedit, libero nesciunt cumque? Reprehenderit, assumenda aliquam.</p> <p style=\"color: green;\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia, beatae facilis, repellat atque eos suscipit a eligendi ea soluta veniam perspiciatis ipsam nulla delectus itaque facere, nemo at eveniet aliquam?</p>    Màu viền Để xác định màu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-color.                       <h1 style=\"border: 2px solid red;\">Hello </h1> <h1 style=\"border: 2px solid orange;\">Hello </h1> <h1 style=\"border: 2px solid yellow;\">Hello </h1>     Hiểu hơn về cách biểu thị màu  Hệ màu RGB RGB là viết tắt của Red, Green, Blue. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0 đến 255.                      Để xác định màu sắc bằng hệ màu RGB, bạn cần sử dụng giá trị RGB của màu đó.  <form oninput=\"result.value='rgb(' + red.value + ',' + green.value + ',' + blue.value + ')'; result.style.borderColor = 'rgb(' + red.value + ',' + green.value + ',' + blue.value + ')';\">      <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgb(0, 0, 0)</output> </form>   RGBA RGBA là viết tắt của Red, Green, Blue, Alpha. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0                         đến 255 và giá trị alpha từ 0 đến 1. Để xác định màu sắc bằng hệ màu RGBA, bạn cần sử dụng giá trị RGBA của màu đó.  <form oninput=\"result.value='rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')'; result.style.borderColor = 'rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')';\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"alpha\">Alpha</label>     <input type=\"range\" id=\"alpha\" name=\"alpha\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgba(0, 0, 0, 1)</output> </form>    Màu thập lục phân (hex color) Màu thập lục phân là một cách biểu diễn màu sắc bằng cách sử dụng mã màu thập lục phân. Mã màu                         thập lục phân bắt đầu bằng dấu # và sau đó là 6 ký tự thập lục phân. Mỗi ký tự thập lục phân có thể là một trong các giá trị sau:                         0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.                      Để xác định màu sắc bằng mã màu thập lục phân, bạn cần sử dụng mã màu thập lục phân của màu đó.                       <form oninput=\"updateColor()\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">#000000</output> </form>  <script> function updateColor() {     const red = parseInt(document.getElementById('red').value).toString(16).padStart(2, '0');     const green = parseInt(document.getElementById('green').value).toString(16).padStart(2, '0');     const blue = parseInt(document.getElementById('blue').value).toString(16).padStart(2, '0');     const color = `#${red}${green}${blue}`;     document.getElementById('result').style.borderColor = color;     document.getElementById('result').innerText = color; } </script>     Có thể bạn chưa biết:  màu thập lục phân thực tế cấu thành từ 3 phần: màu đỏ, màu xanh lá                         cây và màu xanh dương. Mỗi phần có giá trị từ 0 đến 255. Ví dụ: #FF0000 là màu đỏ, #00FF00 là                         màu xanh lá cây, #0000FF là màu xanh dương. Với mỗi màu được biểu diễn bằng 2 ký tự thập lục                         phân, giá trị của màu sẽ nằm trong khoảng từ 00 đến FF.                        Màu HSL HSL là viết tắt của Hue, Saturation, Lightness. Mỗi màu sắc được biểu diễn bằng một giá trị Hue                         từ 0 đến 360, giá trị Saturation từ 0% đến 100% và giá trị Lightness từ 0% đến 100%. Để xác định màu sắc bằng hệ màu HSL, bạn cần sử dụng giá trị HSL của màu đó.  <form oninput=\"result.value='hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)'; result.style.borderColor = 'hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)';\">     <label for=\"hue\">Hue</label>     <input type=\"range\" id=\"hue\" name=\"hue\" min=\"0\" max=\"360\" value=\"0\"><br>     <label for=\"saturation\">Saturation</label>     <input type=\"range\" id=\"saturation\" name=\"saturation\" min=\"0\" max=\"100\" value=\"0\"><br>     <label for=\"lightness\">Lightness</label>     <input type=\"range\" id=\"lightness\" name=\"lightness\" min=\"0\" max=\"100\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">hsl(0, 0%, 0%)</output> </form>     Nền trong CSS Để xác định hình nền cho một phần tử, bạn có thể sử dụng thuộc tính background. Thuộc tính background có thể chứa nhiều giá trị khác nhau như:  background-color background-image background-repeat background-attachment background-position   background-color Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                      <h1 style=\"background-color: lightblue;\">Hello </h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>     Độ trong suốt - với opacity Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính opacity.                      <h1 style=\"background-color: lightblue; opacity: 0.5;\">Hello </h1> <p style=\"background-color: lightgreen; opacity: 0.8;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: khi sử dụng thuộc tính opacity, tất cả các phần tử con của phần tử đó                         cũng sẽ bị ảnh hưởng bởi độ trong suốt (dẫn đến sự khó khăn trong việc đọc). Điều này có nghĩa                         là nếu bạn đặt độ trong suốt cho một phần tử cha, tất cả các phần tử con của phần tử đó cũng sẽ                         có độ trong suốt tương tự. Để tránh điều này, bạn có thể sử dụng thuộc tính rgba để                         xác định màu sắc với độ trong suốt.                        Độ trong suốt - với RGBA Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính rgba.                      <h1 style=\"background-color: rgba(173, 216, 230, 0.5);\">Hello </h1> <p style=\"background-color: rgba(144, 238, 144, 0.8);\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>    Nền bằng hình ảnh Để xác định hình ảnh làm nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-image.                      <h1 style=\"background-image: url('anh_nen.jpg'); color: white;\">Hello </h1> <p style=\"background-image: url('anh_nen.jpg'); color: white;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: hãy cố gắng chọn hình nền không có màu sắc gần giống với màu chữ để tránh việc làm                         người đọc KHÓ CHỊU VÔ CÙNG    Lặp hình nền Để xác định cách lặp hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-repeat.                      <h1 style=\"background-image: url('hinh-anh.png'); background-repeat: no-repeat; color: red;\">Hello </h1> <p style=\"background-image: url('hinh-anh.png'); background-repeat: repeat-x; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-repeat: repeat-y; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit eligendi, ea quos enim alias hic quis accusamus impedit architecto nulla minus placeat eum ad aperiam debitis tempora, iure dolor repellendus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis quo omnis accusantium quidem quis voluptatum dolorem a maxime magnam excepturi aut iusto consequatur animi, laboriosam numquam incidunt optio in cumque? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nulla distinctio esse beatae cupiditate minima doloribus quas laboriosam vitae commodi aliquid eveniet minus obcaecati, corporis, consequatur quae tenetur fugiat, consectetur quaerat.</p>   Lưu ý: thuộc tính background-repeat có thể nhận các giá trị sau:                          repeat: lặp hình ảnh theo cả chiều ngang và chiều dọc repeat-x: lặp hình ảnh theo chiều ngang repeat-y: lặp hình ảnh theo chiều dọc no-repeat: không lặp hình ảnh     Vị trí ảnh nền Để xác định vị trí của hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-position.                      <h1 style=\"background-image: url('cute.jpg'); background-position: center; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-position: right top; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-position: left bottom; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-position có thể nhận các giá trị sau:                          top: đặt hình ảnh ở trên cùng right: đặt hình ảnh ở bên phải bottom: đặt hình ảnh ở dưới cùng left: đặt hình ảnh ở bên trái center: đặt hình ảnh ở giữa      Đính kèm hình nền Để xác định cách hình nền cuộn theo phần tử, bạn có thể sử dụng thuộc tính                         background-attachment.                      <h1 style=\"background-image: url('cute.jpg'); background-attachment: scroll; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-attachment: fixed; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-attachment có thể nhận các giá trị sau:                          scroll: hình nền cuộn theo phần tử fixed: hình nền cố định       background - thuộc tính viết tắt                      Để xác định hình nền cho một phần tử, bạn có thể sử dụng thuộc tính background viết                         tắt.                      h1 {     background: lightblue url('cute.jpg') no-repeat right top;     color: white; }  Lưu ý: thuộc tính background viết tắt có thể chứa nhiều giá trị khác nhau                         như:                          background-color background-image background-repeat background-attachment background-position      Viền trong CSS Để xác định viền cho một phần tử, bạn có thể sử dụng thuộc tính border. Thuộc tính border có thể chứa nhiều giá trị khác nhau như:  border-width border-style border-color border-radius   border-width Để xác định độ rộng của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-width.                      <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 5px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: medium; border-style: dashed; \">Ví dụ 3</p>   Lưu ý: thuộc tính border-width có thể nhận các giá trị sau:                          thin: viền mảnh medium: viền trung bình thick: viền dày   Kích thước tùy chỉnh theo các cạnh Để xác định kích thước của viền cho từng cạnh của một phần tử, bạn có thể sử dụng các thuộc tính                         border-top-width, border-right-width,                         border-bottom-width, border-left-width.                      Hoặc có thể sử dụng thuộc tính border-width với giá trị theo thứ tự:                         top right bottom left.                      <p style=\"border-width: 2px 5px 10px 15px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-top-width: 2px; border-right-width: 5px; border-bottom-width: 10px; border-left-width: 15px; border-style: solid; \">Ví dụ 2</p>    border-style Để xác định kiểu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-style.                      Các giá trị của border-style:  none: không có viền hidden: viền ẩn dotted: viền chấm dashed: viền đứt solid: viền đậm double: viền đôi groove: viền rãnh ridge: viền đồi inset: viền lồi outset: viền lõm  <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 3</p> <p style=\"border-width: 2px; border-style: double; \">Ví dụ 4</p>    border-color Để xác định màu sắc của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-color.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; \">Ví dụ 3</p>    border-radius Để xác định độ cong của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-radius.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; border-radius: 2px; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; border-radius: 5px; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; border-radius: 10px; \">Ví dụ 3</p>    border - thuộc tính viết tắt Để xác định viền cho một phần tử, bạn có thể sử dụng thuộc tính border viết tắt.                       <p style=\"border: 2px solid red; border-radius: 5px;\">Ví dụ 1</p> <p style=\"border-top: 5px dotted blue; border-radius: 10px;\">Ví dụ 2</p> <p style=\"border-bottom: 10px dashed green; border-radius: 15px;\">Ví dụ 3</p>                           Margin trong CSS                  Để xác định khoảng cách giữa các phần tử, bạn có thể sử dụng thuộc tính margin. Thuộc tính margin có thể chứa nhiều giá trị khác nhau như:  margin-top margin-right margin-bottom margin-left  <p style=\"margin: 10px;\">Ví dụ 1 </p> <p style=\"margin: 10px 20px;\">Ví dụ 2 </p> <p style=\"margin: 10px 20px 30px;\">Ví dụ 3 </p> <p style=\"margin: 10px 20px 30px 40px;\">Ví dụ 4 </p>   Viết ngắn gọn Để viết ngắn gọn hơn, bạn có thể sử dụng các giá trị sau:  margin: (all)x; margin: (top & bottom)px (right & left)px; margin: (top)px (right & left)px (bottom)px; margin: (top)px (right)px (bottom)px (left)px;    Các giá trị của margin  auto: tự động căn giữa kích thước: giá trị số với đơn vị đo (px, em, rem, %, ...) inherit: kế thừa giá trị từ phần tử cha                          Padding trong CSS                  Để xác định khoảng cách giữa nội dung và viền của một phần tử, bạn có thể sử dụng thuộc tính                     padding.                  Thuộc tính padding có thể chứa nhiều giá trị khác nhau như:  padding-top padding-right padding-bottom padding-left  <p style=\"padding: 10px; border: 2px solid black;\">Ví dụ 1 </p> <p style=\"padding: 10px 20px; border: 2px solid black;\">Ví dụ 2 </p> <p style=\"padding: 10px 20px 30px; border: 2px solid black;\">Ví dụ 3 </p> <p style=\"padding: 10px 20px 30px 40px; border: 2px solid black;\">Ví dụ 4 </p>   Viết ngắn gọn Để viết ngắn gọn hơn, bạn có thể sử dụng các giá trị sau:  padding: (all)x; padding: (top & bottom)px (right & left)px; padding: (top)px (right & left)px (bottom)px; padding: (top)px (right)px (bottom)px (left)px;    Các giá trị của padding  kích thước: giá trị số với đơn vị đo (px, em, rem, %, ...) inherit: kế thừa giá trị từ phần tử cha                          Kích thước trong CSS                  Để xác định kích thước của một phần tử, bạn có thể sử dụng thuộc tính width và                     height.                  Thuộc tính width và height không bao gồm phần padding, border và margin của                     phần tử. Thuộc tính width và height có thể đặt các giá trị sau    Giá trị Mô tả   auto Phần tử sẽ tự động điều chỉnh kích thước   length Giá trị số với đơn vị đo (px, cm,...)   % Phần trăm của kích thước của phần tử cha   inherit Kế thừa giá trị từ phần tử cha   initial Đặt giá trị mặc định    <p style=\"width: 100px; height: 100px; border: 2px solid black;\">Ví dụ 1 </p> <p style=\"width: 200px; height: 200px; border: 2px solid black;\">Ví dụ 2 </p> <p style=\"width: 300px; height: 300px; border: 2px solid black;\">Ví dụ 3 </p> <p style=\"width: 400px; height: 400px; border: 2px solid black;\">Ví dụ 4 </p>   max-width Để xác định kích thước tối đa của một phần tử, bạn có thể sử dụng thuộc tính                         max-width.                      <p style=\"max-width: 100px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 200px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 300px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 400px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p>   Lưu ý:  nếu lỡ đặt kích thước width lớn hơn max-width, thì giá                         trị của max-width sẽ được ưu tiên.                          Box Model trong CSS Mỗi phần tử HTML được xem như một hộp, và mỗi hộp đó bao gồm 4 phần: margin,                     border, padding, và content.                  Kích thước tổng của phần tử sẽ được tính bằng cách:  width = content + padding + border  height = content + padding + border.                   Lưu ý: mặc dù thuộc tính margin không được tính vào kích thước tổng của phần tử,                     nhưng nó sẽ ảnh hưởng đến khoảng cách giữa các phần tử.                     Đường viền ngoài trong CSS Để xác định đường viền ngoài cho một phần tử, bạn có thể sử dụng thuộc tính outline. Thuộc tính outline có thể chứa nhiều giá trị khác nhau như:  outline-width outline-style outline-color  Các kiểu viền ngoài như:   none hidden dotted dashed solid double groove ridge inset outset  Mẫu các đường viền ngoài <p style=\"outline: 2px none black;\">None </p> <p style=\"outline: 2px hidden black;\">Hidden </p> <p style=\"outline: 2px dotted black;\">Dotted </p> <p style=\"outline: 2px dashed black;\">Dashed </p> <p style=\"outline: 2px solid black;\">Solid </p> <p style=\"outline: 2px double black;\">Double </p> <p style=\"outline: 2px groove black;\">Groove </p> <p style=\"outline: 2px ridge black;\">Ridge </p> <p style=\"outline: 2px inset black;\">Inset </p> <p style=\"outline: 2px outset black;\">Outset </p>    CSS văn bản Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng các thuộc tính sau:  color: màu chữ text-align: căn chỉnh chữ text-decoration: trang trí chữ text-transform: chuyển đổi chữ Text Spacing:                          text-indent: thụt lề đầu dòng letter-spacing: khoảng cách giữa các chữ cái word-spacing: khoảng cách giữa các từ line-height: chiều cao dòng white-space: khoảng trắng và ngắt dòng     color Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color. <p style=\"color: red;\">Ví dụ 1 </p> <p style=\"color: blue;\">Ví dụ 2 </p> <p style=\"color: green;\">Ví dụ 3 </p>    text-align Để xác định cách căn chỉnh chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-align.                      <p style=\"text-align: left;\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Facere autem perspiciatis aut minus excepturi explicabo temporibus. Suscipit totam minima, ipsum, eligendi sunt placeat voluptates odio ad unde impedit illum deserunt. </p> <p style=\"text-align: center;\">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Culpa enim natus maiores molestias reprehenderit quibusdam consectetur veniam placeat, incidunt quis voluptates illum perspiciatis similique dolorem facilis in, fugiat odit beatae. </p> <p style=\"text-align: right;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis asperiores velit tenetur. Quae vel est eos nisi id commodi pariatur consequuntur dolorem iure dignissimos, nostrum perferendis officia ratione possimus. Voluptate! </p> <p style=\"text-align: justify;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore tenetur consectetur veniam veritatis adipisci in beatae vel enim reprehenderit molestiae, esse id, aliquam obcaecati? Fugiat vero qui labore temporibus neque! </p>    text-decoration Để xác định kiểu trang trí chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-decoration.                      Các giá trị của text-decoration:  none: không trang trí underline: gạch chân overline: gạch trên line-through: gạch ngang blink: nhấp nháy  <p style=\"text-decoration: none;\">None </p> <p style=\"text-decoration: underline;\">Underline </p> <p style=\"text-decoration: overline;\">Overline </p> <p style=\"text-decoration: line-through;\">Line-through </p> <p style=\"text-decoration: blink red;\">Blink </p>   Lưu ý: giá trị blink không được hỗ trợ trên tất cả trình duyệt.                       Mẹo: mặc định giá trị thẻ a là text-decoration: underline; nên                         nếu muốn bỏ gạch chân, bạn cần xác định lại giá trị text-decoration: none;.                       Chú ý: bạn có thể bổ sung màu, độ dày, kiểu cho gạch chân bằng cách sử dụng thuộc tính                         text-decoration-color, text-decoration-thickness,                         text-decoration-style.                         Hoặc viết tắt như ví dụ sau text-decoration: underline 2px red dotted;    text-transform Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính text-transform.                      Các giá trị của text-transform:  none: Không thay đổi capitalize: In hoa kí tự đầu tiên của mỗi từ uppercase: In hoa tất cả các kí tự lowercase: In thường tất cả các kí tự  <p style=\"text-transform: none;\">Không thay đổi </p> <p style=\"text-transform: capitalize;\">In hoa kí tự đầu tiên của mỗi từ  </p> <p style=\"text-transform: uppercase;\">In hoa tất cả các kí tự </p> <p style=\"text-transform: lowercase;\">In thường tất cả các kí tự </p>    Text Spacing Để xác định khoảng cách giữa các chữ cái, từ, dòng, bạn có thể sử dụng các thuộc tính sau:  text-indent: thụt lề đầu dòng letter-spacing: khoảng cách giữa các chữ cái word-spacing: khoảng cách giữa các từ line-height: chiều cao dòng white-space: khoảng trắng và ngắt dòng   text-indent Để xác định thụt lề đầu dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             text-indent.                          <p style=\"text-indent: 50px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 100px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 150px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    letter-spacing Để xác định khoảng cách giữa các chữ cái cho một phần tử, bạn có thể sử dụng thuộc tính                             letter-spacing.                          <p style=\"letter-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    word-spacing Để xác định khoảng cách giữa các từ cho một phần tử, bạn có thể sử dụng thuộc tính                             word-spacing.                          <p style=\"word-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    line-height Để xác định chiều cao dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             line-height.                          <p style=\"line-height: 1;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 1.5;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 2;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    white-space Để xác định khoảng trắng và ngắt dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             white-space.                          Các giá trị của white-space:  normal: giữ nguyên khoảng trắng và ngắt dòng nowrap: không ngắt dòng pre: giữ nguyên khoảng trắng và ngắt dòng pre-line: giữ nguyên khoảng trắng và ngắt dòng pre-wrap: giữ nguyên khoảng trắng và ngắt dòng  <p style=\"white-space: normal;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: nowrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre-line;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. qqqqq </p> <p style=\"white-space: pre-wrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>      CSS Font Để xác chỉnh sửa phông chữ cho một phần tử, bạn có thể sử dụng các thuộc tính sau:  font-family: họ phông chữ font-size: kích thước chữ font-weight: độ đậm của chữ font-style: kiểu chữ font-variant: kiểu chữ font: viết tắt   font-family Để xác định họ phông chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-family.                                               Có nhiều họ phông chữ khác nhau, bạn có thể chọn một trong số đó để sử dụng cho phần tử của                         mình.                      Một vài họ phông chữ thông dụng    Họ phông chữ Mô tả Ví dụ   serif Phông chữ có chân  Times New Roman Georgia Garamond    sans-serif Phông chữ không chân  Arial Verdana Tahoma    monospace Đây là kiểu chữ có độ rộng của các con chữ là bằng nhau giúp mang lại cảm giác đều                                     đặn, mũm mĩm và khá hay ho.  Courier New Lucida Console Monaco JetBrains Mono    cursive Phông chữ thảo, có hình dạng giống chữ viết tay  Brush Script MT Comic Sans MS Lucida Handwriting    fantasy Mang sắc thái hiện đại, dùng nhiều cho ấn phẩm thiết kế, tiêu đề, nội dung  Impact Papyrus Copperplate     <p style=\"font-family: 'Arial', sans-serif;\">Arial </p> <p style=\"font-family: 'Verdana', sans-serif;\">Verdana </p> <p style=\"font-family: 'Tahoma', sans-serif;\">Tahoma </p> <p style=\"font-family: 'Times New Roman', serif;\">Times New Roman</p> <p style=\"font-family: 'Georgia', serif;\">Georgia</p> <p style=\"font-family: 'Garamond', serif;\">Garamond</p> <p style=\"font-family: 'Courier New', monospace;\">Courier New</p> <p style=\"font-family: 'Lucida Console', monospace;\">Lucida Console</p> <p style=\"font-family: 'Monaco', monospace;\">Monaco</p> <p style=\"font-family: 'JetBrains Mono', monospace;\">JetBrains Mono</p> <p style=\"font-family: 'Brush Script MT', cursive;\">Brush Script MT</p> <p style=\"font-family: 'Comic Sans MS', cursive;\">Comic Sans MS</p> <p style=\"font-family: 'Lucida Handwriting', cursive;\">Lucida Handwriting</p> <p style=\"font-family: 'Impact', fantasy;\">Impact</p> <p style=\"font-family: 'Papyrus', fantasy;\">Papyrus</p> <p style=\"font-family: 'Copperplate', fantasy;\">Copperplate</p>     font-size Để xác định kích thước chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-size.                      Có nhiều giá trị khác nhau cho font-size như:  xx-small x-small small medium large x-large xx-large smaller larger length: giá trị số với đơn vị đo (px, em, rem, ...) percentage: giá trị phần trăm  <p style=\"font-size: 12px;\">12px </p> <p style=\"font-size: 14px;\">14px </p> <p style=\"font-size: 16px;\">16px </p> <p style=\"font-size: xx-small;\">xx-small </p> <p style=\"font-size: x-small;\">x-small </p> <p style=\"font-size: small;\">small </p> <p style=\"font-size: medium;\">medium </p> <p style=\"font-size: large;\">large </p> <p style=\"font-size: x-large;\">x-large </p> <p style=\"font-size: xx-large;\">xx-large </p>    font-weight Để xác định độ đậm của chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         font-weight.                      Có nhiều giá trị khác nhau cho font-weight như:  normal bold bolder lighter 100 - 900  <p style=\"font-weight: normal;\">Normal </p> <p style=\"font-weight: bold;\">Bold </p> <p style=\"font-weight: bolder;\">Bolder </p> <p style=\"font-weight: lighter;\">Lighter </p> <p style=\"font-weight: 100;\">100 </p> <p style=\"font-weight: 200;\">200 </p> <p style=\"font-weight: 300;\">300 </p> <p style=\"font-weight: 400;\">400 </p> <p style=\"font-weight: 500;\">500 </p> <p style=\"font-weight: 600;\">600 </p> <p style=\"font-weight: 700;\">700 </p> <p style=\"font-weight: 800;\">800 </p> <p style=\"font-weight: 900;\">900 </p>   Chú ý: không phải tất cả các font chữ đều hỗ trợ đầy đủ các giá trị của                         font-weight.                         nếu chữ chỉ có 2 dạng 400(regular) và 700(bold) thì giá trị 100, 200, 300, 500, 600, 800, 900 sẽ                         không có hiệu lực, trình duyệt sẽ tự động chọn giá trị gần nhất.                        font-style Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-style. Có nhiều giá trị khác nhau cho font-style như:  normal italic oblique  <p style=\"font-style: normal;\">Normal </p> <p style=\"font-style: italic;\">Italic </p> <p style=\"font-style: oblique;\">Oblique </p>   Lưu ý: giá trị oblique sẽ nghiêng chữ hơn so với giá trị                         italic.                        font-variant Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-variant.                      Có nhiều giá trị khác nhau cho font-variant như:  normal small-caps  <p style=\"font-variant: normal;\">Normal </p> <p style=\"font-variant: small-caps;\">Small-caps </p>   Lưu ý: giá trị small-caps sẽ chuyển tất cả các chữ cái thành chữ in hoa và                         giữ nguyên kích thước.                        font Để viết tắt cho các thuộc tính font-family, font-size,                         font-weight, font-style, font-variant, bạn có thể sử dụng                         thuộc tính font.                      Cú pháp:                         font: font-style font-variant font-weight font-size/line-height font-family;  <p style=\"font: italic small-caps bold 16px/30px 'Arial', sans-serif;\">Italic Small-caps Bold 16px/30px Arial</p>   Trong đó:                           italic: kiểu chữ                          small-caps: kiểu chữ                          bold: độ đậm của chữ                          16px: kích thước chữ                          30px: chiều cao dòng                          Arial: họ phông chữ                          sans-serif: họ phông chữ thay thế nếu Arial không tồn tại                                              icon trong CSS                  Để thêm icon vào trang web, bạn có thể sử dụng các icon có sẵn từ thư viện hoặc tạo icon của riêng                     mình.                      thông thường biểu tượng trong các thư viện được thêm bằng cách sử dụng thẻ <i>                     hoặc <span> và thêm class tương ứng.                  Các thư viện icon phổ biến như  Font Awesome Booststrap Icons  Google Icons   Thư viện Fonts Awesome Để sử dụng icon từ thư viện Fonts Awesome, bạn cần thêm thẻ <script> vào phần                         <head> của trang web.                      <script src=\"https://kit.fontawesome.com/code của bạn.js\" crossorigin=\"anonymous\"></script>  Lưu ý: bạn cần đăng ký tài khoản và lấy mã code từ trang chủ của Fonts Awesome.                      Sau đó, bạn có thể sử dụng icon bằng cách thêm class fas hoặc far hoặc                         fab và thêm class icon cần sử dụng.                      <i class=\"fas fa-home\"></i> <i class=\"far fa-user\"></i> <i class=\"fab fa-facebook\"></i>    Thư viện icon của Booststrap Để sử dụng icon từ thư viện của Booststrap, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class glyphicon và thêm class icon                         cần sử dụng. <span class=\"glyphicon glyphicon-home\"></span> <span class=\"glyphicon glyphicon-user\"></span> <span class=\"glyphicon glyphicon-envelope\"></span>    Thư viện icon của google Để sử dụng icon từ thư viện của google, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class material-icons và thêm nội dung                         là tên icon cần sử dụng. <i class=\"material-icons\">home</i> <i class=\"material-icons\">person</i> <i class=\"material-icons\">email</i>     Liên kết với CSS                      Đường dẫn có thể được áp dụng nhiều kiểu khác nhau, như màu sắc, phông, nền ...                                       Có một số trạng thái của liên kết như:                   :link: liên kết chưa được truy cập :visited: liên kết đã được truy cập :hover: khi di chuột qua liên kết :active: khi liên kết đang được nhấn  a:link {     color: red; }  a:visited {     color: green; }  a:hover {     color: blue; }  a:active {     color: yellow; } <a href=\"https://example.com\">Đây là một liên kết mẫu</a>   Lưu ý:                               Nếu bạn chưa truy cập vào liên kết, nó sẽ có màu đỏ.                                                       Nếu bạn đã truy cập vào liên kết, nó sẽ có màu xanh.                                                       Khi di chuột qua liên kết, nó sẽ có màu xanh dương.                                                       Khi nhấn vào liên kết, nó sẽ có màu vàng. (Bạn sẽ nhìn thấy rõ hơn khi nhấn giữ)                                               Thứ tự của các trạng thái liên kết cần được tuân thủ theo thứ tự sau: :link -                     :visited - :hover - :active.                     Nếu bạn không chỉ định tên trạng thái thì trình duyệt sẽ áp dụng cho đến gặp trạng thái tiếp theo.                   Mẹo: bạn có thể sử dụng thuộc tính text-decoration để bỏ gạch chân cho liên kết.                                       Ngoài ra bạn có thể kết hợp với các thuộc tính khác như font-size,                     font-weight, font-style, text-transform,                     text-decoration... để tạo ra hiệu ứng đẹp mắt cho liên kết.                  Tạo một nút từ link <a href=\"#\" class=\"btn\">Đây là một nút mẫu</a> a.btn {     display: inline-block;     padding: 10px 20px;     background-color: red;     color: black;     text-decoration: none;     font-size: 16px;     border: 1px solid black;     border-radius: 5px; } a.btn:hover {     background-color: blue; } .btn:active {     background-color: green; }  Con trỏ Để thay đổi kiểu con trỏ khi di chuột qua một phần tử, bạn có thể sử dụng thuộc tính                     cursor.                  bạn có thể tham khảo một vài biểu tượng con trỏ trong bảng sau'                    Con trỏ Mô tả Mã nguồn Kết quả   default Con trỏ mặc định cursor: default; default   pointer Con trỏ hình bàn tay cursor: pointer; pointer   move Con trỏ hình mũi tên 4 hướng cursor: move; move   text Con trỏ hình I cursor: text; text   wait Con trỏ hình đồng hồ cát hoặc biểu tượng xoay vòng cursor: wait; wait   help Con trỏ hình biểu tượng chú thích cursor: help; help   not-allowed Con trỏ hình dấu chéo cursor: not-allowed; not-allowed   crosshair Con trỏ hình chữ thập cursor: crosshair; crosshair   col-resize Con trỏ hình mũi tên ngang cursor: col-resize; col-resize   row-resize Con trỏ hình mũi tên dọc cursor: row-resize; row-resize   ew-resize Con trỏ hình mũi tên ngang kéo dãn cursor: ew-resize; ew-resize   ns-resize Con trỏ hình mũi tên dọc kéo dãn cursor: ns-resize; ns-resize   nesw-resize Con trỏ hình mũi tên chéo từ trên xuống dưới cursor: nesw-resize; nesw-resize   nwse-resize Con trỏ hình mũi tên chéo từ dưới lên trên cursor: nwse-resize; nwse-resize   zoom-in Con trỏ hình biểu tượng phóng to cursor: zoom-in; zoom-in   zoom-out Con trỏ hình biểu tượng thu nhỏ cursor: zoom-out; zoom-out   grab Con trỏ hình bàn tay cursor: grab; grab      Danh sách CSS Để tạo danh sách trong CSS, bạn có thể sử dụng các thuộc tính sau:  list-style-type: kiểu danh sách list-style-image: hình ảnh cho danh sách list-style-position: vị trí của danh sách list-style: viết tắt   list-style-type Để xác định kiểu danh sách, bạn có thể sử dụng thuộc tính list-style-type. Có nhiều kiểu danh sách khác nhau như:  disc: hình tròn circle: hình tròn rỗng square: hình vuông decimal: số thập phân decimal-leading-zero: số thập phân với số 0 ở đầu lower-roman: số la mã thường upper-roman: số la mã hoa lower-alpha: chữ cái thường upper-alpha: chữ cái hoa none: không có kiểu danh sách  <strong>disc<strong> <ul style=\"list-style-type: disc;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>circle<strong> <ul style=\"list-style-type: circle;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>square<strong> <ul style=\"list-style-type: square;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>decimal<strong> <ol style=\"list-style-type: decimal;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>decimal-leading-zero<strong> <ol style=\"list-style-type: decimal-leading-zero;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-roman<strong> <ol style=\"list-style-type: lower-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-roman<strong> <ol style=\"list-style-type: upper-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-alpha<strong> <ol style=\"list-style-type: lower-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-alpha<strong> <ol style=\"list-style-type: upper-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>none<strong> <ul style=\"list-style-type: none;\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style-image Để thêm hình ảnh cho danh sách, bạn có thể sử dụng thuộc tính list-style-image. <ul style=\"list-style-image: url('htm5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style-position Để xác định vị trí của danh sách, bạn có thể sử dụng thuộc tính list-style-position.                      Có 2 giá trị cho list-style-position:  inside: danh sách sẽ được hiển thị bên trong phần tử cha outside: danh sách sẽ được hiển thị bên ngoài phần tử cha  <ul style=\"list-style-position: inside;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <ul style=\"list-style-position: outside;\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style Để viết tắt cho các thuộc tính list-style-type, list-style-image,                         list-style-position, bạn có thể sử dụng thuộc tính list-style.                      Cú pháp:                         list-style: list-style-type list-style-position list-style-image;  <ul style=\"list-style: square inside url('html5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>   Trong đó:                           square: kiểu danh sách (xác định kiểu sẽ dùng khi ảnh bị lỗi)                         inside: vị trí của danh sách                          url('html5small.png'): hình ảnh cho danh sách                        Định kiểu cho các item                          bạn có thể định kiểu cho item bằng bộ chọn ul li hoặc ol li trong CSS.                      ol { list-style-type: decimal-leading-zero; background-color: red; padding: 10px; color: aqua; }                          ol li {     color: red;     background-color: white;     font-size: 16px;     font-weight: bold;     margin: 5px; } <ol>     <li>Item 1</li>     <li>Item 2</li> </ol>     Định dạng bảng trong CSS Để tạo bảng trong CSS, bạn có thể sử dụng các thuộc tính sau:  border: xác định kiểu viền của bảng border-collapse: xác định cách thức hiển thị đường viền của bảng border-spacing: xác định khoảng cách giữa các ô của bảng caption-side: xác định vị trí của tiêu đề bảng table-layout: xác định cách thức hiển thị bảng   border Để xác định kiểu viền của bảng, bạn có thể sử dụng thuộc tính border. Có 3 giá trị cho border:  border-width: độ rộng của đường viền border-style: kiểu của đường viền border-color: màu sắc của đường viền  table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>                           Để bảng hiện kích thước bằng phần tử cha có thể thêm thuộc tính width: 100% vào                         bảng.                        border-collapse Để xác định cách thức hiển thị đường viền của bảng, bạn có thể sử dụng thuộc tính                         border-collapse.                      Có 2 giá trị cho border-collapse:  separate: đường viền sẽ hiển thị riêng biệt cho mỗi ô collapse: đường viền sẽ hiển thị chung cho các ô  table, th, td {     border: 1px solid black; } table {     border-collapse: collapse; } <table style=\"width: 100%;\">     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    Kích thước bảng Để xác định kích thước của bảng, bạn có thể sử dụng thuộc tính width và                         height.                        border-spacing Để xác định khoảng cách giữa các ô của bảng, bạn có thể sử dụng thuộc tính                         border-spacing.                      table {     border-collapse: separate;     border-spacing: 10px; }     table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    caption-side Để xác định vị trí của tiêu đề bảng, bạn có thể sử dụng thuộc tính caption-side. Có 4 giá trị cho caption-side:  top: tiêu đề bảng sẽ hiển thị ở trên cùng bottom: tiêu đề bảng sẽ hiển thị ở dưới cùng  table {     border-collapse: collapse; } caption {     caption-side: bottom; } table, th, td {     border: 1px solid black; } <table>     <caption>Tiêu đề bảng</caption>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    table-layout Để xác định cách thức hiển thị bảng, bạn có thể sử dụng thuộc tính table-layout. Có 2 giá trị cho table-layout:  auto: bảng sẽ tự động điều chỉnh kích thước của cột fixed: bảng sẽ giữ nguyên kích thước của cột  table {     table-layout: fixed;     width: 25%; } table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    Căn chỉnh văn bản trong ô Để căn chỉnh văn bản trong ô, bạn có thể sử dụng các thuộc tính sau:  text-align: căn chỉnh văn bản theo chiều ngang vertical-align: căn chỉnh văn bản theo chiều dọc    Lưu ý: bạn có thể sử dụng thêm các thuộc tính khác như background-color,                     color, font-size, font-weight, font-style,                     text-transform, text-decoration... để tạo ra hiệu ứng đẹp mắt cho bảng.                   Có thể bạn đã quên: trong bài học về HTML đã có nói về cách tạo bảng, bạn có thể tham khảo                     tại đây.                    CSS display Thuộc tính display xác định cách thức hiển thị của một phần tử. Có một số giá trị cho thuộc tính display:    Giá trị Mô tả   block Hiển thị phần tử như một khối   inline Hiển thị phần tử như một dòng   inline-block Hiển thị phần tử như một dòng nhưng có thể thiết lập chiều rộng và chiều cao   none Ẩn phần tử   flex Hiển thị phần tử như một container linh hoạt   inline-flex Hiển thị phần tử như một container linh hoạt nhưng như một dòng   grid Hiển thị phần tử như một container lưới   inline-grid Hiển thị phần tử như một container lưới nhưng như một dòng   table Hiển thị phần tử như một bảng   inline-table Hiển thị phần tử như một bảng nhưng như một dòng   table-cell Hiển thị phần tử như một ô trong bảng   table-row Hiển thị phần tử như một hàng trong bảng   table-row-group Hiển thị phần tử như một nhóm hàng trong bảng   table-column Hiển thị phần tử như một cột trong bảng   table-column-group Hiển thị phần tử như một nhóm cột trong bảng   table-header-group Hiển thị phần tử như một nhóm tiêu đề trong bảng   table-footer-group Hiển thị phần tử như một nhóm chân trong bảng   list-item Hiển thị phần tử như một mục trong danh sách   run-in Hiển thị phần tử như một phần tử block hoặc inline tùy thuộc vào ngữ cảnh     Chú ý: bạn có thể thay đổi giá trị của thuộc tính display sao cho phù hợp với                     thiết kế của bạn.                   display: none; Thuộc tính display: none; sẽ ẩn phần tử. .hide {     display: none; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p>                     <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt. Điều này giúp bạn ẩn phần tử mà                         không cần xóa nó khỏi mã nguồn.                        visibility: hidden; Thuộc tính visibility: hidden; sẽ ẩn phần tử nhưng không ảnh hưởng đến không gian                         của phần tử. .hide {     visibility: hidden; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p> <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt nhưng vẫn chiếm không gian trên                         trang web.                         Position trong CSS Thuộc tính position xác định cách thức hiển thị của một phần tử. Có một số giá trị cho thuộc tính position:    Giá trị Mô tả   static Phần tử sẽ hiển thị theo cách mặc định, không chịu ảnh hưởng bởi những thuộc tính                                 top, bottom, left, right    relative Phần tử sẽ hiển thị tương đối so với vị trí mặc định.   absolute Phần tử sẽ hiển thị tuyệt đối so với phần tử cha   fixed Phần tử sẽ hiển thị tuyệt đối so với cửa sổ trình duyệt   sticky Phần tử sẽ hiển thị tương đối so với vị trí mặc định nhưng sẽ trở thành tuyệt đối khi                                 cuộn trang    mã nguồn cho các thẻ trên .static {     position: static;     border: 1px solid black;     width: 200px;     height: 100px;     padding: 10px;     margin: 10px; }  .relative {     position: relative;     border: 1px solid black;     padding: 10px;     margin: 10px;     width: 200px;     height: 150px;     left: 20px; }  .absolute {     position: absolute;     border: 1px solid black;     padding: 10px;     margin: 10px; }  .fixed {     position: fixed;     border: 1px solid black;     padding: 10px;     margin: 10px;     bottom: 0;     right: 0; }  .sticky {     background-color: red;     position: sticky;     border: 1px solid black;     width: 200px;     padding: 10px;     margin: 10px;     top: 0; }                       <div class=\"static\"> static</div> <div class=\"relative\"> relative <div class=\"sticky\"> sticky</div>     <div class=\"absolute\"> absolute</div> </div> <div class=\"fixed\"> fixed</div>                                           Z-index Thuộc tính z-index xác định thứ tự hiển thị của các phần tử. Giá trị của z-index phải là số nguyên. Phần tử có giá trị z-index lớn hơn                     sẽ hiển thị trên phần tử có giá trị z-index nhỏ hơn. .div1 {     position: fixed;     left: 10px;     top: 10px;     width: 100px;     height: 100px;     background-color: red;     z-index: 1; } .div2 {     position: fixed;     left: 20px;     top: 20px;     width: 100px;     height: 100px;     background-color: green;     z-index: 0; } .div3 {     position: fixed;     left: 40px;     top: 40px;     width: 100px;     height: 100px;     background-color: blue;     z-index: 2; }  <div class=\"div1\"></div> <div class=\"div2\"></div> <div class=\"div3\"></div>"
    },
    {
        "title": "Cú pháp của CSS",
        "content": "Cú pháp của CSS Cú pháp của CSS rất đơn giản, mỗi quy tắc CSS bao gồm 2 phần: một phần chọn phần tử HTML và một phần                     quy định cách hiển thị của phần tử đó. selector {     property1: value1;     property2: value2;     ... }  Trong đó:  selector: là phần chọn phần tử HTML. property: là thuộc tính của phần tử HTML. value: là giá trị của thuộc tính.                      Các khối lệnh CSS được bao bọc bởi cặp dấu ngoặc nhọn {}. Mỗi khối lệnh CSS được phân                     cách bởi dấu chấm phẩy ;.                  Ví dụ: Để định dạng thẻ <p> căn giữa và có màu chữ là đỏ ta có thể                     khai báo như sau p {     text-align: center;     color: red; }"
    },
    {
        "title": "Bộ chọn phần tử CSS (CSS selector)",
        "content": "Bộ chọn phần tử CSS (CSS selector) Bộ chọn phần tử CSS là cách chúng ta chọn phần tử HTML mà chúng ta muốn áp dụng CSS. Có nhiều cách                     chọn phần tử khác nhau, mỗi cách chọn phần tử sẽ áp dụng cho một trường hợp cụ thể. Dưới đây là một số bộ chọn phần tử phổ biến:  Bộ chọn đơn giản (Simple selector): chọn các thành phần dựa trên tên thẻ, id, class  Bộ chọn kết hợp (Combinator): chọn các thành phần dựa trên mối quan hệ giữa các thành phần Bộ chọn lớp giả (Pseudo-class selectors): chọn các yếu tố dựa trên một trạng thái nhất định                      Bộ chọn lớp giả phức tạp (Pseudo-element selectors): chọn một phần cụ thể của một phần tử Bộ chọn thuộc tính (Attribute selectors): chọn các phần tử dựa trên một hoặc nhiều thuộc tính                         của chúng                            Chọn phần tử theo tên thẻ                      Để chọn tất cả các thẻ <p> trong trang web, bạn có thể                         sử dụng bộ chọn phần tử đơn giản như sau: p {     color: red; }   Chọn phần tử theo id Để chọn một phần tử dựa trên id của nó, bạn có thể sử dụng dấu # trước tên id của                         phần tử đó. #header {     background-color: lightblue; }   Chọn phần tử theo class Để chọn một phần tử dựa trên class của nó, bạn có thể sử dụng dấu . trước tên class                         của phần tử đó. .container {     width: 100%; }   Kết hợp chọn theo tên + class Bạn cũng có thể kết hợp chọn phần tử theo tên thẻ và class của nó. p.container {     color: blue; }   Chọn chung tất cả các phần tử HTML Để chọn tất cả các phần tử HTML, bạn có thể sử dụng dấu *. * {     margin: 0;     padding: 0; }   Chọn nhóm các phần tử Để chọn một nhóm các phần tử, bạn có thể sử dụng dấu phẩy , để phân tách các bộ chọn                         phần tử. Thay vì code như sau h1 {     color: red; } h2 {     color: red; } h3 {     color: red; } Bạn có thể viết ngắn gọn hơn như sau h1, h2, h3 {     color: red; }"
    },
    {
        "title": "Chọn phần tử theo tên thẻ",
        "content": "Chọn phần tử theo tên thẻ                      Để chọn tất cả các thẻ <p> trong trang web, bạn có thể                         sử dụng bộ chọn phần tử đơn giản như sau: p {     color: red; }"
    },
    {
        "title": "Chọn phần tử theo id",
        "content": "Chọn phần tử theo id Để chọn một phần tử dựa trên id của nó, bạn có thể sử dụng dấu # trước tên id của                         phần tử đó. #header {     background-color: lightblue; }"
    },
    {
        "title": "Chọn phần tử theo class",
        "content": "Chọn phần tử theo class Để chọn một phần tử dựa trên class của nó, bạn có thể sử dụng dấu . trước tên class                         của phần tử đó. .container {     width: 100%; }"
    },
    {
        "title": "Kết hợp chọn theo tên + class",
        "content": "Kết hợp chọn theo tên + class Bạn cũng có thể kết hợp chọn phần tử theo tên thẻ và class của nó. p.container {     color: blue; }"
    },
    {
        "title": "Chọn chung tất cả các phần tử HTML",
        "content": "Chọn chung tất cả các phần tử HTML Để chọn tất cả các phần tử HTML, bạn có thể sử dụng dấu *. * {     margin: 0;     padding: 0; }"
    },
    {
        "title": "Chọn nhóm các phần tử",
        "content": "Chọn nhóm các phần tử Để chọn một nhóm các phần tử, bạn có thể sử dụng dấu phẩy , để phân tách các bộ chọn                         phần tử. Thay vì code như sau h1 {     color: red; } h2 {     color: red; } h3 {     color: red; } Bạn có thể viết ngắn gọn hơn như sau h1, h2, h3 {     color: red; }"
    },
    {
        "title": "Làm sao để thêm CSS",
        "content": "Làm sao để thêm CSS Có 3 cách để thêm CSS vào trang web:  CSS bên ngoài (external CSS) CSS nội bộ (internal CSS) CSS nội tuyến (inline CSS)   CSS bên ngoài (external CSS) Để thêm CSS bên ngoài, bạn cần tạo một tập tin CSS riêng biệt và sau đó liên kết tập tin CSS đó                         vào trang HTML bằng thẻ <link>. <link rel=\"stylesheet\" href=\"style.css\"> Mã HTML <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <link rel=\"stylesheet\" href=\"style.css\"> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html> Mã CSS body {     background-color: lightblue; }  h1 {     color: red; }  p {     margin-left: 20px; }  Lưu ý: Không được thêm khoảng trắng giữa giá trị(20) và đơn vị đo(px).                        CSS nội bộ (internal CSS) Để thêm CSS nội bộ, bạn cần sử dụng thẻ <style> trong thẻ                         <head>                         của trang HTML.                      <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <style>         body {             background-color: lightblue;         }          h1 {             color: red;         }          p {             margin-left: 20px;         }     </style> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html>   CSS nội tuyến (inline CSS) Để thêm CSS nội tuyến, bạn cần sử dụng thuộc tính style trong thẻ HTML. <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body style=\"background-color: lightblue;\">     <h1 style=\"color: red\">Đây là tiêu đề</h1>     <p style=\"margin-left: 20px\">Đây là nội dung</p> </body> </html>  Chú ý: nên hạn chế sử dụng CSS nội tuyến vì khó bảo trì và quản lý.                        Nhiều Style Sheets Nếu một số thuộc tính đã được xác định cho cùng một bộ chọn (phần tử) trong các biểu định kiểu                         khác nhau, thì giá trị từ biểu định kiểu đã đọc cuối cùng sẽ được sử dụng.  Để xác định thứ tự ưu tiên của các biểu định kiểu, bạn cần sắp xếp chúng theo thứ tự sau:   Thứ tự ưu tiên  Kiểu nội tuyến (inline style) có độ ưu tiên cao nhất. Kiểu nội bộ (internal style) và kiểu bên ngoài (external style) có độ ưu tiên thấp hơn. Kiểu mặc định (do trình duyệt định nhĩa) có độ ưu tiên thấp nhất."
    },
    {
        "title": "CSS bên ngoài (external CSS)",
        "content": "CSS bên ngoài (external CSS) Để thêm CSS bên ngoài, bạn cần tạo một tập tin CSS riêng biệt và sau đó liên kết tập tin CSS đó                         vào trang HTML bằng thẻ <link>. <link rel=\"stylesheet\" href=\"style.css\"> Mã HTML <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <link rel=\"stylesheet\" href=\"style.css\"> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html> Mã CSS body {     background-color: lightblue; }  h1 {     color: red; }  p {     margin-left: 20px; }  Lưu ý: Không được thêm khoảng trắng giữa giá trị(20) và đơn vị đo(px)."
    },
    {
        "title": "CSS nội bộ (internal CSS)",
        "content": "CSS nội bộ (internal CSS) Để thêm CSS nội bộ, bạn cần sử dụng thẻ <style> trong thẻ                         <head>                         của trang HTML.                      <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title>     <style>         body {             background-color: lightblue;         }          h1 {             color: red;         }          p {             margin-left: 20px;         }     </style> </head> <body>     <h1>Đây là tiêu đề</h1>     <p>Đây là nội dung</p> </body> </html>"
    },
    {
        "title": "CSS nội tuyến (inline CSS)",
        "content": "CSS nội tuyến (inline CSS) Để thêm CSS nội tuyến, bạn cần sử dụng thuộc tính style trong thẻ HTML. <!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Document</title> </head> <body style=\"background-color: lightblue;\">     <h1 style=\"color: red\">Đây là tiêu đề</h1>     <p style=\"margin-left: 20px\">Đây là nội dung</p> </body> </html>  Chú ý: nên hạn chế sử dụng CSS nội tuyến vì khó bảo trì và quản lý."
    },
    {
        "title": "Nhiều Style Sheets",
        "content": "Nhiều Style Sheets Nếu một số thuộc tính đã được xác định cho cùng một bộ chọn (phần tử) trong các biểu định kiểu                         khác nhau, thì giá trị từ biểu định kiểu đã đọc cuối cùng sẽ được sử dụng.  Để xác định thứ tự ưu tiên của các biểu định kiểu, bạn cần sắp xếp chúng theo thứ tự sau:"
    },
    {
        "title": "Thứ tự ưu tiên",
        "content": "Thứ tự ưu tiên  Kiểu nội tuyến (inline style) có độ ưu tiên cao nhất. Kiểu nội bộ (internal style) và kiểu bên ngoài (external style) có độ ưu tiên thấp hơn. Kiểu mặc định (do trình duyệt định nhĩa) có độ ưu tiên thấp nhất."
    },
    {
        "title": "Chú thích trong CSS",
        "content": "Chú thích trong CSS Để chú thích trong CSS, bạn có thể sử dụng dấu /* để bắt đầu chú thích và dấu                     */                     để kết thúc chú thích.                                       Chú thích có thể đặt ở bất kỳ đâu trong file CSS, nó không ảnh hưởng đến việc hiển thị của trang                     web.                  /* Đây là chú thích */ selector {     property: value; /* Đây là chú thích 2 */ } /*     Đây là chú thích dài     với nhiều dòng */"
    },
    {
        "title": "Màu sắc trong CSS",
        "content": "Màu sắc trong CSS Trong CSS, màu sắc có thể được xác định bằng cách sử dụng tên màu, mã màu hoặc giá trị RGB.                      CSS hỗ trợ lên đến 140 tên màu chuẩn, bạn có thể xem danh sách tên màu tại w3schools.                   Màu nền Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                       <h1 style=\"background-color: lightblue;\">Đây là tiêu đề</h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>                         Màu chữ Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color.  <h1 style=\"color: red;\">Hello </h1> <p style=\"color: blue;\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aspernatur adipisci quidem pariatur eveniet, fugiat recusandae ducimus explicabo ipsa corrupti, nulla ratione mollitia inventore impedit, libero nesciunt cumque? Reprehenderit, assumenda aliquam.</p> <p style=\"color: green;\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia, beatae facilis, repellat atque eos suscipit a eligendi ea soluta veniam perspiciatis ipsam nulla delectus itaque facere, nemo at eveniet aliquam?</p>    Màu viền Để xác định màu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-color.                       <h1 style=\"border: 2px solid red;\">Hello </h1> <h1 style=\"border: 2px solid orange;\">Hello </h1> <h1 style=\"border: 2px solid yellow;\">Hello </h1>"
    },
    {
        "title": "Màu nền",
        "content": "Màu nền Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                       <h1 style=\"background-color: lightblue;\">Đây là tiêu đề</h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>"
    },
    {
        "title": "Màu chữ",
        "content": "Màu chữ Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color.  <h1 style=\"color: red;\">Hello </h1> <p style=\"color: blue;\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aspernatur adipisci quidem pariatur eveniet, fugiat recusandae ducimus explicabo ipsa corrupti, nulla ratione mollitia inventore impedit, libero nesciunt cumque? Reprehenderit, assumenda aliquam.</p> <p style=\"color: green;\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia, beatae facilis, repellat atque eos suscipit a eligendi ea soluta veniam perspiciatis ipsam nulla delectus itaque facere, nemo at eveniet aliquam?</p>"
    },
    {
        "title": "Màu viền",
        "content": "Màu viền Để xác định màu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-color.                       <h1 style=\"border: 2px solid red;\">Hello </h1> <h1 style=\"border: 2px solid orange;\">Hello </h1> <h1 style=\"border: 2px solid yellow;\">Hello </h1>"
    },
    {
        "title": "Hiểu hơn về cách biểu thị màu",
        "content": "Hiểu hơn về cách biểu thị màu  Hệ màu RGB RGB là viết tắt của Red, Green, Blue. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0 đến 255.                      Để xác định màu sắc bằng hệ màu RGB, bạn cần sử dụng giá trị RGB của màu đó.  <form oninput=\"result.value='rgb(' + red.value + ',' + green.value + ',' + blue.value + ')'; result.style.borderColor = 'rgb(' + red.value + ',' + green.value + ',' + blue.value + ')';\">      <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgb(0, 0, 0)</output> </form>   RGBA RGBA là viết tắt của Red, Green, Blue, Alpha. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0                         đến 255 và giá trị alpha từ 0 đến 1. Để xác định màu sắc bằng hệ màu RGBA, bạn cần sử dụng giá trị RGBA của màu đó.  <form oninput=\"result.value='rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')'; result.style.borderColor = 'rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')';\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"alpha\">Alpha</label>     <input type=\"range\" id=\"alpha\" name=\"alpha\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgba(0, 0, 0, 1)</output> </form>    Màu thập lục phân (hex color) Màu thập lục phân là một cách biểu diễn màu sắc bằng cách sử dụng mã màu thập lục phân. Mã màu                         thập lục phân bắt đầu bằng dấu # và sau đó là 6 ký tự thập lục phân. Mỗi ký tự thập lục phân có thể là một trong các giá trị sau:                         0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.                      Để xác định màu sắc bằng mã màu thập lục phân, bạn cần sử dụng mã màu thập lục phân của màu đó.                       <form oninput=\"updateColor()\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">#000000</output> </form>  <script> function updateColor() {     const red = parseInt(document.getElementById('red').value).toString(16).padStart(2, '0');     const green = parseInt(document.getElementById('green').value).toString(16).padStart(2, '0');     const blue = parseInt(document.getElementById('blue').value).toString(16).padStart(2, '0');     const color = `#${red}${green}${blue}`;     document.getElementById('result').style.borderColor = color;     document.getElementById('result').innerText = color; } </script>     Có thể bạn chưa biết:  màu thập lục phân thực tế cấu thành từ 3 phần: màu đỏ, màu xanh lá                         cây và màu xanh dương. Mỗi phần có giá trị từ 0 đến 255. Ví dụ: #FF0000 là màu đỏ, #00FF00 là                         màu xanh lá cây, #0000FF là màu xanh dương. Với mỗi màu được biểu diễn bằng 2 ký tự thập lục                         phân, giá trị của màu sẽ nằm trong khoảng từ 00 đến FF.                        Màu HSL HSL là viết tắt của Hue, Saturation, Lightness. Mỗi màu sắc được biểu diễn bằng một giá trị Hue                         từ 0 đến 360, giá trị Saturation từ 0% đến 100% và giá trị Lightness từ 0% đến 100%. Để xác định màu sắc bằng hệ màu HSL, bạn cần sử dụng giá trị HSL của màu đó.  <form oninput=\"result.value='hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)'; result.style.borderColor = 'hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)';\">     <label for=\"hue\">Hue</label>     <input type=\"range\" id=\"hue\" name=\"hue\" min=\"0\" max=\"360\" value=\"0\"><br>     <label for=\"saturation\">Saturation</label>     <input type=\"range\" id=\"saturation\" name=\"saturation\" min=\"0\" max=\"100\" value=\"0\"><br>     <label for=\"lightness\">Lightness</label>     <input type=\"range\" id=\"lightness\" name=\"lightness\" min=\"0\" max=\"100\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">hsl(0, 0%, 0%)</output> </form>"
    },
    {
        "title": "Hệ màu RGB",
        "content": "Hệ màu RGB RGB là viết tắt của Red, Green, Blue. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0 đến 255.                      Để xác định màu sắc bằng hệ màu RGB, bạn cần sử dụng giá trị RGB của màu đó.  <form oninput=\"result.value='rgb(' + red.value + ',' + green.value + ',' + blue.value + ')'; result.style.borderColor = 'rgb(' + red.value + ',' + green.value + ',' + blue.value + ')';\">      <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgb(0, 0, 0)</output> </form>   RGBA RGBA là viết tắt của Red, Green, Blue, Alpha. Mỗi màu sắc được biểu diễn bằng một giá trị từ 0                         đến 255 và giá trị alpha từ 0 đến 1. Để xác định màu sắc bằng hệ màu RGBA, bạn cần sử dụng giá trị RGBA của màu đó.  <form oninput=\"result.value='rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')'; result.style.borderColor = 'rgba(' + red.value + ',' + green.value + ',' + blue.value + ',' + alpha.value + ')';\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"alpha\">Alpha</label>     <input type=\"range\" id=\"alpha\" name=\"alpha\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">rgba(0, 0, 0, 1)</output> </form>"
    },
    {
        "title": "Màu thập lục phân (hex color)",
        "content": "Màu thập lục phân (hex color) Màu thập lục phân là một cách biểu diễn màu sắc bằng cách sử dụng mã màu thập lục phân. Mã màu                         thập lục phân bắt đầu bằng dấu # và sau đó là 6 ký tự thập lục phân. Mỗi ký tự thập lục phân có thể là một trong các giá trị sau:                         0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.                      Để xác định màu sắc bằng mã màu thập lục phân, bạn cần sử dụng mã màu thập lục phân của màu đó.                       <form oninput=\"updateColor()\">     <label for=\"red\">Red</label>     <input type=\"range\" id=\"red\" name=\"red\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"green\">Green</label>     <input type=\"range\" id=\"green\" name=\"green\" min=\"0\" max=\"255\" value=\"0\"><br>     <label for=\"blue\">Blue</label>     <input type=\"range\" id=\"blue\" name=\"blue\" min=\"0\" max=\"255\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">#000000</output> </form>  <script> function updateColor() {     const red = parseInt(document.getElementById('red').value).toString(16).padStart(2, '0');     const green = parseInt(document.getElementById('green').value).toString(16).padStart(2, '0');     const blue = parseInt(document.getElementById('blue').value).toString(16).padStart(2, '0');     const color = `#${red}${green}${blue}`;     document.getElementById('result').style.borderColor = color;     document.getElementById('result').innerText = color; } </script>     Có thể bạn chưa biết:  màu thập lục phân thực tế cấu thành từ 3 phần: màu đỏ, màu xanh lá                         cây và màu xanh dương. Mỗi phần có giá trị từ 0 đến 255. Ví dụ: #FF0000 là màu đỏ, #00FF00 là                         màu xanh lá cây, #0000FF là màu xanh dương. Với mỗi màu được biểu diễn bằng 2 ký tự thập lục                         phân, giá trị của màu sẽ nằm trong khoảng từ 00 đến FF."
    },
    {
        "title": "Màu HSL",
        "content": "Màu HSL HSL là viết tắt của Hue, Saturation, Lightness. Mỗi màu sắc được biểu diễn bằng một giá trị Hue                         từ 0 đến 360, giá trị Saturation từ 0% đến 100% và giá trị Lightness từ 0% đến 100%. Để xác định màu sắc bằng hệ màu HSL, bạn cần sử dụng giá trị HSL của màu đó.  <form oninput=\"result.value='hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)'; result.style.borderColor = 'hsl(' + hue.value + ', ' + saturation.value + '%, ' + lightness.value + '%)';\">     <label for=\"hue\">Hue</label>     <input type=\"range\" id=\"hue\" name=\"hue\" min=\"0\" max=\"360\" value=\"0\"><br>     <label for=\"saturation\">Saturation</label>     <input type=\"range\" id=\"saturation\" name=\"saturation\" min=\"0\" max=\"100\" value=\"0\"><br>     <label for=\"lightness\">Lightness</label>     <input type=\"range\" id=\"lightness\" name=\"lightness\" min=\"0\" max=\"100\" value=\"0\"><br>     <output style=\"border-width: 2px; border-style: solid; display:block; width: 50%; margin: auto;\" name=\"result\">hsl(0, 0%, 0%)</output> </form>"
    },
    {
        "title": "Nền trong CSS",
        "content": "Nền trong CSS Để xác định hình nền cho một phần tử, bạn có thể sử dụng thuộc tính background. Thuộc tính background có thể chứa nhiều giá trị khác nhau như:  background-color background-image background-repeat background-attachment background-position   background-color Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                      <h1 style=\"background-color: lightblue;\">Hello </h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>     Độ trong suốt - với opacity Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính opacity.                      <h1 style=\"background-color: lightblue; opacity: 0.5;\">Hello </h1> <p style=\"background-color: lightgreen; opacity: 0.8;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: khi sử dụng thuộc tính opacity, tất cả các phần tử con của phần tử đó                         cũng sẽ bị ảnh hưởng bởi độ trong suốt (dẫn đến sự khó khăn trong việc đọc). Điều này có nghĩa                         là nếu bạn đặt độ trong suốt cho một phần tử cha, tất cả các phần tử con của phần tử đó cũng sẽ                         có độ trong suốt tương tự. Để tránh điều này, bạn có thể sử dụng thuộc tính rgba để                         xác định màu sắc với độ trong suốt.                        Độ trong suốt - với RGBA Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính rgba.                      <h1 style=\"background-color: rgba(173, 216, 230, 0.5);\">Hello </h1> <p style=\"background-color: rgba(144, 238, 144, 0.8);\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>    Nền bằng hình ảnh Để xác định hình ảnh làm nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-image.                      <h1 style=\"background-image: url('anh_nen.jpg'); color: white;\">Hello </h1> <p style=\"background-image: url('anh_nen.jpg'); color: white;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: hãy cố gắng chọn hình nền không có màu sắc gần giống với màu chữ để tránh việc làm                         người đọc KHÓ CHỊU VÔ CÙNG    Lặp hình nền Để xác định cách lặp hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-repeat.                      <h1 style=\"background-image: url('hinh-anh.png'); background-repeat: no-repeat; color: red;\">Hello </h1> <p style=\"background-image: url('hinh-anh.png'); background-repeat: repeat-x; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-repeat: repeat-y; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit eligendi, ea quos enim alias hic quis accusamus impedit architecto nulla minus placeat eum ad aperiam debitis tempora, iure dolor repellendus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis quo omnis accusantium quidem quis voluptatum dolorem a maxime magnam excepturi aut iusto consequatur animi, laboriosam numquam incidunt optio in cumque? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nulla distinctio esse beatae cupiditate minima doloribus quas laboriosam vitae commodi aliquid eveniet minus obcaecati, corporis, consequatur quae tenetur fugiat, consectetur quaerat.</p>   Lưu ý: thuộc tính background-repeat có thể nhận các giá trị sau:                          repeat: lặp hình ảnh theo cả chiều ngang và chiều dọc repeat-x: lặp hình ảnh theo chiều ngang repeat-y: lặp hình ảnh theo chiều dọc no-repeat: không lặp hình ảnh     Vị trí ảnh nền Để xác định vị trí của hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-position.                      <h1 style=\"background-image: url('cute.jpg'); background-position: center; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-position: right top; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-position: left bottom; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-position có thể nhận các giá trị sau:                          top: đặt hình ảnh ở trên cùng right: đặt hình ảnh ở bên phải bottom: đặt hình ảnh ở dưới cùng left: đặt hình ảnh ở bên trái center: đặt hình ảnh ở giữa      Đính kèm hình nền Để xác định cách hình nền cuộn theo phần tử, bạn có thể sử dụng thuộc tính                         background-attachment.                      <h1 style=\"background-image: url('cute.jpg'); background-attachment: scroll; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-attachment: fixed; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-attachment có thể nhận các giá trị sau:                          scroll: hình nền cuộn theo phần tử fixed: hình nền cố định       background - thuộc tính viết tắt                      Để xác định hình nền cho một phần tử, bạn có thể sử dụng thuộc tính background viết                         tắt.                      h1 {     background: lightblue url('cute.jpg') no-repeat right top;     color: white; }  Lưu ý: thuộc tính background viết tắt có thể chứa nhiều giá trị khác nhau                         như:                          background-color background-image background-repeat background-attachment background-position"
    },
    {
        "title": "background-color",
        "content": "background-color Để xác định màu nền cho một phần tử, bạn có thể sử dụng thuộc tính background-color.                      <h1 style=\"background-color: lightblue;\">Hello </h1> <p style=\"background-color: lightgreen;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>"
    },
    {
        "title": "Độ trong suốt - với opacity",
        "content": "Độ trong suốt - với opacity Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính opacity.                      <h1 style=\"background-color: lightblue; opacity: 0.5;\">Hello </h1> <p style=\"background-color: lightgreen; opacity: 0.8;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: khi sử dụng thuộc tính opacity, tất cả các phần tử con của phần tử đó                         cũng sẽ bị ảnh hưởng bởi độ trong suốt (dẫn đến sự khó khăn trong việc đọc). Điều này có nghĩa                         là nếu bạn đặt độ trong suốt cho một phần tử cha, tất cả các phần tử con của phần tử đó cũng sẽ                         có độ trong suốt tương tự. Để tránh điều này, bạn có thể sử dụng thuộc tính rgba để                         xác định màu sắc với độ trong suốt."
    },
    {
        "title": "Độ trong suốt - với RGBA",
        "content": "Độ trong suốt - với RGBA Để xác định độ trong suốt cho một phần tử, bạn có thể sử dụng thuộc tính rgba.                      <h1 style=\"background-color: rgba(173, 216, 230, 0.5);\">Hello </h1> <p style=\"background-color: rgba(144, 238, 144, 0.8);\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>"
    },
    {
        "title": "Nền bằng hình ảnh",
        "content": "Nền bằng hình ảnh Để xác định hình ảnh làm nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-image.                      <h1 style=\"background-image: url('anh_nen.jpg'); color: white;\">Hello </h1> <p style=\"background-image: url('anh_nen.jpg'); color: white;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: hãy cố gắng chọn hình nền không có màu sắc gần giống với màu chữ để tránh việc làm                         người đọc KHÓ CHỊU VÔ CÙNG"
    },
    {
        "title": "Lặp hình nền",
        "content": "Lặp hình nền Để xác định cách lặp hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-repeat.                      <h1 style=\"background-image: url('hinh-anh.png'); background-repeat: no-repeat; color: red;\">Hello </h1> <p style=\"background-image: url('hinh-anh.png'); background-repeat: repeat-x; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-repeat: repeat-y; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit eligendi, ea quos enim alias hic quis accusamus impedit architecto nulla minus placeat eum ad aperiam debitis tempora, iure dolor repellendus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis quo omnis accusantium quidem quis voluptatum dolorem a maxime magnam excepturi aut iusto consequatur animi, laboriosam numquam incidunt optio in cumque? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nulla distinctio esse beatae cupiditate minima doloribus quas laboriosam vitae commodi aliquid eveniet minus obcaecati, corporis, consequatur quae tenetur fugiat, consectetur quaerat.</p>   Lưu ý: thuộc tính background-repeat có thể nhận các giá trị sau:                          repeat: lặp hình ảnh theo cả chiều ngang và chiều dọc repeat-x: lặp hình ảnh theo chiều ngang repeat-y: lặp hình ảnh theo chiều dọc no-repeat: không lặp hình ảnh"
    },
    {
        "title": "Vị trí ảnh nền",
        "content": "Vị trí ảnh nền Để xác định vị trí của hình nền cho một phần tử, bạn có thể sử dụng thuộc tính                         background-position.                      <h1 style=\"background-image: url('cute.jpg'); background-position: center; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-position: right top; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p> <p style=\"background-image: url('cute.jpg'); background-position: left bottom; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-position có thể nhận các giá trị sau:                          top: đặt hình ảnh ở trên cùng right: đặt hình ảnh ở bên phải bottom: đặt hình ảnh ở dưới cùng left: đặt hình ảnh ở bên trái center: đặt hình ảnh ở giữa"
    },
    {
        "title": "Đính kèm hình nền",
        "content": "Đính kèm hình nền Để xác định cách hình nền cuộn theo phần tử, bạn có thể sử dụng thuộc tính                         background-attachment.                      <h1 style=\"background-image: url('cute.jpg'); background-attachment: scroll; color: red;\">Hello </h1> <p style=\"background-image: url('cute.jpg'); background-attachment: fixed; color: red;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo repudiandae ducimus ipsum rerum eius accusantium tempora eveniet vitae exercitationem aliquid. Inventore culpa optio distinctio qui possimus, nisi nam voluptate dolorem.</p>   Lưu ý: thuộc tính background-attachment có thể nhận các giá trị sau:                          scroll: hình nền cuộn theo phần tử fixed: hình nền cố định"
    },
    {
        "title": "background - thuộc tính viết tắt",
        "content": "background - thuộc tính viết tắt                      Để xác định hình nền cho một phần tử, bạn có thể sử dụng thuộc tính background viết                         tắt.                      h1 {     background: lightblue url('cute.jpg') no-repeat right top;     color: white; }  Lưu ý: thuộc tính background viết tắt có thể chứa nhiều giá trị khác nhau                         như:                          background-color background-image background-repeat background-attachment background-position"
    },
    {
        "title": "Viền trong CSS",
        "content": "Viền trong CSS Để xác định viền cho một phần tử, bạn có thể sử dụng thuộc tính border. Thuộc tính border có thể chứa nhiều giá trị khác nhau như:  border-width border-style border-color border-radius   border-width Để xác định độ rộng của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-width.                      <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 5px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: medium; border-style: dashed; \">Ví dụ 3</p>   Lưu ý: thuộc tính border-width có thể nhận các giá trị sau:                          thin: viền mảnh medium: viền trung bình thick: viền dày   Kích thước tùy chỉnh theo các cạnh Để xác định kích thước của viền cho từng cạnh của một phần tử, bạn có thể sử dụng các thuộc tính                         border-top-width, border-right-width,                         border-bottom-width, border-left-width.                      Hoặc có thể sử dụng thuộc tính border-width với giá trị theo thứ tự:                         top right bottom left.                      <p style=\"border-width: 2px 5px 10px 15px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-top-width: 2px; border-right-width: 5px; border-bottom-width: 10px; border-left-width: 15px; border-style: solid; \">Ví dụ 2</p>    border-style Để xác định kiểu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-style.                      Các giá trị của border-style:  none: không có viền hidden: viền ẩn dotted: viền chấm dashed: viền đứt solid: viền đậm double: viền đôi groove: viền rãnh ridge: viền đồi inset: viền lồi outset: viền lõm  <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 3</p> <p style=\"border-width: 2px; border-style: double; \">Ví dụ 4</p>    border-color Để xác định màu sắc của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-color.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; \">Ví dụ 3</p>    border-radius Để xác định độ cong của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-radius.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; border-radius: 2px; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; border-radius: 5px; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; border-radius: 10px; \">Ví dụ 3</p>    border - thuộc tính viết tắt Để xác định viền cho một phần tử, bạn có thể sử dụng thuộc tính border viết tắt.                       <p style=\"border: 2px solid red; border-radius: 5px;\">Ví dụ 1</p> <p style=\"border-top: 5px dotted blue; border-radius: 10px;\">Ví dụ 2</p> <p style=\"border-bottom: 10px dashed green; border-radius: 15px;\">Ví dụ 3</p>"
    },
    {
        "title": "border-width",
        "content": "border-width Để xác định độ rộng của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-width.                      <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 5px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: medium; border-style: dashed; \">Ví dụ 3</p>   Lưu ý: thuộc tính border-width có thể nhận các giá trị sau:                          thin: viền mảnh medium: viền trung bình thick: viền dày   Kích thước tùy chỉnh theo các cạnh Để xác định kích thước của viền cho từng cạnh của một phần tử, bạn có thể sử dụng các thuộc tính                         border-top-width, border-right-width,                         border-bottom-width, border-left-width.                      Hoặc có thể sử dụng thuộc tính border-width với giá trị theo thứ tự:                         top right bottom left.                      <p style=\"border-width: 2px 5px 10px 15px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-top-width: 2px; border-right-width: 5px; border-bottom-width: 10px; border-left-width: 15px; border-style: solid; \">Ví dụ 2</p>"
    },
    {
        "title": "border-style",
        "content": "border-style Để xác định kiểu viền cho một phần tử, bạn có thể sử dụng thuộc tính border-style.                      Các giá trị của border-style:  none: không có viền hidden: viền ẩn dotted: viền chấm dashed: viền đứt solid: viền đậm double: viền đôi groove: viền rãnh ridge: viền đồi inset: viền lồi outset: viền lõm  <p style=\"border-width: 2px; border-style: solid; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: dotted; \">Ví dụ 3</p> <p style=\"border-width: 2px; border-style: double; \">Ví dụ 4</p>"
    },
    {
        "title": "border-color",
        "content": "border-color Để xác định màu sắc của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-color.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; \">Ví dụ 3</p>"
    },
    {
        "title": "border-radius",
        "content": "border-radius Để xác định độ cong của viền cho một phần tử, bạn có thể sử dụng thuộc tính                         border-radius.                      <p style=\"border-width: 2px; border-style: solid; border-color: red; border-radius: 2px; \">Ví dụ 1</p> <p style=\"border-width: 2px; border-style: solid; border-color: blue; border-radius: 5px; \">Ví dụ 2</p> <p style=\"border-width: 2px; border-style: solid; border-color: green; border-radius: 10px; \">Ví dụ 3</p>"
    },
    {
        "title": "border - thuộc tính viết tắt",
        "content": "border - thuộc tính viết tắt Để xác định viền cho một phần tử, bạn có thể sử dụng thuộc tính border viết tắt.                       <p style=\"border: 2px solid red; border-radius: 5px;\">Ví dụ 1</p> <p style=\"border-top: 5px dotted blue; border-radius: 10px;\">Ví dụ 2</p> <p style=\"border-bottom: 10px dashed green; border-radius: 15px;\">Ví dụ 3</p>"
    },
    {
        "title": "Margin trong CSS",
        "content": "Margin trong CSS                  Để xác định khoảng cách giữa các phần tử, bạn có thể sử dụng thuộc tính margin. Thuộc tính margin có thể chứa nhiều giá trị khác nhau như:  margin-top margin-right margin-bottom margin-left  <p style=\"margin: 10px;\">Ví dụ 1 </p> <p style=\"margin: 10px 20px;\">Ví dụ 2 </p> <p style=\"margin: 10px 20px 30px;\">Ví dụ 3 </p> <p style=\"margin: 10px 20px 30px 40px;\">Ví dụ 4 </p>   Viết ngắn gọn Để viết ngắn gọn hơn, bạn có thể sử dụng các giá trị sau:  margin: (all)x; margin: (top & bottom)px (right & left)px; margin: (top)px (right & left)px (bottom)px; margin: (top)px (right)px (bottom)px (left)px;    Các giá trị của margin  auto: tự động căn giữa kích thước: giá trị số với đơn vị đo (px, em, rem, %, ...) inherit: kế thừa giá trị từ phần tử cha"
    },
    {
        "title": "Padding trong CSS",
        "content": "Padding trong CSS                  Để xác định khoảng cách giữa nội dung và viền của một phần tử, bạn có thể sử dụng thuộc tính                     padding.                  Thuộc tính padding có thể chứa nhiều giá trị khác nhau như:  padding-top padding-right padding-bottom padding-left  <p style=\"padding: 10px; border: 2px solid black;\">Ví dụ 1 </p> <p style=\"padding: 10px 20px; border: 2px solid black;\">Ví dụ 2 </p> <p style=\"padding: 10px 20px 30px; border: 2px solid black;\">Ví dụ 3 </p> <p style=\"padding: 10px 20px 30px 40px; border: 2px solid black;\">Ví dụ 4 </p>   Viết ngắn gọn Để viết ngắn gọn hơn, bạn có thể sử dụng các giá trị sau:  padding: (all)x; padding: (top & bottom)px (right & left)px; padding: (top)px (right & left)px (bottom)px; padding: (top)px (right)px (bottom)px (left)px;    Các giá trị của padding  kích thước: giá trị số với đơn vị đo (px, em, rem, %, ...) inherit: kế thừa giá trị từ phần tử cha"
    },
    {
        "title": "Kích thước trong CSS",
        "content": "Kích thước trong CSS                  Để xác định kích thước của một phần tử, bạn có thể sử dụng thuộc tính width và                     height.                  Thuộc tính width và height không bao gồm phần padding, border và margin của                     phần tử. Thuộc tính width và height có thể đặt các giá trị sau    Giá trị Mô tả   auto Phần tử sẽ tự động điều chỉnh kích thước   length Giá trị số với đơn vị đo (px, cm,...)   % Phần trăm của kích thước của phần tử cha   inherit Kế thừa giá trị từ phần tử cha   initial Đặt giá trị mặc định    <p style=\"width: 100px; height: 100px; border: 2px solid black;\">Ví dụ 1 </p> <p style=\"width: 200px; height: 200px; border: 2px solid black;\">Ví dụ 2 </p> <p style=\"width: 300px; height: 300px; border: 2px solid black;\">Ví dụ 3 </p> <p style=\"width: 400px; height: 400px; border: 2px solid black;\">Ví dụ 4 </p>   max-width Để xác định kích thước tối đa của một phần tử, bạn có thể sử dụng thuộc tính                         max-width.                      <p style=\"max-width: 100px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 200px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 300px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 400px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p>   Lưu ý:  nếu lỡ đặt kích thước width lớn hơn max-width, thì giá                         trị của max-width sẽ được ưu tiên."
    },
    {
        "title": "max-width",
        "content": "max-width Để xác định kích thước tối đa của một phần tử, bạn có thể sử dụng thuộc tính                         max-width.                      <p style=\"max-width: 100px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 200px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 300px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p> <p style=\"max-width: 400px; border: 2px solid black;\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nemo quod modi asperiores, iusto sed omnis quaerat. Dolorum harum aperiam dolore magni! A fuga harum maiores exercitationem dicta laboriosam aliquam recusandae. </p>   Lưu ý:  nếu lỡ đặt kích thước width lớn hơn max-width, thì giá                         trị của max-width sẽ được ưu tiên."
    },
    {
        "title": "Box Model trong CSS",
        "content": "Box Model trong CSS Mỗi phần tử HTML được xem như một hộp, và mỗi hộp đó bao gồm 4 phần: margin,                     border, padding, và content.                  Kích thước tổng của phần tử sẽ được tính bằng cách:  width = content + padding + border  height = content + padding + border.                   Lưu ý: mặc dù thuộc tính margin không được tính vào kích thước tổng của phần tử,                     nhưng nó sẽ ảnh hưởng đến khoảng cách giữa các phần tử."
    },
    {
        "title": "Đường viền ngoài trong CSS",
        "content": "Đường viền ngoài trong CSS Để xác định đường viền ngoài cho một phần tử, bạn có thể sử dụng thuộc tính outline. Thuộc tính outline có thể chứa nhiều giá trị khác nhau như:  outline-width outline-style outline-color  Các kiểu viền ngoài như:   none hidden dotted dashed solid double groove ridge inset outset  Mẫu các đường viền ngoài <p style=\"outline: 2px none black;\">None </p> <p style=\"outline: 2px hidden black;\">Hidden </p> <p style=\"outline: 2px dotted black;\">Dotted </p> <p style=\"outline: 2px dashed black;\">Dashed </p> <p style=\"outline: 2px solid black;\">Solid </p> <p style=\"outline: 2px double black;\">Double </p> <p style=\"outline: 2px groove black;\">Groove </p> <p style=\"outline: 2px ridge black;\">Ridge </p> <p style=\"outline: 2px inset black;\">Inset </p> <p style=\"outline: 2px outset black;\">Outset </p>"
    },
    {
        "title": "CSS văn bản",
        "content": "CSS văn bản Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng các thuộc tính sau:  color: màu chữ text-align: căn chỉnh chữ text-decoration: trang trí chữ text-transform: chuyển đổi chữ Text Spacing:                          text-indent: thụt lề đầu dòng letter-spacing: khoảng cách giữa các chữ cái word-spacing: khoảng cách giữa các từ line-height: chiều cao dòng white-space: khoảng trắng và ngắt dòng     color Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color. <p style=\"color: red;\">Ví dụ 1 </p> <p style=\"color: blue;\">Ví dụ 2 </p> <p style=\"color: green;\">Ví dụ 3 </p>    text-align Để xác định cách căn chỉnh chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-align.                      <p style=\"text-align: left;\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Facere autem perspiciatis aut minus excepturi explicabo temporibus. Suscipit totam minima, ipsum, eligendi sunt placeat voluptates odio ad unde impedit illum deserunt. </p> <p style=\"text-align: center;\">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Culpa enim natus maiores molestias reprehenderit quibusdam consectetur veniam placeat, incidunt quis voluptates illum perspiciatis similique dolorem facilis in, fugiat odit beatae. </p> <p style=\"text-align: right;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis asperiores velit tenetur. Quae vel est eos nisi id commodi pariatur consequuntur dolorem iure dignissimos, nostrum perferendis officia ratione possimus. Voluptate! </p> <p style=\"text-align: justify;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore tenetur consectetur veniam veritatis adipisci in beatae vel enim reprehenderit molestiae, esse id, aliquam obcaecati? Fugiat vero qui labore temporibus neque! </p>    text-decoration Để xác định kiểu trang trí chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-decoration.                      Các giá trị của text-decoration:  none: không trang trí underline: gạch chân overline: gạch trên line-through: gạch ngang blink: nhấp nháy  <p style=\"text-decoration: none;\">None </p> <p style=\"text-decoration: underline;\">Underline </p> <p style=\"text-decoration: overline;\">Overline </p> <p style=\"text-decoration: line-through;\">Line-through </p> <p style=\"text-decoration: blink red;\">Blink </p>   Lưu ý: giá trị blink không được hỗ trợ trên tất cả trình duyệt.                       Mẹo: mặc định giá trị thẻ a là text-decoration: underline; nên                         nếu muốn bỏ gạch chân, bạn cần xác định lại giá trị text-decoration: none;.                       Chú ý: bạn có thể bổ sung màu, độ dày, kiểu cho gạch chân bằng cách sử dụng thuộc tính                         text-decoration-color, text-decoration-thickness,                         text-decoration-style.                         Hoặc viết tắt như ví dụ sau text-decoration: underline 2px red dotted;    text-transform Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính text-transform.                      Các giá trị của text-transform:  none: Không thay đổi capitalize: In hoa kí tự đầu tiên của mỗi từ uppercase: In hoa tất cả các kí tự lowercase: In thường tất cả các kí tự  <p style=\"text-transform: none;\">Không thay đổi </p> <p style=\"text-transform: capitalize;\">In hoa kí tự đầu tiên của mỗi từ  </p> <p style=\"text-transform: uppercase;\">In hoa tất cả các kí tự </p> <p style=\"text-transform: lowercase;\">In thường tất cả các kí tự </p>    Text Spacing Để xác định khoảng cách giữa các chữ cái, từ, dòng, bạn có thể sử dụng các thuộc tính sau:  text-indent: thụt lề đầu dòng letter-spacing: khoảng cách giữa các chữ cái word-spacing: khoảng cách giữa các từ line-height: chiều cao dòng white-space: khoảng trắng và ngắt dòng   text-indent Để xác định thụt lề đầu dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             text-indent.                          <p style=\"text-indent: 50px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 100px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 150px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    letter-spacing Để xác định khoảng cách giữa các chữ cái cho một phần tử, bạn có thể sử dụng thuộc tính                             letter-spacing.                          <p style=\"letter-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    word-spacing Để xác định khoảng cách giữa các từ cho một phần tử, bạn có thể sử dụng thuộc tính                             word-spacing.                          <p style=\"word-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    line-height Để xác định chiều cao dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             line-height.                          <p style=\"line-height: 1;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 1.5;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 2;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    white-space Để xác định khoảng trắng và ngắt dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             white-space.                          Các giá trị của white-space:  normal: giữ nguyên khoảng trắng và ngắt dòng nowrap: không ngắt dòng pre: giữ nguyên khoảng trắng và ngắt dòng pre-line: giữ nguyên khoảng trắng và ngắt dòng pre-wrap: giữ nguyên khoảng trắng và ngắt dòng  <p style=\"white-space: normal;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: nowrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre-line;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. qqqqq </p> <p style=\"white-space: pre-wrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "color",
        "content": "color Để xác định màu chữ cho một phần tử, bạn có thể sử dụng thuộc tính color. <p style=\"color: red;\">Ví dụ 1 </p> <p style=\"color: blue;\">Ví dụ 2 </p> <p style=\"color: green;\">Ví dụ 3 </p>"
    },
    {
        "title": "text-align",
        "content": "text-align Để xác định cách căn chỉnh chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-align.                      <p style=\"text-align: left;\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Facere autem perspiciatis aut minus excepturi explicabo temporibus. Suscipit totam minima, ipsum, eligendi sunt placeat voluptates odio ad unde impedit illum deserunt. </p> <p style=\"text-align: center;\">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Culpa enim natus maiores molestias reprehenderit quibusdam consectetur veniam placeat, incidunt quis voluptates illum perspiciatis similique dolorem facilis in, fugiat odit beatae. </p> <p style=\"text-align: right;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis asperiores velit tenetur. Quae vel est eos nisi id commodi pariatur consequuntur dolorem iure dignissimos, nostrum perferendis officia ratione possimus. Voluptate! </p> <p style=\"text-align: justify;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore tenetur consectetur veniam veritatis adipisci in beatae vel enim reprehenderit molestiae, esse id, aliquam obcaecati? Fugiat vero qui labore temporibus neque! </p>"
    },
    {
        "title": "text-decoration",
        "content": "text-decoration Để xác định kiểu trang trí chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         text-decoration.                      Các giá trị của text-decoration:  none: không trang trí underline: gạch chân overline: gạch trên line-through: gạch ngang blink: nhấp nháy  <p style=\"text-decoration: none;\">None </p> <p style=\"text-decoration: underline;\">Underline </p> <p style=\"text-decoration: overline;\">Overline </p> <p style=\"text-decoration: line-through;\">Line-through </p> <p style=\"text-decoration: blink red;\">Blink </p>   Lưu ý: giá trị blink không được hỗ trợ trên tất cả trình duyệt.                       Mẹo: mặc định giá trị thẻ a là text-decoration: underline; nên                         nếu muốn bỏ gạch chân, bạn cần xác định lại giá trị text-decoration: none;.                       Chú ý: bạn có thể bổ sung màu, độ dày, kiểu cho gạch chân bằng cách sử dụng thuộc tính                         text-decoration-color, text-decoration-thickness,                         text-decoration-style.                         Hoặc viết tắt như ví dụ sau text-decoration: underline 2px red dotted;"
    },
    {
        "title": "text-transform",
        "content": "text-transform Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính text-transform.                      Các giá trị của text-transform:  none: Không thay đổi capitalize: In hoa kí tự đầu tiên của mỗi từ uppercase: In hoa tất cả các kí tự lowercase: In thường tất cả các kí tự  <p style=\"text-transform: none;\">Không thay đổi </p> <p style=\"text-transform: capitalize;\">In hoa kí tự đầu tiên của mỗi từ  </p> <p style=\"text-transform: uppercase;\">In hoa tất cả các kí tự </p> <p style=\"text-transform: lowercase;\">In thường tất cả các kí tự </p>"
    },
    {
        "title": "Text Spacing",
        "content": "Text Spacing Để xác định khoảng cách giữa các chữ cái, từ, dòng, bạn có thể sử dụng các thuộc tính sau:  text-indent: thụt lề đầu dòng letter-spacing: khoảng cách giữa các chữ cái word-spacing: khoảng cách giữa các từ line-height: chiều cao dòng white-space: khoảng trắng và ngắt dòng   text-indent Để xác định thụt lề đầu dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             text-indent.                          <p style=\"text-indent: 50px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 100px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 150px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    letter-spacing Để xác định khoảng cách giữa các chữ cái cho một phần tử, bạn có thể sử dụng thuộc tính                             letter-spacing.                          <p style=\"letter-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    word-spacing Để xác định khoảng cách giữa các từ cho một phần tử, bạn có thể sử dụng thuộc tính                             word-spacing.                          <p style=\"word-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    line-height Để xác định chiều cao dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             line-height.                          <p style=\"line-height: 1;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 1.5;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 2;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>    white-space Để xác định khoảng trắng và ngắt dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             white-space.                          Các giá trị của white-space:  normal: giữ nguyên khoảng trắng và ngắt dòng nowrap: không ngắt dòng pre: giữ nguyên khoảng trắng và ngắt dòng pre-line: giữ nguyên khoảng trắng và ngắt dòng pre-wrap: giữ nguyên khoảng trắng và ngắt dòng  <p style=\"white-space: normal;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: nowrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre-line;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. qqqqq </p> <p style=\"white-space: pre-wrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "text-indent",
        "content": "text-indent Để xác định thụt lề đầu dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             text-indent.                          <p style=\"text-indent: 50px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 100px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"text-indent: 150px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "letter-spacing",
        "content": "letter-spacing Để xác định khoảng cách giữa các chữ cái cho một phần tử, bạn có thể sử dụng thuộc tính                             letter-spacing.                          <p style=\"letter-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"letter-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "word-spacing",
        "content": "word-spacing Để xác định khoảng cách giữa các từ cho một phần tử, bạn có thể sử dụng thuộc tính                             word-spacing.                          <p style=\"word-spacing: 2px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 5px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"word-spacing: 10px;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "line-height",
        "content": "line-height Để xác định chiều cao dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             line-height.                          <p style=\"line-height: 1;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 1.5;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"line-height: 2;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "white-space",
        "content": "white-space Để xác định khoảng trắng và ngắt dòng cho một phần tử, bạn có thể sử dụng thuộc tính                             white-space.                          Các giá trị của white-space:  normal: giữ nguyên khoảng trắng và ngắt dòng nowrap: không ngắt dòng pre: giữ nguyên khoảng trắng và ngắt dòng pre-line: giữ nguyên khoảng trắng và ngắt dòng pre-wrap: giữ nguyên khoảng trắng và ngắt dòng  <p style=\"white-space: normal;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: nowrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p> <p style=\"white-space: pre-line;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. qqqqq </p> <p style=\"white-space: pre-wrap;\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptates. </p>"
    },
    {
        "title": "CSS Font",
        "content": "CSS Font Để xác chỉnh sửa phông chữ cho một phần tử, bạn có thể sử dụng các thuộc tính sau:  font-family: họ phông chữ font-size: kích thước chữ font-weight: độ đậm của chữ font-style: kiểu chữ font-variant: kiểu chữ font: viết tắt   font-family Để xác định họ phông chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-family.                                               Có nhiều họ phông chữ khác nhau, bạn có thể chọn một trong số đó để sử dụng cho phần tử của                         mình.                      Một vài họ phông chữ thông dụng    Họ phông chữ Mô tả Ví dụ   serif Phông chữ có chân  Times New Roman Georgia Garamond    sans-serif Phông chữ không chân  Arial Verdana Tahoma    monospace Đây là kiểu chữ có độ rộng của các con chữ là bằng nhau giúp mang lại cảm giác đều                                     đặn, mũm mĩm và khá hay ho.  Courier New Lucida Console Monaco JetBrains Mono    cursive Phông chữ thảo, có hình dạng giống chữ viết tay  Brush Script MT Comic Sans MS Lucida Handwriting    fantasy Mang sắc thái hiện đại, dùng nhiều cho ấn phẩm thiết kế, tiêu đề, nội dung  Impact Papyrus Copperplate     <p style=\"font-family: 'Arial', sans-serif;\">Arial </p> <p style=\"font-family: 'Verdana', sans-serif;\">Verdana </p> <p style=\"font-family: 'Tahoma', sans-serif;\">Tahoma </p> <p style=\"font-family: 'Times New Roman', serif;\">Times New Roman</p> <p style=\"font-family: 'Georgia', serif;\">Georgia</p> <p style=\"font-family: 'Garamond', serif;\">Garamond</p> <p style=\"font-family: 'Courier New', monospace;\">Courier New</p> <p style=\"font-family: 'Lucida Console', monospace;\">Lucida Console</p> <p style=\"font-family: 'Monaco', monospace;\">Monaco</p> <p style=\"font-family: 'JetBrains Mono', monospace;\">JetBrains Mono</p> <p style=\"font-family: 'Brush Script MT', cursive;\">Brush Script MT</p> <p style=\"font-family: 'Comic Sans MS', cursive;\">Comic Sans MS</p> <p style=\"font-family: 'Lucida Handwriting', cursive;\">Lucida Handwriting</p> <p style=\"font-family: 'Impact', fantasy;\">Impact</p> <p style=\"font-family: 'Papyrus', fantasy;\">Papyrus</p> <p style=\"font-family: 'Copperplate', fantasy;\">Copperplate</p>     font-size Để xác định kích thước chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-size.                      Có nhiều giá trị khác nhau cho font-size như:  xx-small x-small small medium large x-large xx-large smaller larger length: giá trị số với đơn vị đo (px, em, rem, ...) percentage: giá trị phần trăm  <p style=\"font-size: 12px;\">12px </p> <p style=\"font-size: 14px;\">14px </p> <p style=\"font-size: 16px;\">16px </p> <p style=\"font-size: xx-small;\">xx-small </p> <p style=\"font-size: x-small;\">x-small </p> <p style=\"font-size: small;\">small </p> <p style=\"font-size: medium;\">medium </p> <p style=\"font-size: large;\">large </p> <p style=\"font-size: x-large;\">x-large </p> <p style=\"font-size: xx-large;\">xx-large </p>    font-weight Để xác định độ đậm của chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         font-weight.                      Có nhiều giá trị khác nhau cho font-weight như:  normal bold bolder lighter 100 - 900  <p style=\"font-weight: normal;\">Normal </p> <p style=\"font-weight: bold;\">Bold </p> <p style=\"font-weight: bolder;\">Bolder </p> <p style=\"font-weight: lighter;\">Lighter </p> <p style=\"font-weight: 100;\">100 </p> <p style=\"font-weight: 200;\">200 </p> <p style=\"font-weight: 300;\">300 </p> <p style=\"font-weight: 400;\">400 </p> <p style=\"font-weight: 500;\">500 </p> <p style=\"font-weight: 600;\">600 </p> <p style=\"font-weight: 700;\">700 </p> <p style=\"font-weight: 800;\">800 </p> <p style=\"font-weight: 900;\">900 </p>   Chú ý: không phải tất cả các font chữ đều hỗ trợ đầy đủ các giá trị của                         font-weight.                         nếu chữ chỉ có 2 dạng 400(regular) và 700(bold) thì giá trị 100, 200, 300, 500, 600, 800, 900 sẽ                         không có hiệu lực, trình duyệt sẽ tự động chọn giá trị gần nhất.                        font-style Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-style. Có nhiều giá trị khác nhau cho font-style như:  normal italic oblique  <p style=\"font-style: normal;\">Normal </p> <p style=\"font-style: italic;\">Italic </p> <p style=\"font-style: oblique;\">Oblique </p>   Lưu ý: giá trị oblique sẽ nghiêng chữ hơn so với giá trị                         italic.                        font-variant Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-variant.                      Có nhiều giá trị khác nhau cho font-variant như:  normal small-caps  <p style=\"font-variant: normal;\">Normal </p> <p style=\"font-variant: small-caps;\">Small-caps </p>   Lưu ý: giá trị small-caps sẽ chuyển tất cả các chữ cái thành chữ in hoa và                         giữ nguyên kích thước.                        font Để viết tắt cho các thuộc tính font-family, font-size,                         font-weight, font-style, font-variant, bạn có thể sử dụng                         thuộc tính font.                      Cú pháp:                         font: font-style font-variant font-weight font-size/line-height font-family;  <p style=\"font: italic small-caps bold 16px/30px 'Arial', sans-serif;\">Italic Small-caps Bold 16px/30px Arial</p>   Trong đó:                           italic: kiểu chữ                          small-caps: kiểu chữ                          bold: độ đậm của chữ                          16px: kích thước chữ                          30px: chiều cao dòng                          Arial: họ phông chữ                          sans-serif: họ phông chữ thay thế nếu Arial không tồn tại"
    },
    {
        "title": "font-family",
        "content": "font-family Để xác định họ phông chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-family.                                               Có nhiều họ phông chữ khác nhau, bạn có thể chọn một trong số đó để sử dụng cho phần tử của                         mình.                      Một vài họ phông chữ thông dụng    Họ phông chữ Mô tả Ví dụ   serif Phông chữ có chân  Times New Roman Georgia Garamond    sans-serif Phông chữ không chân  Arial Verdana Tahoma    monospace Đây là kiểu chữ có độ rộng của các con chữ là bằng nhau giúp mang lại cảm giác đều                                     đặn, mũm mĩm và khá hay ho.  Courier New Lucida Console Monaco JetBrains Mono    cursive Phông chữ thảo, có hình dạng giống chữ viết tay  Brush Script MT Comic Sans MS Lucida Handwriting    fantasy Mang sắc thái hiện đại, dùng nhiều cho ấn phẩm thiết kế, tiêu đề, nội dung  Impact Papyrus Copperplate     <p style=\"font-family: 'Arial', sans-serif;\">Arial </p> <p style=\"font-family: 'Verdana', sans-serif;\">Verdana </p> <p style=\"font-family: 'Tahoma', sans-serif;\">Tahoma </p> <p style=\"font-family: 'Times New Roman', serif;\">Times New Roman</p> <p style=\"font-family: 'Georgia', serif;\">Georgia</p> <p style=\"font-family: 'Garamond', serif;\">Garamond</p> <p style=\"font-family: 'Courier New', monospace;\">Courier New</p> <p style=\"font-family: 'Lucida Console', monospace;\">Lucida Console</p> <p style=\"font-family: 'Monaco', monospace;\">Monaco</p> <p style=\"font-family: 'JetBrains Mono', monospace;\">JetBrains Mono</p> <p style=\"font-family: 'Brush Script MT', cursive;\">Brush Script MT</p> <p style=\"font-family: 'Comic Sans MS', cursive;\">Comic Sans MS</p> <p style=\"font-family: 'Lucida Handwriting', cursive;\">Lucida Handwriting</p> <p style=\"font-family: 'Impact', fantasy;\">Impact</p> <p style=\"font-family: 'Papyrus', fantasy;\">Papyrus</p> <p style=\"font-family: 'Copperplate', fantasy;\">Copperplate</p>"
    },
    {
        "title": "font-size",
        "content": "font-size Để xác định kích thước chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-size.                      Có nhiều giá trị khác nhau cho font-size như:  xx-small x-small small medium large x-large xx-large smaller larger length: giá trị số với đơn vị đo (px, em, rem, ...) percentage: giá trị phần trăm  <p style=\"font-size: 12px;\">12px </p> <p style=\"font-size: 14px;\">14px </p> <p style=\"font-size: 16px;\">16px </p> <p style=\"font-size: xx-small;\">xx-small </p> <p style=\"font-size: x-small;\">x-small </p> <p style=\"font-size: small;\">small </p> <p style=\"font-size: medium;\">medium </p> <p style=\"font-size: large;\">large </p> <p style=\"font-size: x-large;\">x-large </p> <p style=\"font-size: xx-large;\">xx-large </p>"
    },
    {
        "title": "font-weight",
        "content": "font-weight Để xác định độ đậm của chữ cho một phần tử, bạn có thể sử dụng thuộc tính                         font-weight.                      Có nhiều giá trị khác nhau cho font-weight như:  normal bold bolder lighter 100 - 900  <p style=\"font-weight: normal;\">Normal </p> <p style=\"font-weight: bold;\">Bold </p> <p style=\"font-weight: bolder;\">Bolder </p> <p style=\"font-weight: lighter;\">Lighter </p> <p style=\"font-weight: 100;\">100 </p> <p style=\"font-weight: 200;\">200 </p> <p style=\"font-weight: 300;\">300 </p> <p style=\"font-weight: 400;\">400 </p> <p style=\"font-weight: 500;\">500 </p> <p style=\"font-weight: 600;\">600 </p> <p style=\"font-weight: 700;\">700 </p> <p style=\"font-weight: 800;\">800 </p> <p style=\"font-weight: 900;\">900 </p>   Chú ý: không phải tất cả các font chữ đều hỗ trợ đầy đủ các giá trị của                         font-weight.                         nếu chữ chỉ có 2 dạng 400(regular) và 700(bold) thì giá trị 100, 200, 300, 500, 600, 800, 900 sẽ                         không có hiệu lực, trình duyệt sẽ tự động chọn giá trị gần nhất."
    },
    {
        "title": "font-style",
        "content": "font-style Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-style. Có nhiều giá trị khác nhau cho font-style như:  normal italic oblique  <p style=\"font-style: normal;\">Normal </p> <p style=\"font-style: italic;\">Italic </p> <p style=\"font-style: oblique;\">Oblique </p>   Lưu ý: giá trị oblique sẽ nghiêng chữ hơn so với giá trị                         italic."
    },
    {
        "title": "font-variant",
        "content": "font-variant Để xác định kiểu chữ cho một phần tử, bạn có thể sử dụng thuộc tính font-variant.                      Có nhiều giá trị khác nhau cho font-variant như:  normal small-caps  <p style=\"font-variant: normal;\">Normal </p> <p style=\"font-variant: small-caps;\">Small-caps </p>   Lưu ý: giá trị small-caps sẽ chuyển tất cả các chữ cái thành chữ in hoa và                         giữ nguyên kích thước."
    },
    {
        "title": "font",
        "content": "font Để viết tắt cho các thuộc tính font-family, font-size,                         font-weight, font-style, font-variant, bạn có thể sử dụng                         thuộc tính font.                      Cú pháp:                         font: font-style font-variant font-weight font-size/line-height font-family;  <p style=\"font: italic small-caps bold 16px/30px 'Arial', sans-serif;\">Italic Small-caps Bold 16px/30px Arial</p>   Trong đó:                           italic: kiểu chữ                          small-caps: kiểu chữ                          bold: độ đậm của chữ                          16px: kích thước chữ                          30px: chiều cao dòng                          Arial: họ phông chữ                          sans-serif: họ phông chữ thay thế nếu Arial không tồn tại"
    },
    {
        "title": "icon trong CSS",
        "content": "icon trong CSS                  Để thêm icon vào trang web, bạn có thể sử dụng các icon có sẵn từ thư viện hoặc tạo icon của riêng                     mình.                      thông thường biểu tượng trong các thư viện được thêm bằng cách sử dụng thẻ <i>                     hoặc <span> và thêm class tương ứng.                  Các thư viện icon phổ biến như  Font Awesome Booststrap Icons  Google Icons   Thư viện Fonts Awesome Để sử dụng icon từ thư viện Fonts Awesome, bạn cần thêm thẻ <script> vào phần                         <head> của trang web.                      <script src=\"https://kit.fontawesome.com/code của bạn.js\" crossorigin=\"anonymous\"></script>  Lưu ý: bạn cần đăng ký tài khoản và lấy mã code từ trang chủ của Fonts Awesome.                      Sau đó, bạn có thể sử dụng icon bằng cách thêm class fas hoặc far hoặc                         fab và thêm class icon cần sử dụng.                      <i class=\"fas fa-home\"></i> <i class=\"far fa-user\"></i> <i class=\"fab fa-facebook\"></i>    Thư viện icon của Booststrap Để sử dụng icon từ thư viện của Booststrap, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class glyphicon và thêm class icon                         cần sử dụng. <span class=\"glyphicon glyphicon-home\"></span> <span class=\"glyphicon glyphicon-user\"></span> <span class=\"glyphicon glyphicon-envelope\"></span>    Thư viện icon của google Để sử dụng icon từ thư viện của google, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class material-icons và thêm nội dung                         là tên icon cần sử dụng. <i class=\"material-icons\">home</i> <i class=\"material-icons\">person</i> <i class=\"material-icons\">email</i>"
    },
    {
        "title": "Thư viện Fonts Awesome",
        "content": "Thư viện Fonts Awesome Để sử dụng icon từ thư viện Fonts Awesome, bạn cần thêm thẻ <script> vào phần                         <head> của trang web.                      <script src=\"https://kit.fontawesome.com/code của bạn.js\" crossorigin=\"anonymous\"></script>  Lưu ý: bạn cần đăng ký tài khoản và lấy mã code từ trang chủ của Fonts Awesome.                      Sau đó, bạn có thể sử dụng icon bằng cách thêm class fas hoặc far hoặc                         fab và thêm class icon cần sử dụng.                      <i class=\"fas fa-home\"></i> <i class=\"far fa-user\"></i> <i class=\"fab fa-facebook\"></i>"
    },
    {
        "title": "Thư viện icon của Booststrap",
        "content": "Thư viện icon của Booststrap Để sử dụng icon từ thư viện của Booststrap, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class glyphicon và thêm class icon                         cần sử dụng. <span class=\"glyphicon glyphicon-home\"></span> <span class=\"glyphicon glyphicon-user\"></span> <span class=\"glyphicon glyphicon-envelope\"></span>"
    },
    {
        "title": "Thư viện icon của google",
        "content": "Thư viện icon của google Để sử dụng icon từ thư viện của google, bạn cần thêm thẻ <link> vào phần                         <head> của trang web.                      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"> Sau đó, bạn có thể sử dụng icon bằng cách thêm class material-icons và thêm nội dung                         là tên icon cần sử dụng. <i class=\"material-icons\">home</i> <i class=\"material-icons\">person</i> <i class=\"material-icons\">email</i>"
    },
    {
        "title": "Liên kết với CSS",
        "content": "Liên kết với CSS                      Đường dẫn có thể được áp dụng nhiều kiểu khác nhau, như màu sắc, phông, nền ...                                       Có một số trạng thái của liên kết như:                   :link: liên kết chưa được truy cập :visited: liên kết đã được truy cập :hover: khi di chuột qua liên kết :active: khi liên kết đang được nhấn  a:link {     color: red; }  a:visited {     color: green; }  a:hover {     color: blue; }  a:active {     color: yellow; } <a href=\"https://example.com\">Đây là một liên kết mẫu</a>   Lưu ý:                               Nếu bạn chưa truy cập vào liên kết, nó sẽ có màu đỏ.                                                       Nếu bạn đã truy cập vào liên kết, nó sẽ có màu xanh.                                                       Khi di chuột qua liên kết, nó sẽ có màu xanh dương.                                                       Khi nhấn vào liên kết, nó sẽ có màu vàng. (Bạn sẽ nhìn thấy rõ hơn khi nhấn giữ)                                               Thứ tự của các trạng thái liên kết cần được tuân thủ theo thứ tự sau: :link -                     :visited - :hover - :active.                     Nếu bạn không chỉ định tên trạng thái thì trình duyệt sẽ áp dụng cho đến gặp trạng thái tiếp theo.                   Mẹo: bạn có thể sử dụng thuộc tính text-decoration để bỏ gạch chân cho liên kết.                                       Ngoài ra bạn có thể kết hợp với các thuộc tính khác như font-size,                     font-weight, font-style, text-transform,                     text-decoration... để tạo ra hiệu ứng đẹp mắt cho liên kết.                  Tạo một nút từ link <a href=\"#\" class=\"btn\">Đây là một nút mẫu</a> a.btn {     display: inline-block;     padding: 10px 20px;     background-color: red;     color: black;     text-decoration: none;     font-size: 16px;     border: 1px solid black;     border-radius: 5px; } a.btn:hover {     background-color: blue; } .btn:active {     background-color: green; }  Con trỏ Để thay đổi kiểu con trỏ khi di chuột qua một phần tử, bạn có thể sử dụng thuộc tính                     cursor.                  bạn có thể tham khảo một vài biểu tượng con trỏ trong bảng sau'                    Con trỏ Mô tả Mã nguồn Kết quả   default Con trỏ mặc định cursor: default; default   pointer Con trỏ hình bàn tay cursor: pointer; pointer   move Con trỏ hình mũi tên 4 hướng cursor: move; move   text Con trỏ hình I cursor: text; text   wait Con trỏ hình đồng hồ cát hoặc biểu tượng xoay vòng cursor: wait; wait   help Con trỏ hình biểu tượng chú thích cursor: help; help   not-allowed Con trỏ hình dấu chéo cursor: not-allowed; not-allowed   crosshair Con trỏ hình chữ thập cursor: crosshair; crosshair   col-resize Con trỏ hình mũi tên ngang cursor: col-resize; col-resize   row-resize Con trỏ hình mũi tên dọc cursor: row-resize; row-resize   ew-resize Con trỏ hình mũi tên ngang kéo dãn cursor: ew-resize; ew-resize   ns-resize Con trỏ hình mũi tên dọc kéo dãn cursor: ns-resize; ns-resize   nesw-resize Con trỏ hình mũi tên chéo từ trên xuống dưới cursor: nesw-resize; nesw-resize   nwse-resize Con trỏ hình mũi tên chéo từ dưới lên trên cursor: nwse-resize; nwse-resize   zoom-in Con trỏ hình biểu tượng phóng to cursor: zoom-in; zoom-in   zoom-out Con trỏ hình biểu tượng thu nhỏ cursor: zoom-out; zoom-out   grab Con trỏ hình bàn tay cursor: grab; grab"
    },
    {
        "title": "Danh sách CSS",
        "content": "Danh sách CSS Để tạo danh sách trong CSS, bạn có thể sử dụng các thuộc tính sau:  list-style-type: kiểu danh sách list-style-image: hình ảnh cho danh sách list-style-position: vị trí của danh sách list-style: viết tắt   list-style-type Để xác định kiểu danh sách, bạn có thể sử dụng thuộc tính list-style-type. Có nhiều kiểu danh sách khác nhau như:  disc: hình tròn circle: hình tròn rỗng square: hình vuông decimal: số thập phân decimal-leading-zero: số thập phân với số 0 ở đầu lower-roman: số la mã thường upper-roman: số la mã hoa lower-alpha: chữ cái thường upper-alpha: chữ cái hoa none: không có kiểu danh sách  <strong>disc<strong> <ul style=\"list-style-type: disc;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>circle<strong> <ul style=\"list-style-type: circle;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>square<strong> <ul style=\"list-style-type: square;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>decimal<strong> <ol style=\"list-style-type: decimal;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>decimal-leading-zero<strong> <ol style=\"list-style-type: decimal-leading-zero;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-roman<strong> <ol style=\"list-style-type: lower-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-roman<strong> <ol style=\"list-style-type: upper-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-alpha<strong> <ol style=\"list-style-type: lower-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-alpha<strong> <ol style=\"list-style-type: upper-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>none<strong> <ul style=\"list-style-type: none;\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style-image Để thêm hình ảnh cho danh sách, bạn có thể sử dụng thuộc tính list-style-image. <ul style=\"list-style-image: url('htm5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style-position Để xác định vị trí của danh sách, bạn có thể sử dụng thuộc tính list-style-position.                      Có 2 giá trị cho list-style-position:  inside: danh sách sẽ được hiển thị bên trong phần tử cha outside: danh sách sẽ được hiển thị bên ngoài phần tử cha  <ul style=\"list-style-position: inside;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <ul style=\"list-style-position: outside;\">     <li>Item 1</li>     <li>Item 2</li> </ul>    list-style Để viết tắt cho các thuộc tính list-style-type, list-style-image,                         list-style-position, bạn có thể sử dụng thuộc tính list-style.                      Cú pháp:                         list-style: list-style-type list-style-position list-style-image;  <ul style=\"list-style: square inside url('html5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>   Trong đó:                           square: kiểu danh sách (xác định kiểu sẽ dùng khi ảnh bị lỗi)                         inside: vị trí của danh sách                          url('html5small.png'): hình ảnh cho danh sách                        Định kiểu cho các item                          bạn có thể định kiểu cho item bằng bộ chọn ul li hoặc ol li trong CSS.                      ol { list-style-type: decimal-leading-zero; background-color: red; padding: 10px; color: aqua; }                          ol li {     color: red;     background-color: white;     font-size: 16px;     font-weight: bold;     margin: 5px; } <ol>     <li>Item 1</li>     <li>Item 2</li> </ol>"
    },
    {
        "title": "list-style-type",
        "content": "list-style-type Để xác định kiểu danh sách, bạn có thể sử dụng thuộc tính list-style-type. Có nhiều kiểu danh sách khác nhau như:  disc: hình tròn circle: hình tròn rỗng square: hình vuông decimal: số thập phân decimal-leading-zero: số thập phân với số 0 ở đầu lower-roman: số la mã thường upper-roman: số la mã hoa lower-alpha: chữ cái thường upper-alpha: chữ cái hoa none: không có kiểu danh sách  <strong>disc<strong> <ul style=\"list-style-type: disc;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>circle<strong> <ul style=\"list-style-type: circle;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>square<strong> <ul style=\"list-style-type: square;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <strong>decimal<strong> <ol style=\"list-style-type: decimal;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>decimal-leading-zero<strong> <ol style=\"list-style-type: decimal-leading-zero;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-roman<strong> <ol style=\"list-style-type: lower-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-roman<strong> <ol style=\"list-style-type: upper-roman;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>lower-alpha<strong> <ol style=\"list-style-type: lower-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>upper-alpha<strong> <ol style=\"list-style-type: upper-alpha;\">     <li>Item 1</li>     <li>Item 2</li> </ol> <strong>none<strong> <ul style=\"list-style-type: none;\">     <li>Item 1</li>     <li>Item 2</li> </ul>"
    },
    {
        "title": "list-style-image",
        "content": "list-style-image Để thêm hình ảnh cho danh sách, bạn có thể sử dụng thuộc tính list-style-image. <ul style=\"list-style-image: url('htm5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>"
    },
    {
        "title": "list-style-position",
        "content": "list-style-position Để xác định vị trí của danh sách, bạn có thể sử dụng thuộc tính list-style-position.                      Có 2 giá trị cho list-style-position:  inside: danh sách sẽ được hiển thị bên trong phần tử cha outside: danh sách sẽ được hiển thị bên ngoài phần tử cha  <ul style=\"list-style-position: inside;\">     <li>Item 1</li>     <li>Item 2</li> </ul> <ul style=\"list-style-position: outside;\">     <li>Item 1</li>     <li>Item 2</li> </ul>"
    },
    {
        "title": "list-style",
        "content": "list-style Để viết tắt cho các thuộc tính list-style-type, list-style-image,                         list-style-position, bạn có thể sử dụng thuộc tính list-style.                      Cú pháp:                         list-style: list-style-type list-style-position list-style-image;  <ul style=\"list-style: square inside url('html5small.png');\">     <li>Item 1</li>     <li>Item 2</li> </ul>   Trong đó:                           square: kiểu danh sách (xác định kiểu sẽ dùng khi ảnh bị lỗi)                         inside: vị trí của danh sách                          url('html5small.png'): hình ảnh cho danh sách"
    },
    {
        "title": "Định kiểu cho các item",
        "content": "Định kiểu cho các item                          bạn có thể định kiểu cho item bằng bộ chọn ul li hoặc ol li trong CSS.                      ol { list-style-type: decimal-leading-zero; background-color: red; padding: 10px; color: aqua; }                          ol li {     color: red;     background-color: white;     font-size: 16px;     font-weight: bold;     margin: 5px; } <ol>     <li>Item 1</li>     <li>Item 2</li> </ol>"
    },
    {
        "title": "Định dạng bảng trong CSS",
        "content": "Định dạng bảng trong CSS Để tạo bảng trong CSS, bạn có thể sử dụng các thuộc tính sau:  border: xác định kiểu viền của bảng border-collapse: xác định cách thức hiển thị đường viền của bảng border-spacing: xác định khoảng cách giữa các ô của bảng caption-side: xác định vị trí của tiêu đề bảng table-layout: xác định cách thức hiển thị bảng   border Để xác định kiểu viền của bảng, bạn có thể sử dụng thuộc tính border. Có 3 giá trị cho border:  border-width: độ rộng của đường viền border-style: kiểu của đường viền border-color: màu sắc của đường viền  table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>                           Để bảng hiện kích thước bằng phần tử cha có thể thêm thuộc tính width: 100% vào                         bảng.                        border-collapse Để xác định cách thức hiển thị đường viền của bảng, bạn có thể sử dụng thuộc tính                         border-collapse.                      Có 2 giá trị cho border-collapse:  separate: đường viền sẽ hiển thị riêng biệt cho mỗi ô collapse: đường viền sẽ hiển thị chung cho các ô  table, th, td {     border: 1px solid black; } table {     border-collapse: collapse; } <table style=\"width: 100%;\">     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    Kích thước bảng Để xác định kích thước của bảng, bạn có thể sử dụng thuộc tính width và                         height.                        border-spacing Để xác định khoảng cách giữa các ô của bảng, bạn có thể sử dụng thuộc tính                         border-spacing.                      table {     border-collapse: separate;     border-spacing: 10px; }     table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    caption-side Để xác định vị trí của tiêu đề bảng, bạn có thể sử dụng thuộc tính caption-side. Có 4 giá trị cho caption-side:  top: tiêu đề bảng sẽ hiển thị ở trên cùng bottom: tiêu đề bảng sẽ hiển thị ở dưới cùng  table {     border-collapse: collapse; } caption {     caption-side: bottom; } table, th, td {     border: 1px solid black; } <table>     <caption>Tiêu đề bảng</caption>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    table-layout Để xác định cách thức hiển thị bảng, bạn có thể sử dụng thuộc tính table-layout. Có 2 giá trị cho table-layout:  auto: bảng sẽ tự động điều chỉnh kích thước của cột fixed: bảng sẽ giữ nguyên kích thước của cột  table {     table-layout: fixed;     width: 25%; } table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>    Căn chỉnh văn bản trong ô Để căn chỉnh văn bản trong ô, bạn có thể sử dụng các thuộc tính sau:  text-align: căn chỉnh văn bản theo chiều ngang vertical-align: căn chỉnh văn bản theo chiều dọc    Lưu ý: bạn có thể sử dụng thêm các thuộc tính khác như background-color,                     color, font-size, font-weight, font-style,                     text-transform, text-decoration... để tạo ra hiệu ứng đẹp mắt cho bảng.                   Có thể bạn đã quên: trong bài học về HTML đã có nói về cách tạo bảng, bạn có thể tham khảo                     tại đây."
    },
    {
        "title": "border",
        "content": "border Để xác định kiểu viền của bảng, bạn có thể sử dụng thuộc tính border. Có 3 giá trị cho border:  border-width: độ rộng của đường viền border-style: kiểu của đường viền border-color: màu sắc của đường viền  table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>                           Để bảng hiện kích thước bằng phần tử cha có thể thêm thuộc tính width: 100% vào                         bảng."
    },
    {
        "title": "border-collapse",
        "content": "border-collapse Để xác định cách thức hiển thị đường viền của bảng, bạn có thể sử dụng thuộc tính                         border-collapse.                      Có 2 giá trị cho border-collapse:  separate: đường viền sẽ hiển thị riêng biệt cho mỗi ô collapse: đường viền sẽ hiển thị chung cho các ô  table, th, td {     border: 1px solid black; } table {     border-collapse: collapse; } <table style=\"width: 100%;\">     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>"
    },
    {
        "title": "Kích thước bảng",
        "content": "Kích thước bảng Để xác định kích thước của bảng, bạn có thể sử dụng thuộc tính width và                         height."
    },
    {
        "title": "border-spacing",
        "content": "border-spacing Để xác định khoảng cách giữa các ô của bảng, bạn có thể sử dụng thuộc tính                         border-spacing.                      table {     border-collapse: separate;     border-spacing: 10px; }     table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>"
    },
    {
        "title": "caption-side",
        "content": "caption-side Để xác định vị trí của tiêu đề bảng, bạn có thể sử dụng thuộc tính caption-side. Có 4 giá trị cho caption-side:  top: tiêu đề bảng sẽ hiển thị ở trên cùng bottom: tiêu đề bảng sẽ hiển thị ở dưới cùng  table {     border-collapse: collapse; } caption {     caption-side: bottom; } table, th, td {     border: 1px solid black; } <table>     <caption>Tiêu đề bảng</caption>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>"
    },
    {
        "title": "table-layout",
        "content": "table-layout Để xác định cách thức hiển thị bảng, bạn có thể sử dụng thuộc tính table-layout. Có 2 giá trị cho table-layout:  auto: bảng sẽ tự động điều chỉnh kích thước của cột fixed: bảng sẽ giữ nguyên kích thước của cột  table {     table-layout: fixed;     width: 25%; } table, th, td {     border: 1px solid black; } <table>     <tr>         <td>tiêu đề 1</td>         <td>tiêu đề 2</td>     </tr>     <tr>         <td>hàng 1, cột 1</td>         <td>hàng 1, cột 2</td>     </tr>     <tr>         <td>hàng 2, cột 1</td>         <td>hàng 2, cột 2</td>     </tr> </table>"
    },
    {
        "title": "Căn chỉnh văn bản trong ô",
        "content": "Căn chỉnh văn bản trong ô Để căn chỉnh văn bản trong ô, bạn có thể sử dụng các thuộc tính sau:  text-align: căn chỉnh văn bản theo chiều ngang vertical-align: căn chỉnh văn bản theo chiều dọc"
    },
    {
        "title": "CSS display",
        "content": "CSS display Thuộc tính display xác định cách thức hiển thị của một phần tử. Có một số giá trị cho thuộc tính display:    Giá trị Mô tả   block Hiển thị phần tử như một khối   inline Hiển thị phần tử như một dòng   inline-block Hiển thị phần tử như một dòng nhưng có thể thiết lập chiều rộng và chiều cao   none Ẩn phần tử   flex Hiển thị phần tử như một container linh hoạt   inline-flex Hiển thị phần tử như một container linh hoạt nhưng như một dòng   grid Hiển thị phần tử như một container lưới   inline-grid Hiển thị phần tử như một container lưới nhưng như một dòng   table Hiển thị phần tử như một bảng   inline-table Hiển thị phần tử như một bảng nhưng như một dòng   table-cell Hiển thị phần tử như một ô trong bảng   table-row Hiển thị phần tử như một hàng trong bảng   table-row-group Hiển thị phần tử như một nhóm hàng trong bảng   table-column Hiển thị phần tử như một cột trong bảng   table-column-group Hiển thị phần tử như một nhóm cột trong bảng   table-header-group Hiển thị phần tử như một nhóm tiêu đề trong bảng   table-footer-group Hiển thị phần tử như một nhóm chân trong bảng   list-item Hiển thị phần tử như một mục trong danh sách   run-in Hiển thị phần tử như một phần tử block hoặc inline tùy thuộc vào ngữ cảnh     Chú ý: bạn có thể thay đổi giá trị của thuộc tính display sao cho phù hợp với                     thiết kế của bạn.                   display: none; Thuộc tính display: none; sẽ ẩn phần tử. .hide {     display: none; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p>                     <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt. Điều này giúp bạn ẩn phần tử mà                         không cần xóa nó khỏi mã nguồn.                        visibility: hidden; Thuộc tính visibility: hidden; sẽ ẩn phần tử nhưng không ảnh hưởng đến không gian                         của phần tử. .hide {     visibility: hidden; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p> <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt nhưng vẫn chiếm không gian trên                         trang web."
    },
    {
        "title": "display: none;",
        "content": "display: none; Thuộc tính display: none; sẽ ẩn phần tử. .hide {     display: none; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p>                     <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt. Điều này giúp bạn ẩn phần tử mà                         không cần xóa nó khỏi mã nguồn."
    },
    {
        "title": "visibility: hidden;",
        "content": "visibility: hidden; Thuộc tính visibility: hidden; sẽ ẩn phần tử nhưng không ảnh hưởng đến không gian                         của phần tử. .hide {     visibility: hidden; } <p>Đây là một đoạn văn bản thứ nhất</p> <p class=\"hide\">Đây là một đoạn văn bản thứ hai</p> <p>Đây là một đoạn văn bản thứ ba</p> <p>Đây là một đoạn văn bản thứ tư</p>   Lưu ý: phần tử ẩn sẽ không hiển thị trên trình duyệt nhưng vẫn chiếm không gian trên                         trang web."
    },
    {
        "title": "Position trong CSS",
        "content": "Position trong CSS Thuộc tính position xác định cách thức hiển thị của một phần tử. Có một số giá trị cho thuộc tính position:    Giá trị Mô tả   static Phần tử sẽ hiển thị theo cách mặc định, không chịu ảnh hưởng bởi những thuộc tính                                 top, bottom, left, right    relative Phần tử sẽ hiển thị tương đối so với vị trí mặc định.   absolute Phần tử sẽ hiển thị tuyệt đối so với phần tử cha   fixed Phần tử sẽ hiển thị tuyệt đối so với cửa sổ trình duyệt   sticky Phần tử sẽ hiển thị tương đối so với vị trí mặc định nhưng sẽ trở thành tuyệt đối khi                                 cuộn trang    mã nguồn cho các thẻ trên .static {     position: static;     border: 1px solid black;     width: 200px;     height: 100px;     padding: 10px;     margin: 10px; }  .relative {     position: relative;     border: 1px solid black;     padding: 10px;     margin: 10px;     width: 200px;     height: 150px;     left: 20px; }  .absolute {     position: absolute;     border: 1px solid black;     padding: 10px;     margin: 10px; }  .fixed {     position: fixed;     border: 1px solid black;     padding: 10px;     margin: 10px;     bottom: 0;     right: 0; }  .sticky {     background-color: red;     position: sticky;     border: 1px solid black;     width: 200px;     padding: 10px;     margin: 10px;     top: 0; }                       <div class=\"static\"> static</div> <div class=\"relative\"> relative <div class=\"sticky\"> sticky</div>     <div class=\"absolute\"> absolute</div> </div> <div class=\"fixed\"> fixed</div>"
    },
    {
        "title": "Z-index",
        "content": "Z-index Thuộc tính z-index xác định thứ tự hiển thị của các phần tử. Giá trị của z-index phải là số nguyên. Phần tử có giá trị z-index lớn hơn                     sẽ hiển thị trên phần tử có giá trị z-index nhỏ hơn. .div1 {     position: fixed;     left: 10px;     top: 10px;     width: 100px;     height: 100px;     background-color: red;     z-index: 1; } .div2 {     position: fixed;     left: 20px;     top: 20px;     width: 100px;     height: 100px;     background-color: green;     z-index: 0; } .div3 {     position: fixed;     left: 40px;     top: 40px;     width: 100px;     height: 100px;     background-color: blue;     z-index: 2; }  <div class=\"div1\"></div> <div class=\"div2\"></div> <div class=\"div3\"></div>"
    },
    {
        "title": "Overflow",
        "content": "Overflow Thuộc tính overflow xác định cách thức hiển thị nội dung khi nội dung vượt quá kích thước                 của phần tử. Có một số giá trị cho thuộc tính overflow:    Giá trị Mô tả   visible Nội dung sẽ hiển thị ngoài phần tử   hidden Nội dung sẽ bị ẩn   scroll Hiển thị thanh cuộn   auto Hiển thị thanh cuộn tự động     overflow: visible; Thuộc tính overflow: visible; cho phép nội dung hiển thị ngoài phần tử. .overflow-visible {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: visible; } <div class=\"overflow-visible\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.     </p> </div>    overflow: hidden; Thuộc tính overflow: hidden; sẽ ẩn nội dung khi nội dung vượt quá kích thước của phần                     tử. .overflow-hidden {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: hidden; } <div class=\"overflow-hidden\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div>    overflow: scroll; Thuộc tính overflow: scroll; sẽ hiển thị thanh cuộn khi nội dung vượt quá kích thước                     của phần tử. .overflow-scroll {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: scroll; } <div class=\"overflow-scroll\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div> <div class=\"overflow-scroll\">     <p>short content</p> </div>    overflow: auto; Thuộc tính overflow: auto; sẽ hiển thị thanh cuộn tự động khi nội dung vượt quá kích                     thước của phần tử. .overflow-auto {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: auto; } <div class=\"overflow-auto\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div> <div class=\"overflow-auto\">     <p>short content</p> </div>    overflow-x và overflow-y Bạn cũng có thể sử dụng các thuộc tính overflow-x và overflow-y để xác định                     cách thức hiển thị nội dung theo chiều ngang và chiều dọc."
    },
    {
        "title": "overflow: visible;",
        "content": "overflow: visible; Thuộc tính overflow: visible; cho phép nội dung hiển thị ngoài phần tử. .overflow-visible {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: visible; } <div class=\"overflow-visible\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.     </p> </div>"
    },
    {
        "title": "overflow: hidden;",
        "content": "overflow: hidden; Thuộc tính overflow: hidden; sẽ ẩn nội dung khi nội dung vượt quá kích thước của phần                     tử. .overflow-hidden {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: hidden; } <div class=\"overflow-hidden\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div>"
    },
    {
        "title": "overflow: scroll;",
        "content": "overflow: scroll; Thuộc tính overflow: scroll; sẽ hiển thị thanh cuộn khi nội dung vượt quá kích thước                     của phần tử. .overflow-scroll {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: scroll; } <div class=\"overflow-scroll\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div> <div class=\"overflow-scroll\">     <p>short content</p> </div>"
    },
    {
        "title": "overflow: auto;",
        "content": "overflow: auto; Thuộc tính overflow: auto; sẽ hiển thị thanh cuộn tự động khi nội dung vượt quá kích                     thước của phần tử. .overflow-auto {     width: 200px;     height: 100px;     border: 1px solid black;     overflow: auto; } <div class=\"overflow-auto\">     <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni tenetur tempora porro et quo doloribus voluptatum dignissimos fugiat dolorem accusantium, repellendus molestiae a. Deserunt labore molestiae inventore eum quis. Dolorem.</p> </div> <div class=\"overflow-auto\">     <p>short content</p> </div>"
    },
    {
        "title": "overflow-x và overflow-y",
        "content": "overflow-x và overflow-y Bạn cũng có thể sử dụng các thuộc tính overflow-x và overflow-y để xác định                     cách thức hiển thị nội dung theo chiều ngang và chiều dọc."
    },
    {
        "title": "Float trong CSS",
        "content": "Float trong CSS Thuộc tính float xác định cách thức hiển thị của một phần tử. Có một số giá trị cho thuộc tính float:    Giá trị Mô tả   left Phần tử sẽ nổi sang bên trái   right Phần tử sẽ nổi sang bên phải   none Phần tử sẽ không nổi   inherit Phần tử sẽ kế thừa giá trị của phần tử cha    Một ví dụ cho các thuộc tính trên .left {     float: left;     width: 100px;     height: 100px;     background-color: red; } .right {     float: right;     width: 100px;     height: 100px;     background-color: green; } .none {     float: none;     width: 100px;     height: 100px;     background-color: blue; } <div>     <h1>Float left</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus porro culpa saepe rem voluptatum repellendus esse dolorem minus iusto odit temporibus impedit doloremque, consectetur quas. Voluptatem quibusdam reiciendis incidunt velit.</p>     <p><img class=\"left\" src=\"hinh_anh.gif\" alt=\"image\">Lorem ipsum dolor sit amet consectetur adipisicing elit. In reiciendis error aut, quibusdam ex ipsa voluptatibus quod alias libero pariatur magnam voluptatum cumque perspiciatis ab doloremque? Accusamus enim quo aspernatur.</p> </div> <div>     <h1>Float right</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Et nisi mollitia voluptate architecto, deleniti atque ipsam blanditiis nam vel, tempora quos aut officiis delectus molestiae ex aliquam accusamus veritatis quis.</p>     <p><img class=\"right\" src=\"hinh_anh.gif\" alt=\"image\">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sequi facilis sapiente, voluptatem suscipit adipisci doloribus ea exercitationem ad! Dolorum a vel facilis optio id ipsum nulla temporibus distinctio? Eveniet, nihil.</p> </div> <div>     <h1>Float none</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus porro culpa saepe rem voluptatum repellendus esse dolorem minus iusto odit temporibus impedit doloremque, consectetur quas. Voluptatem quibusdam reiciendis incidunt velit.</p>     <p><img class=\"none\" src=\"hinh_anh.gif\" alt=\"image\">Lorem ipsum dolor sit amet consectetur adipisicing elit. In reiciendis error aut, quibusdam ex ipsa voluptatibus quod alias libero pariatur magnam voluptatum cumque perspiciatis ab doloremque? Accusamus enim quo aspernatur.</p> </div>   Clear trong CSS Thuộc tính clear xác định cách thức xử lý các phần tử phía sau của một phần tử nổi.                      giá trị của clear là giá trị float của phần tử nằm trước nó                  .left {     float: left;     width: 100px;     height: 100px;     background-color: red; }  .not-clear {     width: 200px;     height: 200px;     background-color: green; }  .clear-left {     clear: left;     width: 200px;     height: 200px;     background-color: green; }  <div class=\"left\"></div> <div class=\"not-clear\"></div> <div class=\"left\"></div> <div class=\"clear-left\"></div>     Xử lý khi phần tử float có kích thước lớn hơn phần tử cha                      Ví dụ                  .parent {     border: 1px solid black; }  .right {     float: right;     width: 150px;     height: 150px;     background-color: red; }  <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>  Có 2 cách xử lý  Cách 1: Sử dụng thuộc tính overflow Sử dụng thuộc tính overflow: auto; cho phần tử cha. .parent {     border: 1px solid black;     overflow: auto; } .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>    Cách 2: Sử dụng thuộc tính clear Sử dụng thuộc tính clear: both; cho phần tử sau phần tử float. .parent {     border: 1px solid black; }  .parent::after {     content: \"\";     display: block;     clear: both; }  .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>    Nguyên lý hoạt động 2 cách trên:   Cách 1: khi sử dụng thuộc tính overflow: auto; cho phần tử cha, phần tử cha sẽ                             tự động điều chỉnh kích thước để chứa phần tử float. Cách 2: khi sử dụng thuộc tính clear: both; cho phần tử sau phần tử float, phần                             tử                             đó sẽ không nổi sang bên trái hoặc bên phải của phần tử float.     Ứng dụng của float Thuộc tính float thường được sử dụng để tạo cột trong thiết kế web.  Thiết kế cột bằng float Để tạo cột bằng float, bạn cần:  Chia phần tử cha thành các cột con Sử dụng thuộc tính float để nổi các cột con sang bên trái hoặc bên phải Sử dụng thuộc tính width để xác định kích thước của cột Sử dụng thuộc tính margin để tạo khoảng cách giữa các cột  Ví dụ * {     box-sizing: border-box; } .column {     float: left;     width: 33%;     padding: 10px;     border: 1px solid black; }  <div class=\"column\" style=\"background-color: #444; \">     <h2>Column 1</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #666; \">     <h2>Column 2</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #888; \">     <h2>Column 3</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>   box-sizing là gì? Thuộc tính box-sizing xác định cách tính toán kích thước của một phần tử. Có 3 giá trị cho thuộc tính box-sizing:  content-box: kích thước của phần tử chỉ tính từ nội dung bên trong border-box: kích thước của phần tử tính từ nội dung, padding và border inherit: phần tử sẽ kế thừa giá trị của phần tử cha     Thiết kế hình ảnh cạnh nhau  * {     box-sizing: border-box; } .img-container {     float: left;     width: 33.33%;     padding: 10px;     box-sizing: border-box; } .img-container img {     width: 100%; } .clearfix::after {     content: \"\";     clear: both;     display: table; } <h2>Hình ảnh cạnh nhau</h2> <div class=\"clearfix\">     <div class=\"img-container\">         <img src=\"hinh_anh1.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh2.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh3.jpg\" alt=\"image\">     </div> </div>    clearfix là gì? Để xử lý float, bạn cần thêm một phần tử sau các phần tử float và sử dụng thuộc tính                             clear: both; cho phần tử đó.                          Trong ví dụ trên, chúng ta sử dụng một phần tử div với class                             clearfix                             để xử lý float.                                                       Bạn có thể lưu trữ class clearfix để tiện sử dụng trong các trường hợp khác.                                                      Làm sao để các box có chiều cao bằng nhau?                      Trong ví dụ trước, bạn đã học cách thả nổi các hộp cạnh nhau với chiều rộng bằng nhau. Tuy nhiên,                         không dễ để tạo ra các hộp nổi có chiều cao bằng nhau. Tuy nhiên, cách khắc phục nhanh là đặt                         chiều cao cố định, như trong ví dụ bên dưới:  * {     box-sizing: border-box; } .column {     float: left;     width: 50%;     padding: 10px;     border: 1px solid black;     height: 200px; }  .clearfix::after {     content: \"\";     clear: both;     display: table; } <div class=\"clearfix\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>   Lưu ý:  đây không phải là phương án tối ưu nhất, cực kì tệ khi bạn muốn thay đổi kích                         thước của các hộp. Bạn nên sử dụng JavaScript hoặc Flexbox để giải quyết vấn đề này.                      Cách tối ưu hơn - Flexbox * {     box-sizing: border-box; } .flex-container {     display: flex;     flex-wrap: nowrap; }  .flex-container .column {     width: 50%;     padding: 10px;     border: 1px solid black; }   <div class=\"flex-container\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>    Tạo menu dẫn hướng Thuộc tính float cũng được sử dụng để tạo menu dẫn hướng ngang.  ul {     list-style-type: none;     margin: 0;     padding: 0;     overflow: hidden;     background-color: #111; }     li {         float: left;     }     li a {         display: block;         color: white;         text-align: center;         padding: 14px 16px;         text-decoration: none;     }     li a:hover {         background-color: #555;     } <ul>     <li><a href=\"#home\">Trang chủ</a></li>     <li><a href=\"#news\">Tin tức</a></li>     <li><a href=\"#contact\">Liên hệ</a></li>     <li><a href=\"#reference\">Tham khảo</a></li> </ul>     inline-block Thuộc tính display: inline-block; cho phép phần tử hiển thị như một phần tử inline nhưng                     có thể thiết lập kích thước và margin. .inline-block {     display: inline-block;     width: 100px;     height: 100px;     margin: 10px;     background-color: red; } <div class=\"inline-block\"></div> <div class=\"inline-block\"></div> <div class=\"inline-block\"></div>    CSS - căn chỉnh chiều ngang và chiều dọc  Căn giữa theo chiều ngang các phần tử Để căn giữa một phần tử theo chiều ngang, bạn có thể sử dụng thuộc tính margin với                         giá trị                         auto.                      .center {     width: 200px;     height: 200px;     margin: 0 auto;     background-color: red; } <div class=\"center\"></div>   Lưu ý:  Để sử dụng thuộc tính margin: 0 auto;, phần tử cần phải có chiều                         rộng                         cố định.                        Căn giữa văn bản Để căn giữa văn bản, bạn có thể sử dụng thuộc tính text-align với giá trị                         center.                      .center-text {     border: 2px solid green;     text-align: center; } <div class=\"center-text\">     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>    Căn giữa hình ảnh Để căn giữa hình ảnh, bạn có thể sử dụng thuộc tính display: block; và                         margin                         với giá trị auto.                      .center-img {     display: block;     margin: auto; } <img class=\"center-img\" src=\"hinh_anh.png\" alt=\"image\">    Căn trái và phải - dùng position Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính position với giá trị                         absolute.                      .left {     position: absolute;     left: 0;     background-color: #444;     color: white;     width: 150px;     height: 150px; } .right {     position: absolute;     right: 0;     color: white;     background-color: #666;     width: 150px;     height: 150px; } <div class=\"left\">Left</div> <div class=\"right\">Right</div>   Chú ý: việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác.                        Căn trái và phải - dùng float Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính float.                          Việc căn trái hoặc phải bằng float đã được giới thiệu ở phần trước. Bạn có thể xem lại phần đó                         để biết cách sử dụng float.                        Căn giữa theo chiều dọc - dùng padding Để căn giữa một phần tử theo chiều dọc, bạn có thể sử dụng thuộc tính padding với                         giá trị                         auto.                      .center-v {     padding: 20px 0;     border: 3px solid green; } <div class=\"center-v\">Nội dung này sẽ nằm giữa theo chiều dọc</div>   Lưu ý:  thuộc tính padding có 2 giá trị, giá trị đầu tiên là cho phần trên và dưới, giá                         trị thứ hai là cho phần trái và phải.                         padding: (top & bottom)px (right & left)px;                        Căn giữa theo chiều dọc - dùng line-height Để căn giữa một dòng văn bản theo chiều dọc, bạn có thể sử dụng thuộc tính                         line-height.                      .center-line {     height: 200px;     line-height: 200px;     border: 3px solid green; } <div class=\"center-line\">     <p>Nội dung này sẽ nằm giữa theo chiều dọc<\\p> </div>   Lưu ý:  giá trị của thuộc tính line-height phải bằng với chiều cao của phần                         tử.                       Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-line p {     line-height: 1.5;     display: inline-block;     vertical-align: middle; }                             Căn giữa với position và transform                      Để căn giữa một phần tử, bạn có thể sử dụng thuộc tính position với giá trị                         absolute và transform.                      .parent {     position: relative;     width: 300px;     height: 300px;     border: 3px solid red; } .center-transform {     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     border: 3px solid green; } <div class=\"parent\">     <p class=\"center-transform\"> Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</p>                    </div>   Lưu ý:  việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác.                       Cách thức hoạt động: thuộc tính top: 50% và left: 50% sẽ đặt                         phần tử ở giữa theo chiều ngang và chiều dọc của phần tử cha. Sau đó, thuộc tính                         transform: translate(-50%, -50%); sẽ dịch chuyển phần tử đi lùi 50% chiều rộng và                         chiều cao của chính nó.                                                 Căn giữa với Flexbox                      Để căn giữa một phần tử, bạn có thể sử dụng Flexbox. .parent-flex {     display: flex;     justify-content: center;     align-items: center;     width: 400px;     height: 300px;     border: 3px solid red; } .center-flex {     width: 200px;     border: 3px solid green; } <div class=\"parent-flex\">     <div class=\"center-flex\">Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</div> </div>   Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-flex p {     text-align: center; }   Các thuộc tính trong display: flex;  display: flex;: thiết lập phần tử cha thành flex container justify-content: center;: căn giữa theo chiều ngang align-items: center;: căn giữa theo chiều dọc                           Các bộ chọn kết hợp trong CSS                  Các bộ chọn kết hợp cho phép bạn chọn phần tử dựa trên nhiều điều kiện. Các bộ chọn:   Bộ chọn con cháu (Dấu cách) Bộ chọn trực tiếp (>) Bộ chọn anh em (+) Bộ chọn sau (~)   Bộ chọn con cháu (Dấu cách) Bộ chọn con cháu chọn tất cả các phần tử con cháu của một phần tử cha. (phần tử này có thể nằm                         trực tiếp trong phần tử cha hoặc nằm bên trong phần tử khác nằm trong phần tử cha) div p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn trực tiếp (>) Bộ chọn trực tiếp chọn tất cả các phần tử con của một phần tử cha. div > p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn anh em liền kề(+) Bộ chọn anh em chọn phần tử anh em ngay sau phần tử đầu tiên. div + p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn sau (~) Bộ chọn sau chọn tất cả các phần tử anh em sau phần tử đầu tiên. div ~ p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>                          Lớp giả trong CSS (Pseudo-classes)                  Lớp giả trong CSS là cách chọn phần tử dựa trên trạng thái hoặc vị trí của phần tử. Cú pháp CSS cho lớp giả như sau:  selector:pseudo-class {     property: value; } Các loại lớp giả    Loại Ví dụ Mô tả   :active a:active Chọn phần tử khi nó được kích hoạt   :checked input:checked Chọn phần tử input được chọn   :disabled input:disabled Chọn phần tử input bị vô hiệu hóa   :empty p:empty Chọn phần tử p không có nội dung   :enabled input:enabled Chọn phần tử input được kích hoạt   :first-child p:first-child Chọn phần tử p là phần tử đầu tiên của phần tử cha (không hợp lệ nếu trước thẻ p có anh                                 chị em là thẻ khác)   :first-of-type p:first-of-type Chọn phần tử p là phần tử mang thẻ p đầu tiên xuất hiện (kể cả trước nó có những thẻ                                 khác vẫn được)   :focus input:focus Chọn phần tử input khi nó được focus   :hover a:hover Chọn phần tử a khi con trỏ chuột di chuyển qua phần tử đó   :in-range input:in-range Chọn phần tử input có giá trị nằm trong khoảng cho phép   :invalid input:invalid Chọn phần tử input không hợp lệ   :lang(language) p:lang(vi) Chọn phần tử p có ngôn ngữ là tiếng Việt   :last-child p:last-child Chọn phần tử p là phần tử cuối cùng của phần tử cha (không hợp lệ nếu sau thẻ p có anh                                 chị em là thẻ khác)   :last-of-type p:last-of-type Chọn phần tử p là phần tử mang thẻ p cuối cùng xuất hiện (kể cả sau nó có những thẻ khác                                 vẫn được)   :link a:link Chọn phần tử a chưa được truy cập   :not(selector) :not(p) Chọn tất cả các phần tử không phải là phần tử p   :nth-child(n) p:nth-child(2) Chọn phần tử p là phần tử thứ 2 của phần tử cha   :nth-last-child(n) p:nth-last-child(2) Chọn phần tử p là phần tử thứ 2 từ cuối của phần tử cha   :nth-last-of-type(n) p:nth-last-of-type(2) Chọn phần tử p là phần tử mang thẻ p thứ 2 từ cuối xuất hiện   :nth-of-type(n) p:nth-of-type(2) Chọn phần tử p là phần tử mang thẻ p thứ 2 xuất hiện   :only-of-type p:only-of-type Chọn phần tử p là phần tử duy nhất mang thẻ p xuất hiện   :only-child p:only-child Chọn phần tử p là phần tử duy nhất của phần tử cha   :optional input:optional Chọn phần tử input không bắt buộc nhập (không có thuộc tính required)   :out-of-range input:out-of-range Chọn phần tử input có giá trị nằm ngoài khoảng cho phép   :read-only input:read-only Chọn phần tử input chỉ đọc   :read-write input:read-write Chọn phần tử input có thể đọc và ghi   :required input:required Chọn phần tử input bắt buộc nhập (có thuộc tính required)   :root :root Chọn phần tử gốc của trang web   :target #news:target Chọn phần tử có id news khi nó được chọn   :valid input:valid Chọn phần tử input hợp lệ   :visited a:visited Chọn phần tử a đã được truy cập                           Phần tử giả trong CSS (Pseudo-elements)                  Phần tử giả trong CSS là cách chọn phần tử dựa trên vị trí của phần tử. Cú pháp CSS cho phần tử giả như sau:  selector::pseudo-element {     property: value; }  ::first-line Chọn dòng đầu tiên của một phần tử văn bản. p::first-line {     color: red;     font-size: 20px; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.     Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde animi, blanditiis iure nobis odio voluptatibus quas omnis commodi ducimus voluptates, aspernatur quae mollitia suscipit deserunt officia praesentium, dolorum dignissimos non.     Lorem, ipsum dolor sit amet consectetur adipisicing elit. Temporibus minus consequuntur eos esse, officiis asperiores sequi ducimus eaque aliquam odio, dolorem in earum ipsum quaerat veritatis fugiat vero fugit eius!</p>   Lưu ý:  thuộc tính ::first-line chỉ hoạt động với phần tử block-level.                        ::first-letter Chọn chữ cái đầu tiên của một phần tử văn bản. p::first-letter {     color: red;     font-size: 20px; }  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::first-letter chỉ hoạt động với phần tử block-level.                        ::before Chèn nội dung vào trước một phần tử. p::before {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::before chỉ hoạt động với phần tử block-level.                        ::after Chèn nội dung vào sau một phần tử. p::after {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::after chỉ hoạt động với phần tử block-level.                        ::selection Chọn phần tử khi nó được chọn. ::selection {     background-color: tomato;     color: white; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::selection chỉ hoạt động với phần tử block-level.                        ::placeholder Chọn phần tử input khi nó có placeholder. input::placeholder {     color: red; } <input type=\"text\" placeholder=\"Nhập tên của bạn\">   Lưu ý:  thuộc tính ::placeholder chỉ hoạt động với phần tử input.                        ::marker Chọn dấu đánh dấu của một phần tử list. li::marker {     color: red; } <ul>     <li>Item 1</li>     <li>Item 2</li>     <li>Item 3</li> </ul>   Lưu ý:  thuộc tính ::marker chỉ hoạt động với phần tử list.                         Độ mờ/ độ trong suốt với CSS                      thuộc tính opacity trong CSS được sử dụng để xác định độ mờ của một phần tử.                                       Giá trị của thuộc tính opacity có thể từ 0.0 đến 1.0. Giá trị 0.0 là hoàn toàn trong                     suốt                     và giá trị 1.0 là hoàn toàn không trong suốt.                  .clearfix::after {     content: \"\";     clear: both;     display: table; } figure {     float: left;     width: 33.33%;     margin: 0; } figure img {     width: 100%;     height: auto; } figure:first-child img {     opacity: 0.2; } figure:nth-child(2) img {     opacity: 0.5; } <div class=\"clearfix\">     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 0.2\" >         <figcaption>Độ mờ 0.2</figcaption>     </figure>     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 0.5\" >         <figcaption>Độ mờ 0.5</figcaption>     </figure>     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 1\" >         <figcaption>Độ mờ 1</figcaption>     </figure> </div>   Ứng dụng - văn bản trong hộp trong suốt Trong ví dụ này, chúng ta sẽ tạo một hiệu ứng trong suốt trên nền màu khá thú vị .background {     background: url('repeat.png') repeat red;     border: 2px solid red;     width: 100%;     height: 300px; }  .transbox {     width: 50%;     height: 150px;     margin: auto;     background-color: #ffffff;     border: 1px solid black;     opacity: 0.6;     border-radius: 10px;     margin-top: calc((300px/2) - (150px / 2)); }  .transbox p {     margin: 30px;     font-weight: bold; } <div class=\"background\">     <div class=\"transbox\">         <p>Đây là văn bản trong hộp trong suốt.</p>     </div> </div>                          Thanh điều hướng CSS                                       Thanh điều hướng là danh sách các liên kết hoặc nút được sắp xếp theo chiều ngang hoặc chiều dọc.                   Thanh điều hướng dọc Thanh điều hướng dọc được sắp xếp theo chiều dọc. Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 200px;     background-color: #333; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }   Áp dụng cho một trang Mã HTML <ul>     <li><a class=\"active\" href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> <main>     <section id=\"html\">         <h1>HTML</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab dolorem omnis nostrum rem architecto aut repudiandae, provident dolorum suscipit quis repellendus necessitatibus in dolore. Ratione quo recusandae excepturi unde aliquam?</p>     </section>     <section id=\"css\">         <h1>CSS</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto mollitia dolores nulla impedit. Minus veniam mollitia perspiciatis aliquid amet consequuntur quia. Fugit beatae quam voluptas ipsum, modi est molestias quasi.</p>         <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Libero at repellat ipsam accusantium, consectetur ratione sapiente eos ab, ipsa aliquam minus? Odio quod ullam itaque aut explicabo possimus temporibus! Accusantium.</p>     </section>     <section id=\"bt\">         <h1>Booststrap</h1>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deserunt qui eius culpa vitae explicabo, incidunt voluptatibus amet voluptate recusandae ea quae et perspiciatis dicta, voluptates natus ex. Numquam, reiciendis possimus?</p>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime porro hic dicta perspiciatis impedit quibusdam dignissimos amet aspernatur provident modi? Unde illum impedit, itaque in cum modi fugit dolor soluta.</p>     </section>     <section id=\"js\">         <h1>JavaScript</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam corrupti, magnam tenetur suscipit voluptate modi asperiores doloribus dignissimos, odit ad repellendus, itaque sit. Dolorem, excepturi laboriosam veritatis itaque ab reprehenderit?</p>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos blanditiis magnam architecto debitis nisi minus placeat nihil, fugiat totam ducimus inventore rem ad voluptatibus id exercitationem maxime quod sit laborum?</p>     </section> </main> Mã CSS * {     box-sizing: border-box;     margin: 0;     padding: 0; } ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 20%;     height: 100%;     position: fixed;     background-color: #333; } li a.active{     background-color: #4CAF50; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a:hover:not(.active) {     background-color: #888;     color: black; }  main {     margin-left: 20%;     padding: 1px 16px; }  section {     margin-top: 50px;     padding: 16px;     background-color: #f1f1f1;     height: 1000px; }  section h1 {     margin-top: 0;     font-family: Arial, sans-serif;     color: #333; }  section p {     font-family: 'Times New Roman', serif;     color: #111; } html {     scroll-behavior: smooth; } Mã javaScript var a = document.getElementsByTagName('a'); for (var i = 0; i < a.length; i++) {     a[i].addEventListener('click', function() {         var current = document.querySelector('.active');         if (current) {             current.classList.remove('active');         }         this.classList.add('active');     }); }    Thanh điều hướng ngang Thanh điều hướng ngang được sắp xếp theo chiều ngang.  Mẹo:  chỉ cần thêm thuộc tính display: inline-block; (hoặc                         float: left;) vào thẻ li.                       Lưu ý:  nếu sử dụng float-left bạn cần thêm overflow: hidden vào thẻ cha của li.                      Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 100%;     background-color: #333;     overflow: hidden; } li {     float: left; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }                          Tạo danh sách thả xuống với CSS                   Cách hoạt động:  khi người dùng di chuyển chuột qua một phần tử, một danh sách thả xuống sẽ                     được hiển thị cho người dùng chọn.                   Một danh sách thả xuống đơn giản Mã HTML <div class=\"dropdown\">     <span>Di chuột vào đây</span>     <div class=\"dropdown-content\">       <p>Chào cậu!</p>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }  .dropdown-content {     display: none;     position: absolute;     background-color: #f1f1f1;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     padding: 12px 16px;     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }   Giải thích:   Thuộc tính position: relative; cho phần tử cha để xác định vị trí của phần                                 tử con. Thuộc tính display: none; cho phần tử con để ẩn nó đi ban đầu. Thuộc tính position: absolute; cho phần tử con để xác định vị trí của nó so                                 với phần tử cha. Thuộc tính display: block; cho phần tử con khi người dùng di chuyển chuột                                 qua phần tử cha.                              Menu thả xuống                      Mã HTML <div class=\"dropdown\">     <button class=\"dropbtn\">Danh sách thả xuống</button>     <div class=\"dropdown-content\">       <a href=\"#\">Nội dung 1</a>       <a href=\"#\">Nội dung 2</a>       <a href=\"#\">Nội dung 3</a>     </div>   </div> Mã CSS .dropbtn {   background-color: #4CAF50;   color: white;   padding: 16px;   font-size: 16px;   border: none;   cursor: pointer; }  .dropdown {   position: relative;   display: inline-block; }  .dropdown-content {   display: none;   position: absolute;   background-color: #f9f9f9;   min-width: 160px;   box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);   z-index: 1; }  .dropdown-content a {   color: black;   padding: 12px 16px;   text-decoration: none;   display: block; }  .dropdown-content a:hover {background-color: #f1f1f1}  .dropdown:hover .dropdown-content {   display: block; }  .dropdown:hover .dropbtn {   background-color: #3e8e41; }                             Hình ảnh thả xuống                      Mã HTML <div class=\"dropdown\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"100\" height=\"50\">     <div class=\"dropdown-content\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"300\" height=\"200\">     <div class=\"desc\">Hình ảnh cute đáng yêu</div>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }    .dropdown-content {     display: none;     position: absolute;     background-color: #f9f9f9;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }  .desc {     padding: 15px;     text-align: center; }                          Tạo thư viện ảnh với CSS                  Mã HTML <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> Mã CSS div.gallery {     margin: 5px;     border: 1px solid green;     float: left;     width: 180px;     border-radius: 10px; }  div.gallery:hover {     border: 1px solid red; }  div.gallery img {     width: 100%;     height: auto;     filter: grayscale(100%); }  div.gallery:hover img {     filter: grayscale(0%);     transform: scale(1.1); }  div.desc {     padding: 15px;     text-align: center; }                         Cắt ảnh với CSS                                       Cắt ảnh với CSS là cách cắt một phần của hình ảnh và hiển thị nó trên trang web.                   Tại sao phải cắt ảnh?                          Cắt ảnh hay còn gọi là CSS sprite là một kỹ thuật giúp tối ưu hóa tốc độ tải trang web. Thay vì                         tải nhiều ảnh nhỏ, chúng ta có thể tải một ảnh lớn chứa tất cả các ảnh nhỏ và hiển thị phần cần                         thiết.                         Những icons tuy chỉ là một hình ảnh rất nhỏ nhưng với một trang web có từ vài chục đến vài trăm                         icons thì nó sẽ ảnh hưởng lớn đến hiệu suât tải trang web.                         ví dụ với 100 icons thì trình duyệt sẽ phải gửi 100 request đến server để tải hết các icons đó.                         Với số lượng người dùng lớn thì nó gây quá tải cho server.                         Đồng thời tổng dung lượng của nhiều file nhỏ sẽ lớn hơn so với một file lớn chứa tất cả các                         icons vì mỗi file đều có header riêng.                                            ví dụ với hình ảnh sau:                                        Chúng ta sẽ cắt ảnh này thành các phần nhỏ hơn và hiển thị nó trên trang web.                  Mã CSS .facebook {     background: url('logo_list.png') 0 0;     width: 111px;     height: 111px; }  .rss {     background: url('logo_list.png') -133px 0;     width: 111px;     height: 111px; }  .linked {     background: url('logo_list.png') -269px 0;     width: 111px;     height: 111px; }  .pin {     background: url('logo_list.png') -404px 0;     width: 111px;     height: 111px; }  .share {     background: url('logo_list.png') -540px 0;     width: 111px;     height: 111px; }  .youtube {     background: url('logo_list.png') -675px 0;     width: 111px;     height: 111px; }  .twitter {     background: url('logo_list.png') -808px 0;     width: 111px;     height: 111px; } Mã HTML <div class=\"facebook\"></div> <div class=\"rss\"></div> <div class=\"linked\"></div> <div class=\"pin\"></div> <div class=\"share\"></div> <div class=\"youtube\"></div> <div class=\"twitter\"></div>   background: url() x y; trong đó x là vị trí theo chiều ngang và y là vị trí theo                     chiều dọc.                   Mẹo:  bạn có thể tìm tọa độ phù hợp bằng cách mở ảnh trong pain và xem tọa độ như hình ảnh                     dưới đây.                                              Bộ chọn thuộc tính CSS                                       Bộ chọn thuộc tính CSS cho phép bạn chọn phần tử có thuộc tính cụ thể.                                       Tham khảo bảng sau để biết thêm chi tiết                     Bộ chọn Cú pháp Ví dụ Mô tả   [thuộc_tính]  element[attribute] {     property: value; }   a[target] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính target.   [thuộc_tính=\"giá_trị\"]  element[attribute=\"value\"] {     property: value; }   a[target=\"_blank\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính target và giá trị là _blank.   [thuộc_tính~=\"giá_trị\"]  element[attribute~=\"value\"] {     property: value; }   a[title~=\"hello\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính title chứa từ khóa hello. (từ hello phải đứng                                 độc lập, không nhận những dạng như helloo hello_a ...)   [thuộc_tính^=\"giá_trị\"]  element[attribute^=\"value\"] {     property: value; }   a[href^=\"https\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href bắt đầu bằng https.   [thuộc_tính$=\"giá_trị\"]  element[attribute$=\"value\"] {     property: value; }   a[href$=\".pdf\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href kết thúc bằng .pdf.   [thuộc_tính*=\"giá_trị\"]  element[attribute*=\"value\"] {     property: value; }   a[href*=\"w3schools\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href chứa từ khóa w3schools.   [thuộc_tính|=\"giá_trị\"]  element[attribute|=\"value\"] {     property: value; }   a[lang|=\"en\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính lang chứa từ en hoặc en-...                           Các đơn vị đo trong CSS                                       Trong CSS, có nhiều đơn vị đo khác nhau được sử dụng để đo lường chiều dài và kích thước.                                       Có 2 loại đơn vị đo chính:                  Đơn vị đo tương đối: %, em, rem, vw, vh, ... Đơn vị đo tuyệt đối: px, cm, mm, in, pt, pc, ...                        Bảng sau đây liệt kê các đơn vị đo phổ biến trong CSS                     Đơn Vị Mô Tả Chú thích   cm Xentimét Đơn vị đo tuyệt đối - dùng trong in ấn, không nên dùng trong thiết kế web                                mm Milimét   in Inch (1in = 96px = 2.54cm)    px Pixcel (1px = 1/96in) Đơn vị đo tuyệt đối - dùng trong thiết kế web (thông tin màn hình thiết bị dưới dạn px                                 cho ta biết cách để thiết kế cho phù hợp)   pt Điểm (1pt = 1/72in) Đơn vị đo tuyệt đối - dùng trong in ấn, không nên dùng trong thiết kế web                                pc Pica (1pc = 12pt)   % Phần trăm dựa trên kích thước phần tử chứa nó Đơn vị đo tương đối, dùng trong thiết kế web   em 2em = 3 lần kích thước của phông chữ của phần tử cha   rem 2rem = 3 lần kích thước của phông chữ của thẻ html - root   vw Viewport Width (1vw = 1% chiều rộng của viewport)   vh Viewport Height (1vh = 1% chiều cao của viewport)   vmin Viewport Minimum (1vmin = 1% chiều nhỏ nhất của viewport)   vmax Viewport Maximum (1vmax = 1% chiều lớn nhất của viewport)                           Tính đặc hiệu của CSS (CSS Specificity)                                       CSS Specificity là cách trình duyệt xác định phần tử nào sẽ áp dụng CSS nếu có nhiều quy tắc CSS                     áp dụng cho cùng một phần tử.                                       CSS Specificity được xác định bằng 4 giá trị:                  Inline style: 1000 điểm Id: 100 điểm Class, pseudo-class, attribute: 10 điểm Element, pseudo-element: 1 điểm                        Ví dụ:                 p {     color: red; }  #para {     color: blue; }  .p {     color: green; }                 Trong trường hợp này, màu sắc của phần tử có id=\"para\" sẽ là màu xanh vì id có giá trị cao hơn                 class và element.                                       Nếu có 2 quy tắc cùng áp dụng cho cùng một phần tử, quy tắc nào được viết sau sẽ được áp dụng.                  Cách tính toán trọng số    Bộ chọn Trọng số Cách tính   p 1 1   .class 10 10   #id 100 100   p.class 11 1 + 10   p#id 101 1 + 100   p.class#id 111 1 + 10 + 100   <p style=\"color: black;\"> 1000 1000   p.class.class 21 1 + 10 + 10   #id p#id 201 100 + 1 + 100   * 0 0 (bộ chọn toàn cục ít có tiếng nói nhất)      CSS !important                      CSS !important là một cách để ghi đè lên các quy tắc CSS khác.                                       Khi một quy tắc CSS được đánh dấu bằng !important, nó sẽ được ưu tiên hơn các quy tắc khác, dù                     thứ tự viết của nó có đứng trước hay sau.                                       Ví dụ:                 p {     color: red !important; }  #para {     color: blue; }  .p {     color: green; }                 Trong trường hợp này, màu sắc của phần tử p sẽ là màu đỏ vì quy tắc có !important sẽ                 được ưu tiên hơn.                   Lưu ý:  không nên sử dụng !important nếu không cần thiết vì nó sẽ gây khó khăn trong việc                     quản lý CSS.                                         Các hàm toán học trong CSS                                       CSS hỗ trợ các hàm toán học để thực hiện các phép tính trên giá trị CSS.                                       Các hàm toán học phổ biến trong CSS:                  calc() min() max()    calc()                      Hàm calc() cho phép bạn thực hiện các phép tính toán trên các giá trị CSS.                                       Ví dụ:                 div {     width: calc(100% - 100px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng 100% trừ đi 100px.                    min()                      Hàm min() trả về giá trị nhỏ nhất trong danh sách các giá trị.                                       Ví dụ:                 div {     width: min(100%, 200px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng giá trị nhỏ nhất giữa 100% và 200px.                    max()                      Hàm max() trả về giá trị lớn nhất trong danh sách các giá trị.                                       Ví dụ:                 div {     width: max(100%, 200px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng giá trị lớn nhất giữa 100% và 200px."
    },
    {
        "title": "Clear trong CSS",
        "content": "Clear trong CSS Thuộc tính clear xác định cách thức xử lý các phần tử phía sau của một phần tử nổi.                      giá trị của clear là giá trị float của phần tử nằm trước nó                  .left {     float: left;     width: 100px;     height: 100px;     background-color: red; }  .not-clear {     width: 200px;     height: 200px;     background-color: green; }  .clear-left {     clear: left;     width: 200px;     height: 200px;     background-color: green; }  <div class=\"left\"></div> <div class=\"not-clear\"></div> <div class=\"left\"></div> <div class=\"clear-left\"></div>"
    },
    {
        "title": "Xử lý khi phần tử float có kích thước lớn hơn phần tử cha",
        "content": "Xử lý khi phần tử float có kích thước lớn hơn phần tử cha                      Ví dụ                  .parent {     border: 1px solid black; }  .right {     float: right;     width: 150px;     height: 150px;     background-color: red; }  <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>  Có 2 cách xử lý  Cách 1: Sử dụng thuộc tính overflow Sử dụng thuộc tính overflow: auto; cho phần tử cha. .parent {     border: 1px solid black;     overflow: auto; } .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>    Cách 2: Sử dụng thuộc tính clear Sử dụng thuộc tính clear: both; cho phần tử sau phần tử float. .parent {     border: 1px solid black; }  .parent::after {     content: \"\";     display: block;     clear: both; }  .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>    Nguyên lý hoạt động 2 cách trên:   Cách 1: khi sử dụng thuộc tính overflow: auto; cho phần tử cha, phần tử cha sẽ                             tự động điều chỉnh kích thước để chứa phần tử float. Cách 2: khi sử dụng thuộc tính clear: both; cho phần tử sau phần tử float, phần                             tử                             đó sẽ không nổi sang bên trái hoặc bên phải của phần tử float."
    },
    {
        "title": "Cách 1: Sử dụng thuộc tính overflow",
        "content": "Cách 1: Sử dụng thuộc tính overflow Sử dụng thuộc tính overflow: auto; cho phần tử cha. .parent {     border: 1px solid black;     overflow: auto; } .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>"
    },
    {
        "title": "Cách 2: Sử dụng thuộc tính clear",
        "content": "Cách 2: Sử dụng thuộc tính clear Sử dụng thuộc tính clear: both; cho phần tử sau phần tử float. .parent {     border: 1px solid black; }  .parent::after {     content: \"\";     display: block;     clear: both; }  .right {     float: right;     width: 150px;     height: 150px;     background-color: red; } <div class=\"parent\">     <img class=\"right\" src=\"hinh_anh.gif\"></img>     <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit corrupti placeat possimus? Dolorum odio, voluptas nulla placeat dignissimos eum sapiente magnam nostrum voluptates animi ut, doloremque autem eaque! Blanditiis, praesentium?</p> </div>"
    },
    {
        "title": "Ứng dụng của float",
        "content": "Ứng dụng của float Thuộc tính float thường được sử dụng để tạo cột trong thiết kế web.  Thiết kế cột bằng float Để tạo cột bằng float, bạn cần:  Chia phần tử cha thành các cột con Sử dụng thuộc tính float để nổi các cột con sang bên trái hoặc bên phải Sử dụng thuộc tính width để xác định kích thước của cột Sử dụng thuộc tính margin để tạo khoảng cách giữa các cột  Ví dụ * {     box-sizing: border-box; } .column {     float: left;     width: 33%;     padding: 10px;     border: 1px solid black; }  <div class=\"column\" style=\"background-color: #444; \">     <h2>Column 1</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #666; \">     <h2>Column 2</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #888; \">     <h2>Column 3</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>   box-sizing là gì? Thuộc tính box-sizing xác định cách tính toán kích thước của một phần tử. Có 3 giá trị cho thuộc tính box-sizing:  content-box: kích thước của phần tử chỉ tính từ nội dung bên trong border-box: kích thước của phần tử tính từ nội dung, padding và border inherit: phần tử sẽ kế thừa giá trị của phần tử cha     Thiết kế hình ảnh cạnh nhau  * {     box-sizing: border-box; } .img-container {     float: left;     width: 33.33%;     padding: 10px;     box-sizing: border-box; } .img-container img {     width: 100%; } .clearfix::after {     content: \"\";     clear: both;     display: table; } <h2>Hình ảnh cạnh nhau</h2> <div class=\"clearfix\">     <div class=\"img-container\">         <img src=\"hinh_anh1.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh2.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh3.jpg\" alt=\"image\">     </div> </div>    clearfix là gì? Để xử lý float, bạn cần thêm một phần tử sau các phần tử float và sử dụng thuộc tính                             clear: both; cho phần tử đó.                          Trong ví dụ trên, chúng ta sử dụng một phần tử div với class                             clearfix                             để xử lý float.                                                       Bạn có thể lưu trữ class clearfix để tiện sử dụng trong các trường hợp khác.                                                      Làm sao để các box có chiều cao bằng nhau?                      Trong ví dụ trước, bạn đã học cách thả nổi các hộp cạnh nhau với chiều rộng bằng nhau. Tuy nhiên,                         không dễ để tạo ra các hộp nổi có chiều cao bằng nhau. Tuy nhiên, cách khắc phục nhanh là đặt                         chiều cao cố định, như trong ví dụ bên dưới:  * {     box-sizing: border-box; } .column {     float: left;     width: 50%;     padding: 10px;     border: 1px solid black;     height: 200px; }  .clearfix::after {     content: \"\";     clear: both;     display: table; } <div class=\"clearfix\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>   Lưu ý:  đây không phải là phương án tối ưu nhất, cực kì tệ khi bạn muốn thay đổi kích                         thước của các hộp. Bạn nên sử dụng JavaScript hoặc Flexbox để giải quyết vấn đề này.                      Cách tối ưu hơn - Flexbox * {     box-sizing: border-box; } .flex-container {     display: flex;     flex-wrap: nowrap; }  .flex-container .column {     width: 50%;     padding: 10px;     border: 1px solid black; }   <div class=\"flex-container\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>    Tạo menu dẫn hướng Thuộc tính float cũng được sử dụng để tạo menu dẫn hướng ngang.  ul {     list-style-type: none;     margin: 0;     padding: 0;     overflow: hidden;     background-color: #111; }     li {         float: left;     }     li a {         display: block;         color: white;         text-align: center;         padding: 14px 16px;         text-decoration: none;     }     li a:hover {         background-color: #555;     } <ul>     <li><a href=\"#home\">Trang chủ</a></li>     <li><a href=\"#news\">Tin tức</a></li>     <li><a href=\"#contact\">Liên hệ</a></li>     <li><a href=\"#reference\">Tham khảo</a></li> </ul>"
    },
    {
        "title": "Thiết kế cột bằng float",
        "content": "Thiết kế cột bằng float Để tạo cột bằng float, bạn cần:  Chia phần tử cha thành các cột con Sử dụng thuộc tính float để nổi các cột con sang bên trái hoặc bên phải Sử dụng thuộc tính width để xác định kích thước của cột Sử dụng thuộc tính margin để tạo khoảng cách giữa các cột  Ví dụ * {     box-sizing: border-box; } .column {     float: left;     width: 33%;     padding: 10px;     border: 1px solid black; }  <div class=\"column\" style=\"background-color: #444; \">     <h2>Column 1</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #666; \">     <h2>Column 2</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div> <div class=\"column\" style=\"background-color: #888; \">     <h2>Column 3</h2>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>   box-sizing là gì? Thuộc tính box-sizing xác định cách tính toán kích thước của một phần tử. Có 3 giá trị cho thuộc tính box-sizing:  content-box: kích thước của phần tử chỉ tính từ nội dung bên trong border-box: kích thước của phần tử tính từ nội dung, padding và border inherit: phần tử sẽ kế thừa giá trị của phần tử cha"
    },
    {
        "title": "Thiết kế hình ảnh cạnh nhau",
        "content": "Thiết kế hình ảnh cạnh nhau  * {     box-sizing: border-box; } .img-container {     float: left;     width: 33.33%;     padding: 10px;     box-sizing: border-box; } .img-container img {     width: 100%; } .clearfix::after {     content: \"\";     clear: both;     display: table; } <h2>Hình ảnh cạnh nhau</h2> <div class=\"clearfix\">     <div class=\"img-container\">         <img src=\"hinh_anh1.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh2.jpg\" alt=\"image\">     </div>     <div class=\"img-container\">         <img src=\"hinh_anh3.jpg\" alt=\"image\">     </div> </div>    clearfix là gì? Để xử lý float, bạn cần thêm một phần tử sau các phần tử float và sử dụng thuộc tính                             clear: both; cho phần tử đó.                          Trong ví dụ trên, chúng ta sử dụng một phần tử div với class                             clearfix                             để xử lý float.                                                       Bạn có thể lưu trữ class clearfix để tiện sử dụng trong các trường hợp khác."
    },
    {
        "title": "Làm sao để các box có chiều cao bằng nhau?",
        "content": "Làm sao để các box có chiều cao bằng nhau?                      Trong ví dụ trước, bạn đã học cách thả nổi các hộp cạnh nhau với chiều rộng bằng nhau. Tuy nhiên,                         không dễ để tạo ra các hộp nổi có chiều cao bằng nhau. Tuy nhiên, cách khắc phục nhanh là đặt                         chiều cao cố định, như trong ví dụ bên dưới:  * {     box-sizing: border-box; } .column {     float: left;     width: 50%;     padding: 10px;     border: 1px solid black;     height: 200px; }  .clearfix::after {     content: \"\";     clear: both;     display: table; } <div class=\"clearfix\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>   Lưu ý:  đây không phải là phương án tối ưu nhất, cực kì tệ khi bạn muốn thay đổi kích                         thước của các hộp. Bạn nên sử dụng JavaScript hoặc Flexbox để giải quyết vấn đề này.                      Cách tối ưu hơn - Flexbox * {     box-sizing: border-box; } .flex-container {     display: flex;     flex-wrap: nowrap; }  .flex-container .column {     width: 50%;     padding: 10px;     border: 1px solid black; }   <div class=\"flex-container\">     <div class=\"column\" style=\"background-color: #444; \">         <h2>Column 1</h2>         <p>Lorem short</p>     </div>     <div class=\"column\" style=\"background-color: #666; \">         <h2>Column 2</h2>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni ad, provident quia aliquid, debitis nihil saepe iusto, deleniti esse quas fugiat commodi aperiam corrupti dolorum! Earum explicabo exercitationem deleniti amet!</p>     </div> </div>"
    },
    {
        "title": "Tạo menu dẫn hướng",
        "content": "Tạo menu dẫn hướng Thuộc tính float cũng được sử dụng để tạo menu dẫn hướng ngang.  ul {     list-style-type: none;     margin: 0;     padding: 0;     overflow: hidden;     background-color: #111; }     li {         float: left;     }     li a {         display: block;         color: white;         text-align: center;         padding: 14px 16px;         text-decoration: none;     }     li a:hover {         background-color: #555;     } <ul>     <li><a href=\"#home\">Trang chủ</a></li>     <li><a href=\"#news\">Tin tức</a></li>     <li><a href=\"#contact\">Liên hệ</a></li>     <li><a href=\"#reference\">Tham khảo</a></li> </ul>"
    },
    {
        "title": "inline-block",
        "content": "inline-block Thuộc tính display: inline-block; cho phép phần tử hiển thị như một phần tử inline nhưng                     có thể thiết lập kích thước và margin. .inline-block {     display: inline-block;     width: 100px;     height: 100px;     margin: 10px;     background-color: red; } <div class=\"inline-block\"></div> <div class=\"inline-block\"></div> <div class=\"inline-block\"></div>"
    },
    {
        "title": "CSS - căn chỉnh chiều ngang và chiều dọc",
        "content": "CSS - căn chỉnh chiều ngang và chiều dọc  Căn giữa theo chiều ngang các phần tử Để căn giữa một phần tử theo chiều ngang, bạn có thể sử dụng thuộc tính margin với                         giá trị                         auto.                      .center {     width: 200px;     height: 200px;     margin: 0 auto;     background-color: red; } <div class=\"center\"></div>   Lưu ý:  Để sử dụng thuộc tính margin: 0 auto;, phần tử cần phải có chiều                         rộng                         cố định.                        Căn giữa văn bản Để căn giữa văn bản, bạn có thể sử dụng thuộc tính text-align với giá trị                         center.                      .center-text {     border: 2px solid green;     text-align: center; } <div class=\"center-text\">     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>    Căn giữa hình ảnh Để căn giữa hình ảnh, bạn có thể sử dụng thuộc tính display: block; và                         margin                         với giá trị auto.                      .center-img {     display: block;     margin: auto; } <img class=\"center-img\" src=\"hinh_anh.png\" alt=\"image\">    Căn trái và phải - dùng position Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính position với giá trị                         absolute.                      .left {     position: absolute;     left: 0;     background-color: #444;     color: white;     width: 150px;     height: 150px; } .right {     position: absolute;     right: 0;     color: white;     background-color: #666;     width: 150px;     height: 150px; } <div class=\"left\">Left</div> <div class=\"right\">Right</div>   Chú ý: việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác.                        Căn trái và phải - dùng float Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính float.                          Việc căn trái hoặc phải bằng float đã được giới thiệu ở phần trước. Bạn có thể xem lại phần đó                         để biết cách sử dụng float.                        Căn giữa theo chiều dọc - dùng padding Để căn giữa một phần tử theo chiều dọc, bạn có thể sử dụng thuộc tính padding với                         giá trị                         auto.                      .center-v {     padding: 20px 0;     border: 3px solid green; } <div class=\"center-v\">Nội dung này sẽ nằm giữa theo chiều dọc</div>   Lưu ý:  thuộc tính padding có 2 giá trị, giá trị đầu tiên là cho phần trên và dưới, giá                         trị thứ hai là cho phần trái và phải.                         padding: (top & bottom)px (right & left)px;                        Căn giữa theo chiều dọc - dùng line-height Để căn giữa một dòng văn bản theo chiều dọc, bạn có thể sử dụng thuộc tính                         line-height.                      .center-line {     height: 200px;     line-height: 200px;     border: 3px solid green; } <div class=\"center-line\">     <p>Nội dung này sẽ nằm giữa theo chiều dọc<\\p> </div>   Lưu ý:  giá trị của thuộc tính line-height phải bằng với chiều cao của phần                         tử.                       Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-line p {     line-height: 1.5;     display: inline-block;     vertical-align: middle; }                             Căn giữa với position và transform                      Để căn giữa một phần tử, bạn có thể sử dụng thuộc tính position với giá trị                         absolute và transform.                      .parent {     position: relative;     width: 300px;     height: 300px;     border: 3px solid red; } .center-transform {     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     border: 3px solid green; } <div class=\"parent\">     <p class=\"center-transform\"> Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</p>                    </div>   Lưu ý:  việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác.                       Cách thức hoạt động: thuộc tính top: 50% và left: 50% sẽ đặt                         phần tử ở giữa theo chiều ngang và chiều dọc của phần tử cha. Sau đó, thuộc tính                         transform: translate(-50%, -50%); sẽ dịch chuyển phần tử đi lùi 50% chiều rộng và                         chiều cao của chính nó.                                                 Căn giữa với Flexbox                      Để căn giữa một phần tử, bạn có thể sử dụng Flexbox. .parent-flex {     display: flex;     justify-content: center;     align-items: center;     width: 400px;     height: 300px;     border: 3px solid red; } .center-flex {     width: 200px;     border: 3px solid green; } <div class=\"parent-flex\">     <div class=\"center-flex\">Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</div> </div>   Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-flex p {     text-align: center; }   Các thuộc tính trong display: flex;  display: flex;: thiết lập phần tử cha thành flex container justify-content: center;: căn giữa theo chiều ngang align-items: center;: căn giữa theo chiều dọc"
    },
    {
        "title": "Căn giữa theo chiều ngang các phần tử",
        "content": "Căn giữa theo chiều ngang các phần tử Để căn giữa một phần tử theo chiều ngang, bạn có thể sử dụng thuộc tính margin với                         giá trị                         auto.                      .center {     width: 200px;     height: 200px;     margin: 0 auto;     background-color: red; } <div class=\"center\"></div>   Lưu ý:  Để sử dụng thuộc tính margin: 0 auto;, phần tử cần phải có chiều                         rộng                         cố định."
    },
    {
        "title": "Căn giữa văn bản",
        "content": "Căn giữa văn bản Để căn giữa văn bản, bạn có thể sử dụng thuộc tính text-align với giá trị                         center.                      .center-text {     border: 2px solid green;     text-align: center; } <div class=\"center-text\">     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.</p> </div>"
    },
    {
        "title": "Căn giữa hình ảnh",
        "content": "Căn giữa hình ảnh Để căn giữa hình ảnh, bạn có thể sử dụng thuộc tính display: block; và                         margin                         với giá trị auto.                      .center-img {     display: block;     margin: auto; } <img class=\"center-img\" src=\"hinh_anh.png\" alt=\"image\">"
    },
    {
        "title": "Căn trái và phải - dùng position",
        "content": "Căn trái và phải - dùng position Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính position với giá trị                         absolute.                      .left {     position: absolute;     left: 0;     background-color: #444;     color: white;     width: 150px;     height: 150px; } .right {     position: absolute;     right: 0;     color: white;     background-color: #666;     width: 150px;     height: 150px; } <div class=\"left\">Left</div> <div class=\"right\">Right</div>   Chú ý: việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác."
    },
    {
        "title": "Căn trái và phải - dùng float",
        "content": "Căn trái và phải - dùng float Để căn trái hoặc phải, bạn có thể sử dụng thuộc tính float.                          Việc căn trái hoặc phải bằng float đã được giới thiệu ở phần trước. Bạn có thể xem lại phần đó                         để biết cách sử dụng float."
    },
    {
        "title": "Căn giữa theo chiều dọc - dùng padding",
        "content": "Căn giữa theo chiều dọc - dùng padding Để căn giữa một phần tử theo chiều dọc, bạn có thể sử dụng thuộc tính padding với                         giá trị                         auto.                      .center-v {     padding: 20px 0;     border: 3px solid green; } <div class=\"center-v\">Nội dung này sẽ nằm giữa theo chiều dọc</div>   Lưu ý:  thuộc tính padding có 2 giá trị, giá trị đầu tiên là cho phần trên và dưới, giá                         trị thứ hai là cho phần trái và phải.                         padding: (top & bottom)px (right & left)px;"
    },
    {
        "title": "Căn giữa theo chiều dọc - dùng line-height",
        "content": "Căn giữa theo chiều dọc - dùng line-height Để căn giữa một dòng văn bản theo chiều dọc, bạn có thể sử dụng thuộc tính                         line-height.                      .center-line {     height: 200px;     line-height: 200px;     border: 3px solid green; } <div class=\"center-line\">     <p>Nội dung này sẽ nằm giữa theo chiều dọc<\\p> </div>   Lưu ý:  giá trị của thuộc tính line-height phải bằng với chiều cao của phần                         tử.                       Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-line p {     line-height: 1.5;     display: inline-block;     vertical-align: middle; }"
    },
    {
        "title": "Căn giữa với position và transform",
        "content": "Căn giữa với position và transform                      Để căn giữa một phần tử, bạn có thể sử dụng thuộc tính position với giá trị                         absolute và transform.                      .parent {     position: relative;     width: 300px;     height: 300px;     border: 3px solid red; } .center-transform {     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     border: 3px solid green; } <div class=\"parent\">     <p class=\"center-transform\"> Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</p>                    </div>   Lưu ý:  việc sử dụng position: absolute; sẽ làm cho phần tử nằm ngoài luồng                         thông thường. Chúng có thể chồng lên nhau hoặc lấn lên lên các phần tử khác.                       Cách thức hoạt động: thuộc tính top: 50% và left: 50% sẽ đặt                         phần tử ở giữa theo chiều ngang và chiều dọc của phần tử cha. Sau đó, thuộc tính                         transform: translate(-50%, -50%); sẽ dịch chuyển phần tử đi lùi 50% chiều rộng và                         chiều cao của chính nó."
    },
    {
        "title": "Căn giữa với Flexbox",
        "content": "Căn giữa với Flexbox                      Để căn giữa một phần tử, bạn có thể sử dụng Flexbox. .parent-flex {     display: flex;     justify-content: center;     align-items: center;     width: 400px;     height: 300px;     border: 3px solid red; } .center-flex {     width: 200px;     border: 3px solid green; } <div class=\"parent-flex\">     <div class=\"center-flex\">Nội dung này sẽ nằm giữa theo chiều ngang và chiều dọc</div> </div>   Mẹo:  với văn bản có nhiều dòng bạn có thể thêm đoạn mã sau:                         .center-flex p {     text-align: center; }   Các thuộc tính trong display: flex;  display: flex;: thiết lập phần tử cha thành flex container justify-content: center;: căn giữa theo chiều ngang align-items: center;: căn giữa theo chiều dọc"
    },
    {
        "title": "Các bộ chọn kết hợp trong CSS",
        "content": "Các bộ chọn kết hợp trong CSS                  Các bộ chọn kết hợp cho phép bạn chọn phần tử dựa trên nhiều điều kiện. Các bộ chọn:   Bộ chọn con cháu (Dấu cách) Bộ chọn trực tiếp (>) Bộ chọn anh em (+) Bộ chọn sau (~)   Bộ chọn con cháu (Dấu cách) Bộ chọn con cháu chọn tất cả các phần tử con cháu của một phần tử cha. (phần tử này có thể nằm                         trực tiếp trong phần tử cha hoặc nằm bên trong phần tử khác nằm trong phần tử cha) div p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn trực tiếp (>) Bộ chọn trực tiếp chọn tất cả các phần tử con của một phần tử cha. div > p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn anh em liền kề(+) Bộ chọn anh em chọn phần tử anh em ngay sau phần tử đầu tiên. div + p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>    Bộ chọn sau (~) Bộ chọn sau chọn tất cả các phần tử anh em sau phần tử đầu tiên. div ~ p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>"
    },
    {
        "title": "Bộ chọn con cháu (Dấu cách)",
        "content": "Bộ chọn con cháu (Dấu cách) Bộ chọn con cháu chọn tất cả các phần tử con cháu của một phần tử cha. (phần tử này có thể nằm                         trực tiếp trong phần tử cha hoặc nằm bên trong phần tử khác nằm trong phần tử cha) div p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>"
    },
    {
        "title": "Bộ chọn trực tiếp (>)",
        "content": "Bộ chọn trực tiếp (>) Bộ chọn trực tiếp chọn tất cả các phần tử con của một phần tử cha. div > p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <section>         <p>Đây là phần tử cháu của div</p>         <section>             <p>Đây là phần tử chắt của div</p>         </section>     </section>              </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>"
    },
    {
        "title": "Bộ chọn anh em liền kề(+)",
        "content": "Bộ chọn anh em liền kề(+) Bộ chọn anh em chọn phần tử anh em ngay sau phần tử đầu tiên. div + p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>"
    },
    {
        "title": "Bộ chọn sau (~)",
        "content": "Bộ chọn sau (~) Bộ chọn sau chọn tất cả các phần tử anh em sau phần tử đầu tiên. div ~ p {     color: red; } <div>     <p>Đây là phần tử con của div</p>     <p>Đây là phần tử con của div</p> </div> <p>Đây là phần tử không nằm trong div</p> <p>Đây cũng là phần tử không nằm trong div</p>"
    },
    {
        "title": "Lớp giả trong CSS (Pseudo-classes)",
        "content": "Lớp giả trong CSS (Pseudo-classes)                  Lớp giả trong CSS là cách chọn phần tử dựa trên trạng thái hoặc vị trí của phần tử. Cú pháp CSS cho lớp giả như sau:  selector:pseudo-class {     property: value; } Các loại lớp giả    Loại Ví dụ Mô tả   :active a:active Chọn phần tử khi nó được kích hoạt   :checked input:checked Chọn phần tử input được chọn   :disabled input:disabled Chọn phần tử input bị vô hiệu hóa   :empty p:empty Chọn phần tử p không có nội dung   :enabled input:enabled Chọn phần tử input được kích hoạt   :first-child p:first-child Chọn phần tử p là phần tử đầu tiên của phần tử cha (không hợp lệ nếu trước thẻ p có anh                                 chị em là thẻ khác)   :first-of-type p:first-of-type Chọn phần tử p là phần tử mang thẻ p đầu tiên xuất hiện (kể cả trước nó có những thẻ                                 khác vẫn được)   :focus input:focus Chọn phần tử input khi nó được focus   :hover a:hover Chọn phần tử a khi con trỏ chuột di chuyển qua phần tử đó   :in-range input:in-range Chọn phần tử input có giá trị nằm trong khoảng cho phép   :invalid input:invalid Chọn phần tử input không hợp lệ   :lang(language) p:lang(vi) Chọn phần tử p có ngôn ngữ là tiếng Việt   :last-child p:last-child Chọn phần tử p là phần tử cuối cùng của phần tử cha (không hợp lệ nếu sau thẻ p có anh                                 chị em là thẻ khác)   :last-of-type p:last-of-type Chọn phần tử p là phần tử mang thẻ p cuối cùng xuất hiện (kể cả sau nó có những thẻ khác                                 vẫn được)   :link a:link Chọn phần tử a chưa được truy cập   :not(selector) :not(p) Chọn tất cả các phần tử không phải là phần tử p   :nth-child(n) p:nth-child(2) Chọn phần tử p là phần tử thứ 2 của phần tử cha   :nth-last-child(n) p:nth-last-child(2) Chọn phần tử p là phần tử thứ 2 từ cuối của phần tử cha   :nth-last-of-type(n) p:nth-last-of-type(2) Chọn phần tử p là phần tử mang thẻ p thứ 2 từ cuối xuất hiện   :nth-of-type(n) p:nth-of-type(2) Chọn phần tử p là phần tử mang thẻ p thứ 2 xuất hiện   :only-of-type p:only-of-type Chọn phần tử p là phần tử duy nhất mang thẻ p xuất hiện   :only-child p:only-child Chọn phần tử p là phần tử duy nhất của phần tử cha   :optional input:optional Chọn phần tử input không bắt buộc nhập (không có thuộc tính required)   :out-of-range input:out-of-range Chọn phần tử input có giá trị nằm ngoài khoảng cho phép   :read-only input:read-only Chọn phần tử input chỉ đọc   :read-write input:read-write Chọn phần tử input có thể đọc và ghi   :required input:required Chọn phần tử input bắt buộc nhập (có thuộc tính required)   :root :root Chọn phần tử gốc của trang web   :target #news:target Chọn phần tử có id news khi nó được chọn   :valid input:valid Chọn phần tử input hợp lệ   :visited a:visited Chọn phần tử a đã được truy cập"
    },
    {
        "title": "Phần tử giả trong CSS (Pseudo-elements)",
        "content": "Phần tử giả trong CSS (Pseudo-elements)                  Phần tử giả trong CSS là cách chọn phần tử dựa trên vị trí của phần tử. Cú pháp CSS cho phần tử giả như sau:  selector::pseudo-element {     property: value; }  ::first-line Chọn dòng đầu tiên của một phần tử văn bản. p::first-line {     color: red;     font-size: 20px; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.     Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde animi, blanditiis iure nobis odio voluptatibus quas omnis commodi ducimus voluptates, aspernatur quae mollitia suscipit deserunt officia praesentium, dolorum dignissimos non.     Lorem, ipsum dolor sit amet consectetur adipisicing elit. Temporibus minus consequuntur eos esse, officiis asperiores sequi ducimus eaque aliquam odio, dolorem in earum ipsum quaerat veritatis fugiat vero fugit eius!</p>   Lưu ý:  thuộc tính ::first-line chỉ hoạt động với phần tử block-level.                        ::first-letter Chọn chữ cái đầu tiên của một phần tử văn bản. p::first-letter {     color: red;     font-size: 20px; }  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::first-letter chỉ hoạt động với phần tử block-level.                        ::before Chèn nội dung vào trước một phần tử. p::before {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::before chỉ hoạt động với phần tử block-level.                        ::after Chèn nội dung vào sau một phần tử. p::after {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::after chỉ hoạt động với phần tử block-level.                        ::selection Chọn phần tử khi nó được chọn. ::selection {     background-color: tomato;     color: white; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::selection chỉ hoạt động với phần tử block-level.                        ::placeholder Chọn phần tử input khi nó có placeholder. input::placeholder {     color: red; } <input type=\"text\" placeholder=\"Nhập tên của bạn\">   Lưu ý:  thuộc tính ::placeholder chỉ hoạt động với phần tử input.                        ::marker Chọn dấu đánh dấu của một phần tử list. li::marker {     color: red; } <ul>     <li>Item 1</li>     <li>Item 2</li>     <li>Item 3</li> </ul>   Lưu ý:  thuộc tính ::marker chỉ hoạt động với phần tử list."
    },
    {
        "title": "::first-line",
        "content": "::first-line Chọn dòng đầu tiên của một phần tử văn bản. p::first-line {     color: red;     font-size: 20px; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.     Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde animi, blanditiis iure nobis odio voluptatibus quas omnis commodi ducimus voluptates, aspernatur quae mollitia suscipit deserunt officia praesentium, dolorum dignissimos non.     Lorem, ipsum dolor sit amet consectetur adipisicing elit. Temporibus minus consequuntur eos esse, officiis asperiores sequi ducimus eaque aliquam odio, dolorem in earum ipsum quaerat veritatis fugiat vero fugit eius!</p>   Lưu ý:  thuộc tính ::first-line chỉ hoạt động với phần tử block-level."
    },
    {
        "title": "::first-letter",
        "content": "::first-letter Chọn chữ cái đầu tiên của một phần tử văn bản. p::first-letter {     color: red;     font-size: 20px; }  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::first-letter chỉ hoạt động với phần tử block-level."
    },
    {
        "title": "::before",
        "content": "::before Chèn nội dung vào trước một phần tử. p::before {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::before chỉ hoạt động với phần tử block-level."
    },
    {
        "title": "::after",
        "content": "::after Chèn nội dung vào sau một phần tử. p::after {     content: url('hinh-anh.png') } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::after chỉ hoạt động với phần tử block-level."
    },
    {
        "title": "::selection",
        "content": "::selection Chọn phần tử khi nó được chọn. ::selection {     background-color: tomato;     color: white; } <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>   Lưu ý:  thuộc tính ::selection chỉ hoạt động với phần tử block-level."
    },
    {
        "title": "::placeholder",
        "content": "::placeholder Chọn phần tử input khi nó có placeholder. input::placeholder {     color: red; } <input type=\"text\" placeholder=\"Nhập tên của bạn\">   Lưu ý:  thuộc tính ::placeholder chỉ hoạt động với phần tử input."
    },
    {
        "title": "::marker",
        "content": "::marker Chọn dấu đánh dấu của một phần tử list. li::marker {     color: red; } <ul>     <li>Item 1</li>     <li>Item 2</li>     <li>Item 3</li> </ul>   Lưu ý:  thuộc tính ::marker chỉ hoạt động với phần tử list."
    },
    {
        "title": "Độ mờ/ độ trong suốt với CSS",
        "content": "Độ mờ/ độ trong suốt với CSS                      thuộc tính opacity trong CSS được sử dụng để xác định độ mờ của một phần tử.                                       Giá trị của thuộc tính opacity có thể từ 0.0 đến 1.0. Giá trị 0.0 là hoàn toàn trong                     suốt                     và giá trị 1.0 là hoàn toàn không trong suốt.                  .clearfix::after {     content: \"\";     clear: both;     display: table; } figure {     float: left;     width: 33.33%;     margin: 0; } figure img {     width: 100%;     height: auto; } figure:first-child img {     opacity: 0.2; } figure:nth-child(2) img {     opacity: 0.5; } <div class=\"clearfix\">     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 0.2\" >         <figcaption>Độ mờ 0.2</figcaption>     </figure>     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 0.5\" >         <figcaption>Độ mờ 0.5</figcaption>     </figure>     <figure>         <img src=\"hinh_anh.png\" alt=\"độ mờ 1\" >         <figcaption>Độ mờ 1</figcaption>     </figure> </div>   Ứng dụng - văn bản trong hộp trong suốt Trong ví dụ này, chúng ta sẽ tạo một hiệu ứng trong suốt trên nền màu khá thú vị .background {     background: url('repeat.png') repeat red;     border: 2px solid red;     width: 100%;     height: 300px; }  .transbox {     width: 50%;     height: 150px;     margin: auto;     background-color: #ffffff;     border: 1px solid black;     opacity: 0.6;     border-radius: 10px;     margin-top: calc((300px/2) - (150px / 2)); }  .transbox p {     margin: 30px;     font-weight: bold; } <div class=\"background\">     <div class=\"transbox\">         <p>Đây là văn bản trong hộp trong suốt.</p>     </div> </div>"
    },
    {
        "title": "Ứng dụng - văn bản trong hộp trong suốt",
        "content": "Ứng dụng - văn bản trong hộp trong suốt Trong ví dụ này, chúng ta sẽ tạo một hiệu ứng trong suốt trên nền màu khá thú vị .background {     background: url('repeat.png') repeat red;     border: 2px solid red;     width: 100%;     height: 300px; }  .transbox {     width: 50%;     height: 150px;     margin: auto;     background-color: #ffffff;     border: 1px solid black;     opacity: 0.6;     border-radius: 10px;     margin-top: calc((300px/2) - (150px / 2)); }  .transbox p {     margin: 30px;     font-weight: bold; } <div class=\"background\">     <div class=\"transbox\">         <p>Đây là văn bản trong hộp trong suốt.</p>     </div> </div>"
    },
    {
        "title": "Thanh điều hướng CSS",
        "content": "Thanh điều hướng CSS                                       Thanh điều hướng là danh sách các liên kết hoặc nút được sắp xếp theo chiều ngang hoặc chiều dọc.                   Thanh điều hướng dọc Thanh điều hướng dọc được sắp xếp theo chiều dọc. Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 200px;     background-color: #333; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }   Áp dụng cho một trang Mã HTML <ul>     <li><a class=\"active\" href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> <main>     <section id=\"html\">         <h1>HTML</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab dolorem omnis nostrum rem architecto aut repudiandae, provident dolorum suscipit quis repellendus necessitatibus in dolore. Ratione quo recusandae excepturi unde aliquam?</p>     </section>     <section id=\"css\">         <h1>CSS</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto mollitia dolores nulla impedit. Minus veniam mollitia perspiciatis aliquid amet consequuntur quia. Fugit beatae quam voluptas ipsum, modi est molestias quasi.</p>         <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Libero at repellat ipsam accusantium, consectetur ratione sapiente eos ab, ipsa aliquam minus? Odio quod ullam itaque aut explicabo possimus temporibus! Accusantium.</p>     </section>     <section id=\"bt\">         <h1>Booststrap</h1>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deserunt qui eius culpa vitae explicabo, incidunt voluptatibus amet voluptate recusandae ea quae et perspiciatis dicta, voluptates natus ex. Numquam, reiciendis possimus?</p>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime porro hic dicta perspiciatis impedit quibusdam dignissimos amet aspernatur provident modi? Unde illum impedit, itaque in cum modi fugit dolor soluta.</p>     </section>     <section id=\"js\">         <h1>JavaScript</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam corrupti, magnam tenetur suscipit voluptate modi asperiores doloribus dignissimos, odit ad repellendus, itaque sit. Dolorem, excepturi laboriosam veritatis itaque ab reprehenderit?</p>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos blanditiis magnam architecto debitis nisi minus placeat nihil, fugiat totam ducimus inventore rem ad voluptatibus id exercitationem maxime quod sit laborum?</p>     </section> </main> Mã CSS * {     box-sizing: border-box;     margin: 0;     padding: 0; } ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 20%;     height: 100%;     position: fixed;     background-color: #333; } li a.active{     background-color: #4CAF50; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a:hover:not(.active) {     background-color: #888;     color: black; }  main {     margin-left: 20%;     padding: 1px 16px; }  section {     margin-top: 50px;     padding: 16px;     background-color: #f1f1f1;     height: 1000px; }  section h1 {     margin-top: 0;     font-family: Arial, sans-serif;     color: #333; }  section p {     font-family: 'Times New Roman', serif;     color: #111; } html {     scroll-behavior: smooth; } Mã javaScript var a = document.getElementsByTagName('a'); for (var i = 0; i < a.length; i++) {     a[i].addEventListener('click', function() {         var current = document.querySelector('.active');         if (current) {             current.classList.remove('active');         }         this.classList.add('active');     }); }    Thanh điều hướng ngang Thanh điều hướng ngang được sắp xếp theo chiều ngang.  Mẹo:  chỉ cần thêm thuộc tính display: inline-block; (hoặc                         float: left;) vào thẻ li.                       Lưu ý:  nếu sử dụng float-left bạn cần thêm overflow: hidden vào thẻ cha của li.                      Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 100%;     background-color: #333;     overflow: hidden; } li {     float: left; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }"
    },
    {
        "title": "Thanh điều hướng dọc",
        "content": "Thanh điều hướng dọc Thanh điều hướng dọc được sắp xếp theo chiều dọc. Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 200px;     background-color: #333; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }   Áp dụng cho một trang Mã HTML <ul>     <li><a class=\"active\" href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> <main>     <section id=\"html\">         <h1>HTML</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos sed reiciendis, pariatur dicta animi deleniti optio voluptatum numquam, nihil distinctio modi commodi voluptate! Molestias, rem blanditiis. Debitis id dolorem quidem.</p>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab dolorem omnis nostrum rem architecto aut repudiandae, provident dolorum suscipit quis repellendus necessitatibus in dolore. Ratione quo recusandae excepturi unde aliquam?</p>     </section>     <section id=\"css\">         <h1>CSS</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto mollitia dolores nulla impedit. Minus veniam mollitia perspiciatis aliquid amet consequuntur quia. Fugit beatae quam voluptas ipsum, modi est molestias quasi.</p>         <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Libero at repellat ipsam accusantium, consectetur ratione sapiente eos ab, ipsa aliquam minus? Odio quod ullam itaque aut explicabo possimus temporibus! Accusantium.</p>     </section>     <section id=\"bt\">         <h1>Booststrap</h1>         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deserunt qui eius culpa vitae explicabo, incidunt voluptatibus amet voluptate recusandae ea quae et perspiciatis dicta, voluptates natus ex. Numquam, reiciendis possimus?</p>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime porro hic dicta perspiciatis impedit quibusdam dignissimos amet aspernatur provident modi? Unde illum impedit, itaque in cum modi fugit dolor soluta.</p>     </section>     <section id=\"js\">         <h1>JavaScript</h1>         <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam corrupti, magnam tenetur suscipit voluptate modi asperiores doloribus dignissimos, odit ad repellendus, itaque sit. Dolorem, excepturi laboriosam veritatis itaque ab reprehenderit?</p>         <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos blanditiis magnam architecto debitis nisi minus placeat nihil, fugiat totam ducimus inventore rem ad voluptatibus id exercitationem maxime quod sit laborum?</p>     </section> </main> Mã CSS * {     box-sizing: border-box;     margin: 0;     padding: 0; } ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 20%;     height: 100%;     position: fixed;     background-color: #333; } li a.active{     background-color: #4CAF50; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a:hover:not(.active) {     background-color: #888;     color: black; }  main {     margin-left: 20%;     padding: 1px 16px; }  section {     margin-top: 50px;     padding: 16px;     background-color: #f1f1f1;     height: 1000px; }  section h1 {     margin-top: 0;     font-family: Arial, sans-serif;     color: #333; }  section p {     font-family: 'Times New Roman', serif;     color: #111; } html {     scroll-behavior: smooth; } Mã javaScript var a = document.getElementsByTagName('a'); for (var i = 0; i < a.length; i++) {     a[i].addEventListener('click', function() {         var current = document.querySelector('.active');         if (current) {             current.classList.remove('active');         }         this.classList.add('active');     }); }"
    },
    {
        "title": "Thanh điều hướng ngang",
        "content": "Thanh điều hướng ngang Thanh điều hướng ngang được sắp xếp theo chiều ngang.  Mẹo:  chỉ cần thêm thuộc tính display: inline-block; (hoặc                         float: left;) vào thẻ li.                       Lưu ý:  nếu sử dụng float-left bạn cần thêm overflow: hidden vào thẻ cha của li.                      Mã HTML <ul>     <li><a href=\"#html\">HTML</a></li>     <li><a href=\"#css\">CSS</a></li>     <li><a href=\"#bt\">Booststrap</a></li>     <li><a href=\"#js\">JavaScript</a></li> </ul> Mã CSS ul {     list-style-type: none;     margin: 0;     padding: 0;     width: 100%;     background-color: #333;     overflow: hidden; } li {     float: left; } li a {     display: block;     color: white;     padding: 8px 16px;     text-decoration: none; } li a.active{     background-color: #4CAF50; }  li a:hover:not(.active) {     background-color: #888;     color: black; }"
    },
    {
        "title": "Tạo danh sách thả xuống với CSS",
        "content": "Tạo danh sách thả xuống với CSS                   Cách hoạt động:  khi người dùng di chuyển chuột qua một phần tử, một danh sách thả xuống sẽ                     được hiển thị cho người dùng chọn.                   Một danh sách thả xuống đơn giản Mã HTML <div class=\"dropdown\">     <span>Di chuột vào đây</span>     <div class=\"dropdown-content\">       <p>Chào cậu!</p>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }  .dropdown-content {     display: none;     position: absolute;     background-color: #f1f1f1;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     padding: 12px 16px;     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }   Giải thích:   Thuộc tính position: relative; cho phần tử cha để xác định vị trí của phần                                 tử con. Thuộc tính display: none; cho phần tử con để ẩn nó đi ban đầu. Thuộc tính position: absolute; cho phần tử con để xác định vị trí của nó so                                 với phần tử cha. Thuộc tính display: block; cho phần tử con khi người dùng di chuyển chuột                                 qua phần tử cha.                              Menu thả xuống                      Mã HTML <div class=\"dropdown\">     <button class=\"dropbtn\">Danh sách thả xuống</button>     <div class=\"dropdown-content\">       <a href=\"#\">Nội dung 1</a>       <a href=\"#\">Nội dung 2</a>       <a href=\"#\">Nội dung 3</a>     </div>   </div> Mã CSS .dropbtn {   background-color: #4CAF50;   color: white;   padding: 16px;   font-size: 16px;   border: none;   cursor: pointer; }  .dropdown {   position: relative;   display: inline-block; }  .dropdown-content {   display: none;   position: absolute;   background-color: #f9f9f9;   min-width: 160px;   box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);   z-index: 1; }  .dropdown-content a {   color: black;   padding: 12px 16px;   text-decoration: none;   display: block; }  .dropdown-content a:hover {background-color: #f1f1f1}  .dropdown:hover .dropdown-content {   display: block; }  .dropdown:hover .dropbtn {   background-color: #3e8e41; }                             Hình ảnh thả xuống                      Mã HTML <div class=\"dropdown\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"100\" height=\"50\">     <div class=\"dropdown-content\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"300\" height=\"200\">     <div class=\"desc\">Hình ảnh cute đáng yêu</div>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }    .dropdown-content {     display: none;     position: absolute;     background-color: #f9f9f9;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }  .desc {     padding: 15px;     text-align: center; }"
    },
    {
        "title": "Một danh sách thả xuống đơn giản",
        "content": "Một danh sách thả xuống đơn giản Mã HTML <div class=\"dropdown\">     <span>Di chuột vào đây</span>     <div class=\"dropdown-content\">       <p>Chào cậu!</p>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }  .dropdown-content {     display: none;     position: absolute;     background-color: #f1f1f1;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     padding: 12px 16px;     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }   Giải thích:   Thuộc tính position: relative; cho phần tử cha để xác định vị trí của phần                                 tử con. Thuộc tính display: none; cho phần tử con để ẩn nó đi ban đầu. Thuộc tính position: absolute; cho phần tử con để xác định vị trí của nó so                                 với phần tử cha. Thuộc tính display: block; cho phần tử con khi người dùng di chuyển chuột                                 qua phần tử cha."
    },
    {
        "title": "Menu thả xuống",
        "content": "Menu thả xuống                      Mã HTML <div class=\"dropdown\">     <button class=\"dropbtn\">Danh sách thả xuống</button>     <div class=\"dropdown-content\">       <a href=\"#\">Nội dung 1</a>       <a href=\"#\">Nội dung 2</a>       <a href=\"#\">Nội dung 3</a>     </div>   </div> Mã CSS .dropbtn {   background-color: #4CAF50;   color: white;   padding: 16px;   font-size: 16px;   border: none;   cursor: pointer; }  .dropdown {   position: relative;   display: inline-block; }  .dropdown-content {   display: none;   position: absolute;   background-color: #f9f9f9;   min-width: 160px;   box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);   z-index: 1; }  .dropdown-content a {   color: black;   padding: 12px 16px;   text-decoration: none;   display: block; }  .dropdown-content a:hover {background-color: #f1f1f1}  .dropdown:hover .dropdown-content {   display: block; }  .dropdown:hover .dropbtn {   background-color: #3e8e41; }"
    },
    {
        "title": "Hình ảnh thả xuống",
        "content": "Hình ảnh thả xuống                      Mã HTML <div class=\"dropdown\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"100\" height=\"50\">     <div class=\"dropdown-content\">     <img src=\"hinh-anh.jpg\" alt=\"Cinque Terre\" width=\"300\" height=\"200\">     <div class=\"desc\">Hình ảnh cute đáng yêu</div>     </div> </div> Mã CSS .dropdown {     position: relative;     display: inline-block; }    .dropdown-content {     display: none;     position: absolute;     background-color: #f9f9f9;     min-width: 160px;     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);     z-index: 1; }  .dropdown:hover .dropdown-content {     display: block; }  .desc {     padding: 15px;     text-align: center; }"
    },
    {
        "title": "Tạo thư viện ảnh với CSS",
        "content": "Tạo thư viện ảnh với CSS                  Mã HTML <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> <div class=\"gallery\">     <a target=\"_blank\" href=\"hinh_anh.jpg\">       <img src=\"hinh_anh.jpg\" alt=\"Văn bản thay thế\" width=\"100%\">     </a>     <div class=\"desc\">Thêm mô tả cho hình ảnh</div> </div> Mã CSS div.gallery {     margin: 5px;     border: 1px solid green;     float: left;     width: 180px;     border-radius: 10px; }  div.gallery:hover {     border: 1px solid red; }  div.gallery img {     width: 100%;     height: auto;     filter: grayscale(100%); }  div.gallery:hover img {     filter: grayscale(0%);     transform: scale(1.1); }  div.desc {     padding: 15px;     text-align: center; }"
    },
    {
        "title": "Cắt ảnh với CSS",
        "content": "Cắt ảnh với CSS                                       Cắt ảnh với CSS là cách cắt một phần của hình ảnh và hiển thị nó trên trang web.                   Tại sao phải cắt ảnh?                          Cắt ảnh hay còn gọi là CSS sprite là một kỹ thuật giúp tối ưu hóa tốc độ tải trang web. Thay vì                         tải nhiều ảnh nhỏ, chúng ta có thể tải một ảnh lớn chứa tất cả các ảnh nhỏ và hiển thị phần cần                         thiết.                         Những icons tuy chỉ là một hình ảnh rất nhỏ nhưng với một trang web có từ vài chục đến vài trăm                         icons thì nó sẽ ảnh hưởng lớn đến hiệu suât tải trang web.                         ví dụ với 100 icons thì trình duyệt sẽ phải gửi 100 request đến server để tải hết các icons đó.                         Với số lượng người dùng lớn thì nó gây quá tải cho server.                         Đồng thời tổng dung lượng của nhiều file nhỏ sẽ lớn hơn so với một file lớn chứa tất cả các                         icons vì mỗi file đều có header riêng.                                            ví dụ với hình ảnh sau:                                        Chúng ta sẽ cắt ảnh này thành các phần nhỏ hơn và hiển thị nó trên trang web.                  Mã CSS .facebook {     background: url('logo_list.png') 0 0;     width: 111px;     height: 111px; }  .rss {     background: url('logo_list.png') -133px 0;     width: 111px;     height: 111px; }  .linked {     background: url('logo_list.png') -269px 0;     width: 111px;     height: 111px; }  .pin {     background: url('logo_list.png') -404px 0;     width: 111px;     height: 111px; }  .share {     background: url('logo_list.png') -540px 0;     width: 111px;     height: 111px; }  .youtube {     background: url('logo_list.png') -675px 0;     width: 111px;     height: 111px; }  .twitter {     background: url('logo_list.png') -808px 0;     width: 111px;     height: 111px; } Mã HTML <div class=\"facebook\"></div> <div class=\"rss\"></div> <div class=\"linked\"></div> <div class=\"pin\"></div> <div class=\"share\"></div> <div class=\"youtube\"></div> <div class=\"twitter\"></div>   background: url() x y; trong đó x là vị trí theo chiều ngang và y là vị trí theo                     chiều dọc.                   Mẹo:  bạn có thể tìm tọa độ phù hợp bằng cách mở ảnh trong pain và xem tọa độ như hình ảnh                     dưới đây."
    },
    {
        "title": "Bộ chọn thuộc tính CSS",
        "content": "Bộ chọn thuộc tính CSS                                       Bộ chọn thuộc tính CSS cho phép bạn chọn phần tử có thuộc tính cụ thể.                                       Tham khảo bảng sau để biết thêm chi tiết                     Bộ chọn Cú pháp Ví dụ Mô tả   [thuộc_tính]  element[attribute] {     property: value; }   a[target] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính target.   [thuộc_tính=\"giá_trị\"]  element[attribute=\"value\"] {     property: value; }   a[target=\"_blank\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính target và giá trị là _blank.   [thuộc_tính~=\"giá_trị\"]  element[attribute~=\"value\"] {     property: value; }   a[title~=\"hello\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính title chứa từ khóa hello. (từ hello phải đứng                                 độc lập, không nhận những dạng như helloo hello_a ...)   [thuộc_tính^=\"giá_trị\"]  element[attribute^=\"value\"] {     property: value; }   a[href^=\"https\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href bắt đầu bằng https.   [thuộc_tính$=\"giá_trị\"]  element[attribute$=\"value\"] {     property: value; }   a[href$=\".pdf\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href kết thúc bằng .pdf.   [thuộc_tính*=\"giá_trị\"]  element[attribute*=\"value\"] {     property: value; }   a[href*=\"w3schools\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính href chứa từ khóa w3schools.   [thuộc_tính|=\"giá_trị\"]  element[attribute|=\"value\"] {     property: value; }   a[lang|=\"en\"] {     background-color: yellow; }  Chọn tất cả các phần tử a có thuộc tính lang chứa từ en hoặc en-..."
    },
    {
        "title": "Các đơn vị đo trong CSS",
        "content": "Các đơn vị đo trong CSS                                       Trong CSS, có nhiều đơn vị đo khác nhau được sử dụng để đo lường chiều dài và kích thước.                                       Có 2 loại đơn vị đo chính:                  Đơn vị đo tương đối: %, em, rem, vw, vh, ... Đơn vị đo tuyệt đối: px, cm, mm, in, pt, pc, ...                        Bảng sau đây liệt kê các đơn vị đo phổ biến trong CSS                     Đơn Vị Mô Tả Chú thích   cm Xentimét Đơn vị đo tuyệt đối - dùng trong in ấn, không nên dùng trong thiết kế web                                mm Milimét   in Inch (1in = 96px = 2.54cm)    px Pixcel (1px = 1/96in) Đơn vị đo tuyệt đối - dùng trong thiết kế web (thông tin màn hình thiết bị dưới dạn px                                 cho ta biết cách để thiết kế cho phù hợp)   pt Điểm (1pt = 1/72in) Đơn vị đo tuyệt đối - dùng trong in ấn, không nên dùng trong thiết kế web                                pc Pica (1pc = 12pt)   % Phần trăm dựa trên kích thước phần tử chứa nó Đơn vị đo tương đối, dùng trong thiết kế web   em 2em = 3 lần kích thước của phông chữ của phần tử cha   rem 2rem = 3 lần kích thước của phông chữ của thẻ html - root   vw Viewport Width (1vw = 1% chiều rộng của viewport)   vh Viewport Height (1vh = 1% chiều cao của viewport)   vmin Viewport Minimum (1vmin = 1% chiều nhỏ nhất của viewport)   vmax Viewport Maximum (1vmax = 1% chiều lớn nhất của viewport)"
    },
    {
        "title": "Tính đặc hiệu của CSS (CSS Specificity)",
        "content": "Tính đặc hiệu của CSS (CSS Specificity)                                       CSS Specificity là cách trình duyệt xác định phần tử nào sẽ áp dụng CSS nếu có nhiều quy tắc CSS                     áp dụng cho cùng một phần tử.                                       CSS Specificity được xác định bằng 4 giá trị:                  Inline style: 1000 điểm Id: 100 điểm Class, pseudo-class, attribute: 10 điểm Element, pseudo-element: 1 điểm                        Ví dụ:                 p {     color: red; }  #para {     color: blue; }  .p {     color: green; }                 Trong trường hợp này, màu sắc của phần tử có id=\"para\" sẽ là màu xanh vì id có giá trị cao hơn                 class và element.                                       Nếu có 2 quy tắc cùng áp dụng cho cùng một phần tử, quy tắc nào được viết sau sẽ được áp dụng.                  Cách tính toán trọng số    Bộ chọn Trọng số Cách tính   p 1 1   .class 10 10   #id 100 100   p.class 11 1 + 10   p#id 101 1 + 100   p.class#id 111 1 + 10 + 100   <p style=\"color: black;\"> 1000 1000   p.class.class 21 1 + 10 + 10   #id p#id 201 100 + 1 + 100   * 0 0 (bộ chọn toàn cục ít có tiếng nói nhất)"
    },
    {
        "title": "CSS !important",
        "content": "CSS !important                      CSS !important là một cách để ghi đè lên các quy tắc CSS khác.                                       Khi một quy tắc CSS được đánh dấu bằng !important, nó sẽ được ưu tiên hơn các quy tắc khác, dù                     thứ tự viết của nó có đứng trước hay sau.                                       Ví dụ:                 p {     color: red !important; }  #para {     color: blue; }  .p {     color: green; }                 Trong trường hợp này, màu sắc của phần tử p sẽ là màu đỏ vì quy tắc có !important sẽ                 được ưu tiên hơn.                   Lưu ý:  không nên sử dụng !important nếu không cần thiết vì nó sẽ gây khó khăn trong việc                     quản lý CSS."
    },
    {
        "title": "Các hàm toán học trong CSS",
        "content": "Các hàm toán học trong CSS                                       CSS hỗ trợ các hàm toán học để thực hiện các phép tính trên giá trị CSS.                                       Các hàm toán học phổ biến trong CSS:                  calc() min() max()    calc()                      Hàm calc() cho phép bạn thực hiện các phép tính toán trên các giá trị CSS.                                       Ví dụ:                 div {     width: calc(100% - 100px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng 100% trừ đi 100px.                    min()                      Hàm min() trả về giá trị nhỏ nhất trong danh sách các giá trị.                                       Ví dụ:                 div {     width: min(100%, 200px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng giá trị nhỏ nhất giữa 100% và 200px.                    max()                      Hàm max() trả về giá trị lớn nhất trong danh sách các giá trị.                                       Ví dụ:                 div {     width: max(100%, 200px); }                 Trong trường hợp này, chiều rộng của phần tử div sẽ bằng giá trị lớn nhất giữa 100% và 200px."
    },
    {
        "title": "CSS nâng cao",
        "content": "CSS nâng cao                               Trong phần này, chúng ta sẽ tìm hiểu về các kỹ thuật CSS nâng cao như: Bo góc, viền bằng hình ảnh, hình                 nền nâng cao, hiệu ứng chuyển màu (gradient), bóng đổ (shadow), hiệu ứng văn bản, nhúng phông, 2D                 transform, 3D transform, transition, animation, v.v."
    },
    {
        "title": "Bo góc với CSS",
        "content": "Bo góc với CSS                      Để bo góc cho một phần tử HTML, bạn sử dụng thuộc tính border-radius. Ví dụ, để bo góc thành hình                     tròn, bạn sử dụng giá trị 50% cho thuộc tính border-radius.                  .border-radius {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 50%; }                  <div class=\"border-radius\"></div>                            Chỉ định cho từng góc                                               Bạn có thể chỉ định cho từng góc bằng cách sử dụng giá trị px hoặc %.                      Với 4 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right) (bottom-right) (bottom-left);  Với 3 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right bottom-left) (bottom-right);  Với 2 giá trị của thuộc tính border-radius  border-radius: (top-left top-right) (bottom-left bottom-right);  Với 1 giá trị của thuộc tính border-radius  border-radius: (all);  .border-radius-4 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px 90px;     float: left; } .border-radius-3 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px;     float: left; } .border-radius-2 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px;     float: left; } .border-radius-1 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 20px;     float: left; }                      <div class=\"border-radius-4\"></div> <div class=\"border-radius-3\"></div> <div class=\"border-radius-2\"></div> <div class=\"border-radius-1\"></div>                          Viền bằng hình ảnh                                       Để tạo viền bằng hình ảnh, bạn sử dụng thuộc tính border-image với                     giá trị là url của hình ảnh.                  .border-image {     border: 10px solid transparent;     padding: 15px;     border-image: url('border.png') 193 round; }                  <div class=\"border-image\"></div>   Với:  url('border.png'): đường dẫn đến ảnh 193: nơi cắt ảnh round: kiểu xử lý    Mẹo: nơi cắt ảnh có thể tính bằng cách lấy chiều rộng ảnh chia 3.                  Ngoài kiểu round còn có kiêu stretch .border-image {     border: 10px solid transparent;     padding: 15px;     border-image: url('border.png') 193 stretch; }  <div class=\"border-image\"></div>                         Hình nền nâng cao                                            Nhiều hình nền cho một phần tử                                               Để thêm nhiều hình nền cho một phần tử, bạn sử dụng thuộc tính background-image nhiều lần.                      .background-image {     color: brown;     font-size: 30px;     font-weight: bold;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png'), url('pattern.jpg');     background-repeat: no-repeat, no-repeat, no-repeat;     background-position: bottom right, top left; }  <div class=\"background-image\"></div>                             Đặt kích thước cho hình nền                                               Để đặt kích thước cho hình nền, bạn sử dụng thuộc tính background-size.                                               thuộc tính background-size có các giá trị:                      auto: kích thước mặc định của hình ảnh w(%/px) h(%/px): kích thước chiều rộng và chiều cao hình ảnh cover: hình ảnh sẽ bao phủ toàn bộ phần tử contain: hình ảnh sẽ được hiển thị đầy đủ trong phần tử   .background-size-auto {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: auto; } .background-size-cover {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover; } .background-size-contain {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: contain; }  .background-size-xy {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: 100px 200px; }  <div class=\"background-size-auto\"></div> <div class=\"background-size-cover\"></div> <div class=\"background-size-contain\"></div> <div class=\"background-size-xy\"></div>    Hình nền kích thước đầy đủ Với những yêu cầu sau:  Lấp đầy toàn bộ trang bằng hình ảnh Thu phóng ảnh linh hoạt Hình ảnh nằm chính giữa màn hình Không tạo ra thanh cuộn                           Bạn có thể thêm mã css sau:                      html {     background: url('hinh-anh.jpg') no-repeat center center fixed;     background-size: cover; }  click  Bạn cũng có thể áp dụng cho một thẻ div chứa nội dung và đặt vào bất cứ đâu trong trang web mà                         bạn thích body {     margin: 0;     padding: 0;     font-family: Arial, sans-serif; }  .container {     width: 100%;     height: 300px;     background: url('hinh-anh.jpg') no-repeat center;     background-size: cover;     position: relative; }  .container .text{     text-align: center;     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     color: white;     font-size: 30px;     font-weight: bold; }  <div class=\"container\">     <div class=\"text\">Lấp đầy trang với nền hình ảnh</div> </div> <p>     Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nihil velit in quibusdam deserunt quis distinctio hic harum amet magni soluta, incidunt, quod quae optio mollitia ipsa vero saepe molestias repudiandae! </p>                              CSS background-origin                                               Thuộc tính background-origin xác định điểm bắt đầu của hình                         nền.                                               Thuộc tính background-origin có các giá trị:                      padding-box: hình nền bắt đầu từ phần padding border-box: hình nền bắt đầu từ phần border content-box: hình nền bắt đầu từ phần content   .background-origin-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: padding-box;     margin: 10px; } .background-origin-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: border-box;     margin: 10px; }  .background-origin-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: content-box;     margin: 10px; }  <div class=\"background-origin-padding-box\"></div> <div class=\"background-origin-border-box\"></div> <div class=\"background-origin-content-box\"></div>                              CSS background-clip                                               Thuộc tính background-clip xác định phần nào của phần tử sẽ                         hiển thị hình nền.                                               Thuộc tính background-clip có các giá trị:                      border-box: hình nền sẽ hiển thị dưới phần border padding-box: hình nền sẽ hiển thị dưới phần padding content-box: hình nền sẽ hiển thị dưới phần content   .background-clip-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: border-box;     margin: 10px; } .background-clip-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: padding-box;     margin: 10px; }  .background-clip-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: content-box;     margin: 10px; }  <div class=\"background-clip-border-box\"></div> <div class=\"background-clip-padding-box\"></div> <div class=\"background-clip-content-box\"></div>                          Từ khóa màu sắc                                       Trong CSS, bạn có thể sử dụng một vài từ khóa như sau.                     Từ khóa Mô tả   transparent Màu trong suốt   currentColor Màu của thuộc tính color đã được khai báo trước đó   inherit Thừa hưởng màu từ phần tử cha                           Hiệu ứng chuyển màu (Gradient)                                       Gradient là hiệu ứng chuyển màu từ một màu này sang một màu khác. Trong CSS, bạn có thể tạo gradient                     bằng cách sử dụng thuộc tính background-image với giá trị là linear-gradient() hoặc radial-gradient().                                            Linear Gradient                                               Linear Gradient là hiệu ứng chuyển màu theo chiều ngang hoặc chiều dọc.                      Cú pháp: background-image: linear-gradient(hướng, màu 1, màu 2, ....); .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, yellow); }  <div class=\"linear-gradient\"></div>   Các hướng có thể là:                                   to top: từ dưới lên trên                                                               to right: từ trái qua phải                                                               to bottom: từ trên xuống dưới                                                               to left: từ phải qua trái                                                               to top right: từ góc dưới bên trái lên góc trên bên phải                                                               to top left: từ góc dưới bên phải lên góc trên bên trái                                                               to bottom right: từ góc trên bên trái xuống góc dưới bên phải                                                               to bottom left: từ góc trên bên phải xuống góc dưới bên trái                                                               ?deg: góc độ (0deg là từ trái qua phải, 90deg là từ trên xuống dưới)                                 Mẹo: Bạn có thể thêm bao nhiêu màu tùy thích.                         Ví dụ: .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, orange, yellow, green, blue, purple); } <div class=\"linear-gradient\"></div>    Mở rộng:  Bạn còn có thể dùng giá trị màu RGBA trong gradient.  ngoài việc thêm mã màu, bạn có thể thêm % ngay sau mã màu đó nếu muốn tăng giảm tỉ lệ                                 màu. nếu muốn lặp lại chuyển màu bạn có thể dùng                                 background-image: repeating-linear-gradient                               Radial Gradient                                               Radial Gradient là hiệu ứng chuyển màu theo hình tròn.                      .radial-gradient {     width: 100%;     height: 300px;     background-image: radial-gradient(circle, red, yellow); }  <div class=\"radial-gradient\"></div>                             conic-gradient                                               conic-gradient là hiệu ứng chuyển màu theo hình tròn.                      .conic-gradient {     width: 100%;     height: 300px;     background-image: conic-gradient(red, yellow, green, blue, purple); }  <div class=\"conic-gradient\"></div>   chú ý: bạn có thể thêm số độ vào sau màu để chỉ định góc kết thúc của màu đó.                                              Bóng đổ (Shadow)                                       Bóng đổ là hiệu ứng tạo ra bóng cho phần tử. Trong CSS, bạn có thể tạo bóng đổ bằng cách sử dụng                     thuộc tính box-shadow hoặc text-shadow cho văn bản.                                            text-shadow                                               Thuộc tính text-shadow tạo bóng đổ cho văn bản.                         Code Mô tả Kết quả    h2{     text-shadow: 2px 2px; }  Đổ bóng với màu giống màu chữ, sang phải 2px, xuống dưới 2px  Đây là văn bản mẫu     h2{     text-shadow: 2px 2px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px                                   Đây là văn bản mẫu     h2{     text-shadow: 2px 2px 5px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px, mờ 5px                                   Đây là văn bản mẫu     h2{     color: white;     text-shadow: 2px 2px 4px #000; }                                       Đổ bóng với màu đen, sang phải 2px, xuống dưới 2px, mờ 4px                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px (hiệu ứng sáng neon)                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow,                   0 0 5px red; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px                                   Đây là văn bản mẫu     h2{     text-shadow: 1 1 2px black,                  0 0 5px red,                  0 0 7px blue; }                                       Đổ bóng với màu đen, sang phải 1px, xuống dưới 1px, mờ 2px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px + đổ bóng với màu xanh, không di chuyển, mờ 7px                                   Đây là văn                                         bản mẫu     h2{     color: white;     text-shadow: -1px 0 black,                  0 1px black,                  1px 0 black,                 0 -1px black; }                                       Đổ bóng với màu đen, sang trái 1px, lên trên 1px, sang phải 1px, xuống dưới 1px                                     (hiệu ứng viền chữ)                                                                            Đây                                         là văn bản mẫu                                box-shadow                                               Thuộc tính box-shadow tạo bóng đổ cho phần tử.                         Code Mô tả Kết quả    div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px; }  Đổ bóng với màu đen, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px 12px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, độ rộng 12px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue inset; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, bên trong        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 5px 5px blue,                 10px 10px red,                 15px 15px green; }  Đổ bóng với màu xanh, sang phải 5px, xuống dưới 5px + đổ bóng với màu đỏ, sang phải                                     10px, xuống dưới 10px + đổ bóng với màu xanh, sang phải 15px, xuống dưới 15px                               Hiệu ứng chữ (Text Effect)                  Quan sát bảng dưới đây để biết thêm chi tiết    thuộc tính giá trị Mã nguồn Mô tả Kết quả   text-overflow clip  p{     white-space: nowrap; /* không ngắt dòng */     width: 200px;     border: 1px solid black;     overflow: hidden;     text-overflow: clip; }                                   Đoạn vượt quá kích thước sẽ bị cắt bớt                                                                    Đây là một đoạn văn dài dùng để test     ellipsis  p{     white-space: nowrap; /* không ngắt dòng */     width: 200px;     border: 1px solid black;     overflow: hidden;     text-overflow: ellipsis; }                                   Đoạn vượt quá kích thước sẽ được thêm dấu 3 chấm                                                                    Đây là một đoạn văn dài dùng để test      word-wrap   break-word   p{     width: 200px;     border: 1px solid black;     word-wrap: break-word; }                                   Tự động ngắt từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test condaylamotturatdaidaihoncachieudaicuathep     word-break   break-all   p{     width: 200px;     border: 1px solid black;     word-break: break-all; }                                   Tự động ngắt từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test dòng này sẽ ngắt tại bất cứ vị trí nào của kí tự     keep-all   p{     width: 200px;     border: 1px solid black;     word-break: keep-all; }                                   Giữ nguyên từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test dòng-này-sẽ-được-ngắt-tại-dấu-gạch-nối     writing-mode   vertical-rl   p{     writing-mode: vertical-rl; }                                   Hiển thị văn bản theo chiều dọc từ phải qua trái                               Đây là một đoạn test     horizontal-bt   p{     writing-mode: horizontal-bt; }                                   Hiển thị văn bản theo chiều ngang (mặc định)                               Đây là một đoạn test                            CSS Web Fonts                                       Trong CSS, bạn có thể sử dụng font chữ từ nhiều nguồn khác nhau như Google Fonts, Adobe Fonts, hoặc                     tải lên trang web của bạn.                   Chú ý: Bạn cần chú ý đến bản quyền khi sử dụng font chữ từ các nguồn khác nhau. Trong hướng                     dẫn này, không hướng dẫn cách sử dụng font chữ từ các nguồn khác nhau. Bạn có thể tìm hiểu thêm tại                     các trang web chính thức của họ.                  Nhúng font của bạn vào trang web với @font-face @font-face {     font-family: myFirstFont;     src: url(sansation_light.woff); }                      Sau đó, bạn có thể sử dụng font chữ này trong trang web của bạn.                  p {     font-family: myFirstFont; } Các thuộc tính dùng trong @font-face    Thuộc tính Giá trị Mô tả   font-family tên phông Định nghĩa tên font sẽ được gọi sau này   src url('font.woff') Đường dẫn đến file font   font-style normal, italic, oblique Chọn kiểu chữ   font-weight normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900 Chọn độ đậm của chữ   font-stretch normal, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded,                                 expanded, extra-expanded, ultra-expanded Chọn độ dài của chữ   unicode-range U+0-10FFFF Chọn phạm vi ký tự                           CSS 2D & 3D Transforms                                       Trong CSS, bạn có thể thay đổi hình dạng, kích thước, và vị trí của phần tử bằng cách sử dụng các                     transform.                                       Hãy thử các thuộc tính transform dưới đây                                                      Thuộc tính                                                               Giá trị                                                               Mã nguồn                                                               Mô tả                                                               Kết quả                                   translate() rotate() scale() scaleX() scaleY() skew() skewX() skewY() matrix()   rotateX() rotateY() rotateZ()         div {     transform: translate(0, 0); }                                   Dịch chuyển phần tử x-px sang phải và y-px xuống dưới                                                                    DIV                             transition trong CSS                                       Trong CSS, bạn có thể thay đổi giá trị của một thuộc tính từ giá trị này sang giá trị khác một cách                     mượt mà với transition.                                       Cú pháp của transition:                  selector {     transition: property duration timing-function delay; }                      Các thuộc tính của transition:                     Thuộc tính Giá trị Mô tả   property all, property-name Chọn thuộc tính sẽ thay đổi, với all là tất cả các thuộc tính(thuộc tính bắt buộc)   duration time Thời gian thay đổi (thuộc tính bắt buộc)   timing-function ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n) Chọn kiểu chuyển động với                                  ease: chậm ở đầu và cuối, nhanh ở giữa linear: chuyển động đều ease-in: chậm ở đầu ease-out: chậm ở cuối ease-in-out: chậm ở đầu và cuối cubic-bezier(n,n,n,n): tự định nghĩa kiểu chuyển động     delay time Thời gian trễ trước khi thay đổi     Chú ý: Bạn có thể thay đổi giá trị của thuộc tính transition bằng cách sử dụng pseudo-class                     hoặc JavaScript.                      Bổ sung: Bạn có thể thêm nhiều transition cho một phần tử bằng cách sử dụng dấu phẩy.                                       Một vài ví dụ với transition                                       thay đổi màu nền của phần tử khi rê chuột vào phần tử                  div {     width: 100px;     height: 100px;     background-color: red;     transition: background-color 0.5s ease; }  div:hover {     background-color: blue; } <div>Hover me</div>                       thay đổi kích thước của phần tử khi rê chuột vào phần tử                  div {     width: 100px;     height: 100px;     background-color: red;     transition: width 0.5s ease, height 0.5s ease; }  div:hover {     width: 200px;     height: 200px; } <div>Hover me</div>                         Animation trong CSS                                       Trong CSS, bạn có thể tạo ra các hiệu ứng chuyển động mượt mà với animation.                                       Cú pháp của animation:                  @keyframes animation-name {     from {         property: value;     }     to {         property: value;     } }  Hoặc @keyframes animation-name {     0% {         property: value;     }     ...% {         property: value;     }     100% {         property: value;     } } selector {     animation: animation-name duration timing-function delay iteration-count direction fill-mode play-state; }                      Các thuộc tính của animation:                     Thuộc tính Giá trị Mô tả   animation-name name Tên của animation (thuộc tính bắt buộc)   duration time Thời gian chuyển động (thuộc tính bắt buộc)   timing-function ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n) Chọn kiểu chuyển động với                                  ease: chậm ở đầu và cuối, nhanh ở giữa linear: chuyển động đều ease-in: chậm ở đầu ease-out: chậm ở cuối ease-in-out: chậm ở đầu và cuối cubic-bezier(n,n,n,n): tự định nghĩa kiểu chuyển động     delay time Thời gian trễ trước khi chuyển động   iteration-count number, infinite Số lần lặp lại hoặc infinite   direction normal, reverse, alternate, alternate-reverse Chọn hướng chuyển động                                  normal: chuyển động theo thứ tự reverse: chuyển động ngược lại alternate: chuyển động theo thứ tự và ngược lại alternate-reverse: chuyển động ngược lại và theo thứ tự     fill-mode none, forwards, backwards, both Chọn giá trị của thuộc tính khi chuyển động kết thúc                                  none: không thay đổi forwards: giữ giá trị cuối cùng backwards: giữ giá trị đầu tiên both: giữ cả giá trị đầu tiên và cuối cùng     play-state running, paused Chọn trạng thái chuyển động                                  running: chuyển động paused: tạm dừng chuyển động                           Một vài ví dụ với animation                                       xoay phần tử 360 độ, kết hợp đổi màu, và thay đổi kích thước                  @keyframes rotate {     from {         transform: rotate(0deg);         background-color: red;         width: 100px;         height: 100px;     }     to {         transform: rotate(360deg);         background-color: blue;         width: 200px;         height: 200px;     } }  div {     width: 100px;     height: 100px;     background-color: red;     animation: rotate 2s ease infinite; } <div></div>                       thay đổi màu nền của phần tử từ màu đỏ -> cam -> vàng -> lục -> lam -> tím                  @keyframes changeColor {     0% {         background-color: red;         width: 100px;         height: 100px;     }     20% {         background-color: orange;         width: 120px;         height: 120px;     }     40% {         background-color: yellow;         width: 100px;         height: 100px;     }     60% {         background-color: green;         width: 120px;         height: 120px;     }     80% {         background-color: blue;         width: 100px;         height: 100px;     }     100% {         background-color: purple;         width: 120px;         height: 120px;     } }  div {     width: 100px;     height: 100px;     background-color: red;     animation: changeColor 5s linear infinite alternate; } <div></div>                         resize và outline offset trong CSS                                       Trong CSS, bạn có thể thay đổi kích thước của phần tử với resize và thay đổi vị trí của đường viền                     với outline offset.                                       resize có 4 giá trị:                   none: không thay đổi kích thước both: thay đổi kích thước theo chiều ngang và dọc horizontal: thay đổi kích thước theo chiều ngang vertical: thay đổi kích thước theo chiều dọc                       ví dụ với resize                  div {     width: 100px;     height: 100px;     background-color: red;     margin: 10px; } .div-resize-none {     resize: none;     overflow: auto; } .div-resize-both {     resize: both;     overflow: auto; } .div-resize-horizontal {     resize: horizontal;     overflow: auto; } .div-resize-vertical {     resize: vertical;     overflow: auto; } <div class=\"div-resize-none\"></div> <div class=\"div-resize-both\"></div> <div class=\"div-resize-horizontal\"></div> <div class=\"div-resize-vertical\"></div>                       outline offset                                       outline offset dùng để thay đổi vị trí của đường viền so với phần tử.                                       ví dụ với outline offset                  .div-outline-offset {     width: 100px;     height: 100px;     background-color: red;     margin: 10px;     outline: 2px solid blue;     outline-offset: 10px;     border: 2px solid green; } <div class=\"div-outline-offset\"></div>                         Biến trong CSS                                       Trong CSS, bạn có thể sử dụng biến để lưu trữ giá trị và sử dụng lại giá trị đó ở nhiều nơi khác                     nhau.                                       Cú pháp của biến trong CSS:                  :root {     --name: value; }  selector {     property: var(--name); }                      Một vài ví dụ với biến trong CSS                                       sử dụng biến để lưu trữ màu nền và kích thước của phần tử                  :root {     --background-color: red;     --width: 100px;     --height: 100px; }  div {     width: var(--width);     height: var(--height);     background-color: var(--background-color); } <div></div>                            Ghi đè biến trong CSS                                               Trong CSS, bạn có thể ghi đè giá trị của biến bằng cách khai báo biến mới với cùng tên (biến cục                         bộ).                                               Trong ví dụ ở phần trên, nếu khai váo --background-color: green; trong phần tử div, giá trị của biến --background-color sẽ bị ghi đè.                         Kết quả sẽ là màu nền của phần tử sẽ là màu xanh.                                                 Thay đổi giá trị biến trong JavaScript                                               Trong JavaScript, bạn có thể thay đổi giá trị của biến trong CSS bằng cách sử dụng phương thức                         setProperty của đối tượng style.                         Ứng dụng cho việc chuyển đổi giao diện sáng, tối...                                                 Thay đổi biến với Media Queries                                               Trong CSS, bạn có thể thay đổi giá trị của biến với media queries. Điều này giúp bạn tạo ra giao                         diện phản hồi. Phù hợp với thiết bị.                         Chẳng hạn thiết bị nhỏ hơn sẽ khai báo biến với giá trị nhỏ hơn.                                              Media Queries trong CSS                                       Trong CSS, bạn có thể sử dụng media queries để thay đổi giao diện của trang web dựa trên các điều                     kiện như chiều rộng, chiều cao, tỷ lệ màn hình...                                       Cú pháp của media queries:                  @media not|only mediatype and (expressions) {     CSS-Code; }                      Các thuộc tính của media queries:                     Thuộc tính Giá trị Mô tả   not Không áp dụng cho điều kiện Không áp dụng cho điều kiện   only Chỉ áp dụng cho điều kiện Chỉ áp dụng cho điều kiện   mediatype all, print, screen, speech Chọn kiểu thiết bị   expressions width, height, min-width, max-width, min-height, max-height, orientation, aspect-ratio,                                 device-width, device-height, device-aspect-ratio, device-pixel-ratio, resolution, scan,                                 grid Chọn điều kiện                         Một vài ví dụ với media queries                                       ẩn phần tử khi chiều rộng màn hình nhỏ hơn 600px                  @media screen and (max-width: 600px) {     div {         display: none;     } } <div style=\"width: 100px; height:100px; background-color: red;\"></div>                       thay đổi màu nền của phần tử khi chiều rộng màn hình nhỏ hơn 600px                  @media screen and (max-width: 600px) {     div {         background-color: red;     } } <div style=\"width: 100px; height:100px; border: 1px solid green;\"></div>                         Flexbox trong CSS                                       Trong CSS, bạn có thể sử dụng flexbox để sắp xếp các phần tử con của một phần tử cha một cách linh                     hoạt.                                       Ví dụ về Flexbox                  .container {     display: flex;     background-color: red; } .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   Trong ví dụ trên:  Phần tử cha có class là container sẽ sắp xếp các phần tử con theo chiều                     ngang mà không cần sử dụng float, inline-block, table...                                            flex container                                               Trong CSS, phần tử cha của các phần tử con sử dụng flexbox được gọi là flex container.                                               Các thuộc tính của flex container bao gồm                       display: flex (bắt buộc) flex-direction: row, row-reverse, column, column-reverse flex-wrap: nowrap, wrap, wrap-reverse flex-flow: flex-direction flex-wrap justify-content: flex-start, flex-end, center, space-between, space-around align-items: stretch, flex-start, flex-end, center, baseline align-content: stretch, flex-start, flex-end, center, space-between, space-around   flex-direction                           flex-direction dùng để xác định hướng sắp xếp các phần tử con của flex container.                       row: sắp xếp theo chiều ngang (mặc định) row-reverse: sắp xếp theo chiều ngang ngược lại column: sắp xếp theo chiều dọc column-reverse: sắp xếp theo chiều dọc ngược lại  .container {     display: flex; }  .flex-direction-row {     flex-direction: row;     background-color: red; }  .flex-direction-row-reverse {     flex-direction: row-reverse;     background-color: green; }  .flex-direction-column {     flex-direction: column;     background-color: blue; }  .flex-direction-column-reverse {     flex-direction: column-reverse;     background-color: yellow; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-direction-row\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-row-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   flex-wrap                           flex-wrap dùng để xác định phần tử con của flex container có bị tràn ra ngoài không.                       nowrap: không tràn ra ngoài (mặc định) wrap: tràn ra ngoài wrap-reverse: tràn ra ngoài ngược lại  .container {     display: flex; }  .flex-wrap-nowrap {     flex-wrap: nowrap;     background-color: red; }  .flex-wrap-wrap {     flex-wrap: wrap;     background-color: green; }  .flex-wrap-wrap-reverse {     flex-wrap: wrap-reverse;     background-color: blue; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-wrap-nowrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    flex-flow                           flex-flow là thuộc tính rút gọn của flex-direction và flex-wrap. Nó giúp bạn viết ngắn gọn hơn.                       justify-content                           justify-content dùng để căn chỉnh các phần tử con theo chiều ngang của flex container.                       flex-start: căn chỉnh từ bên trái (mặc định) flex-end: căn chỉnh từ bên phải center: căn chỉnh ở giữa space-between: căn chỉnh đều các phần tử con space-around: căn chỉnh đều các phần tử con với khoảng cách giữa các phần tử con bằng                             nhau(khoảng cách từ lề đến phần tử con = 1/2 khoảng cách các phần tử con với nhau)  .container {     display: flex; }  .justify-content-flex-start {     justify-content: flex-start;     background-color: red; }  .justify-content-flex-end {     justify-content: flex-end;     background-color: green; }  .justify-content-center {     justify-content: center;     background-color: blue; }  .justify-content-space-between {     justify-content: space-between;     background-color: yellow; }  .justify-content-space-around {     justify-content: space-around;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container justify-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của flex container.                       stretch: căn chỉnh kéo dài các mục linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa baseline: căn chỉnh theo đườg cơ sở (đường kéo dài đi qua điểm giữa các phần tử)  .container {     display: flex;     height: 150px; }  .align-items-stretch {     align-items: stretch;     background-color: red; }  .align-items-flex-start {     align-items: flex-start;     background-color: green; }  .align-items-flex-end {     align-items: flex-end;     background-color: blue; }  .align-items-center {     align-items: center;     background-color: yellow; }  .align-items-baseline {     align-items: baseline;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-items-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-baseline\">     <div class=\"item\" style=\"font-size: 30px;\">Item 1</div>     <div class=\"item\" style=\"font-size: 20px;\">Item 2</div>     <div class=\"item\" style=\"font-size: 10px;\">Item 3</div> </div>   align-content                           align-content dùng để căn chỉnh các dòng của flex container theo chiều dọc.                       stretch: căn chỉnh kéo dài các dòng linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa space-between: căn chỉnh đều các dòng space-around: căn chỉnh đều các dòng với khoảng cách giữa các dòng bằng nhau(khoảng cách từ                             lề đến dòng = 1/2 khoảng cách các dòng với nhau)  .container {     display: flex;     flex-wrap: wrap;     height: 150px; }  .align-content-stretch {     align-content: stretch;     background-color: red; }  .align-content-flex-start {     align-content: flex-start;     background-color: green; }  .align-content-flex-end {     align-content: flex-end;     background-color: blue; }  .align-content-center {     align-content: center;     background-color: yellow; }  .align-content-space-between {     align-content: space-between;     background-color: purple; }  .align-content-space-around {     align-content: space-around;     background-color: orange; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-content-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    Mẹo: Căn phần tử con nằm chinh giữa phần tử cha một cách hoàn hảo. chỉnh thuộc tính                         justify-content và align-items thành center.                                                 flex item                                               Trong CSS, phần tử con của flex container sử dụng flexbox được gọi là flex item.                                               Các thuộc tính của flex item bao gồm                       order: xác định thứ tự của phần tử con flex-grow: xác định tỷ lệ mà phần tử con sẽ mở rộng flex-shrink: xác định tỷ lệ phần trăm mà phần tử con sẽ co lại flex-basis: xác định kích thước cơ bản của phần tử con flex: rút gọn của flex-grow, flex-shrink, flex-basis align-self: xác định căn chỉnh của phần tử con   order                           order dùng để xác định thứ tự của phần tử con trong flex container.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }   <div class=\"container\">     <div class=\"item\" style=\"order: 3;\">Item 1</div>     <div class=\"item\" style=\"order: 2;\">Item 2</div>     <div class=\"item\" style=\"order: 1;\">Item 3</div> </div>   flex-grow                           flex-grow dùng để xác định tỷ lệ mà phần tử con sẽ mở rộng.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container\">     <div class=\"item\" style=\"flex-grow: 1;\">Item 1</div>     <div class=\"item\" style=\"flex-grow: 2;\">Item 2</div>     <div class=\"item\" style=\"flex-grow: 3;\">Item 3</div> </div>   Mẹo: Phần tử con sử dụng flex-grow sẽ mở rộng theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         mở rộng gấp đôi so với phần tử con thứ 1.                       Lưu ý: chúng ta có thể đặt flex-grow là 1 và các phần tử còn lại là mặc định để cho phần tử đó lấp đầy phần còn lại của flex container.                       flex-shrink                           flex-shrink dùng để xác định tỷ lệ mà phần tử con sẽ co lại.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">1</div>     <div class=\"item\" style=\"flex-shrink: 2;\">2</div>     <div class=\"item\">3</div>     <div class=\"item\">4</div>     <div class=\"item\">5</div>     <div class=\"item\">6</div>     <div class=\"item\">7</div>     <div class=\"item\">8</div>     <div class=\"item\">9</div> </div>   Mẹo: Phần tử con sử dụng flex-shrink sẽ co lại theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         co lại gấp đôi so với phần tử con thứ 1.                       flex-basis                           flex-basis dùng để xác định kích thước cơ bản của phần tử con.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">Item 1</div>     <div class=\"item\" style=\"flex-basis: 200px;\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div> </div>   flex                           flex là thuộc tính rút gọn của flex-grow, flex-shrink, flex-basis. Nó giúp bạn viết ngắn gọn hơn.                       align-self                           align-self dùng để căn chỉnh phần tử con trong flex container.                      .container {     display: flex;     background-color: red;     align-items: stretch;     height: 150px; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\" style=\"align-self: flex-start;\">Item 1</div>     <div class=\"item\" style=\"align-self: flex-end;\">Item 2</div>     <div class=\"item\" style=\"align-self: center;\">Item 3</div>     <div class=\"item\" style=\"align-self: baseline;\">Item 4</div>     <div class=\"item\" style=\"align-self: stretch;\">Item 5</div> </div>                          Grid Layout                                       Grid layout là hệ thống bố cục dạng lưới, giúp chúng ta tạo ra các layout phức tạp một cách dễ dàng.                                       Ví dụ về grid layout                  .container {     display: grid;     grid-template-columns: 100px 100px 100px;     grid-template-rows: 100px 100px 100px;     gap: 10px; }  .item {     background-color: red;     padding: 10px;     text-align: center; }  <div class=\"container\">     <div class=\"item\">1</div>     <div class=\"item\">2</div>     <div class=\"item\">3</div>     <div class=\"item\">4</div>     <div class=\"item\">5</div>     <div class=\"item\">6</div>     <div class=\"item\">7</div>     <div class=\"item\">8</div>     <div class=\"item\">9</div> </div>                            grid container                                               Trong CSS, phần tử chứa grid layout được gọi là grid container.                                               Các thuộc tính của grid container bao gồm                       grid-template-columns: xác định số cột của grid layout grid-template-rows: xác định số dòng của grid layout gap: xác định khoảng cách giữa các cột và dòng justify-items: xác định căn chỉnh theo chiều ngang của các phần tử con align-items: xác định căn chỉnh theo chiều dọc của các phần tử con justify-content: xác định căn chỉnh theo chiều ngang của grid container align-content: xác định căn chỉnh theo chiều dọc của grid container   grid-template-columns  Cú pháp:                         grid-template-columns: c1, c2, c3 ...;   Trong đó: c1, c2, c3 là kích thước của cột. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu cột tùy ý.                       Lưu ý: nếu số item lớn hơn số cột, item sẽ tự động chuyển xuống dòng mới.                       grid-template-rows  Cú pháp:                         grid-template-rows: r1, r2, r3 ...;   Trong đó: r1, r2, r3 là kích thước của dòng. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu dòng tùy ý.                       gap  Cú pháp:                         gap: x;   Trong đó: x là khoảng cách giữa các cột và dòng. Có thể sử dụng các đơn vị đo lường như px, %, em, rem.                       justify-items                           justify-items dùng để căn chỉnh các phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái (mặc định) end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống (mặc định) end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt                             grid item                                               Trong CSS, phần tử con của grid container được gọi là grid item.                                               Các thuộc tính của grid item bao gồm                       grid-column-start: xác định cột bắt đầu của phần tử con grid-column-end: xác định cột kết thúc của phần tử con grid-row-start: xác định dòng bắt đầu của phần tử con grid-row-end: xác định dòng kết thúc của phần tử con grid-column: rút gọn của grid-column-start và grid-column-end grid-row: rút gọn của grid-row-start và grid-row-end grid-area: rút gọn của grid-column-start, grid-column-end, grid-row-start và grid-row-end justify-self: xác định căn chỉnh theo chiều ngang của phần tử con align-self: xác định căn chỉnh theo chiều dọc của phần tử con   grid-column-start  Cú pháp:                         grid-column-start: x;   Trong đó: x là cột bắt đầu của phần tử con.                       grid-column-end  Cú pháp:                         grid-column-end: x;   Trong đó: x là cột kết thúc của phần tử con.                       grid-row-start  Cú pháp:                         grid-row-start: x;   Trong đó: x là dòng bắt đầu của phần tử con.                       grid-row-end  Cú pháp:                         grid-row-end: x;   Trong đó: x là dòng kết thúc của phần tử con.                       grid-column  Cú pháp:                         grid-column: x / y;   Trong đó: x là cột bắt đầu và y là cột kết thúc của phần tử con.                       grid-row  Cú pháp:                         grid-row: x / y;   Trong đó: x là dòng bắt đầu và y là dòng kết thúc của phần tử con.                       grid-area  Cú pháp:                         grid-area: x / y / z / t;   Trong đó: x là cột bắt đầu, y là dòng bắt đầu, z là cột kết thúc và t là dòng kết thúc của phần tử con.                       justify-self                           justify-self dùng để căn chỉnh phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-self                           align-self dùng để căn chỉnh phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt"
    },
    {
        "title": "Bo góc với CSS",
        "content": "Bo góc với CSS                      Để bo góc cho một phần tử HTML, bạn sử dụng thuộc tính border-radius. Ví dụ, để bo góc thành hình                     tròn, bạn sử dụng giá trị 50% cho thuộc tính border-radius.                  .border-radius {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 50%; }                  <div class=\"border-radius\"></div>                            Chỉ định cho từng góc                                               Bạn có thể chỉ định cho từng góc bằng cách sử dụng giá trị px hoặc %.                      Với 4 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right) (bottom-right) (bottom-left);  Với 3 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right bottom-left) (bottom-right);  Với 2 giá trị của thuộc tính border-radius  border-radius: (top-left top-right) (bottom-left bottom-right);  Với 1 giá trị của thuộc tính border-radius  border-radius: (all);  .border-radius-4 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px 90px;     float: left; } .border-radius-3 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px;     float: left; } .border-radius-2 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px;     float: left; } .border-radius-1 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 20px;     float: left; }                      <div class=\"border-radius-4\"></div> <div class=\"border-radius-3\"></div> <div class=\"border-radius-2\"></div> <div class=\"border-radius-1\"></div>"
    },
    {
        "title": "Chỉ định cho từng góc",
        "content": "Chỉ định cho từng góc                                               Bạn có thể chỉ định cho từng góc bằng cách sử dụng giá trị px hoặc %.                      Với 4 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right) (bottom-right) (bottom-left);  Với 3 giá trị của thuộc tính border-radius  border-radius: (top-left) (top-right bottom-left) (bottom-right);  Với 2 giá trị của thuộc tính border-radius  border-radius: (top-left top-right) (bottom-left bottom-right);  Với 1 giá trị của thuộc tính border-radius  border-radius: (all);  .border-radius-4 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px 90px;     float: left; } .border-radius-3 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px 70px;     float: left; } .border-radius-2 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 30px 50px;     float: left; } .border-radius-1 {     background-color: red;     border: 1px solid black;     width: 200px;     height: 200px;     border-radius: 20px;     float: left; }                      <div class=\"border-radius-4\"></div> <div class=\"border-radius-3\"></div> <div class=\"border-radius-2\"></div> <div class=\"border-radius-1\"></div>"
    },
    {
        "title": "Viền bằng hình ảnh",
        "content": "Viền bằng hình ảnh                                       Để tạo viền bằng hình ảnh, bạn sử dụng thuộc tính border-image với                     giá trị là url của hình ảnh.                  .border-image {     border: 10px solid transparent;     padding: 15px;     border-image: url('border.png') 193 round; }                  <div class=\"border-image\"></div>   Với:  url('border.png'): đường dẫn đến ảnh 193: nơi cắt ảnh round: kiểu xử lý    Mẹo: nơi cắt ảnh có thể tính bằng cách lấy chiều rộng ảnh chia 3.                  Ngoài kiểu round còn có kiêu stretch .border-image {     border: 10px solid transparent;     padding: 15px;     border-image: url('border.png') 193 stretch; }  <div class=\"border-image\"></div>"
    },
    {
        "title": "Hình nền nâng cao",
        "content": "Hình nền nâng cao                                            Nhiều hình nền cho một phần tử                                               Để thêm nhiều hình nền cho một phần tử, bạn sử dụng thuộc tính background-image nhiều lần.                      .background-image {     color: brown;     font-size: 30px;     font-weight: bold;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png'), url('pattern.jpg');     background-repeat: no-repeat, no-repeat, no-repeat;     background-position: bottom right, top left; }  <div class=\"background-image\"></div>                             Đặt kích thước cho hình nền                                               Để đặt kích thước cho hình nền, bạn sử dụng thuộc tính background-size.                                               thuộc tính background-size có các giá trị:                      auto: kích thước mặc định của hình ảnh w(%/px) h(%/px): kích thước chiều rộng và chiều cao hình ảnh cover: hình ảnh sẽ bao phủ toàn bộ phần tử contain: hình ảnh sẽ được hiển thị đầy đủ trong phần tử   .background-size-auto {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: auto; } .background-size-cover {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover; } .background-size-contain {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: contain; }  .background-size-xy {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: 100px 200px; }  <div class=\"background-size-auto\"></div> <div class=\"background-size-cover\"></div> <div class=\"background-size-contain\"></div> <div class=\"background-size-xy\"></div>    Hình nền kích thước đầy đủ Với những yêu cầu sau:  Lấp đầy toàn bộ trang bằng hình ảnh Thu phóng ảnh linh hoạt Hình ảnh nằm chính giữa màn hình Không tạo ra thanh cuộn                           Bạn có thể thêm mã css sau:                      html {     background: url('hinh-anh.jpg') no-repeat center center fixed;     background-size: cover; }  click  Bạn cũng có thể áp dụng cho một thẻ div chứa nội dung và đặt vào bất cứ đâu trong trang web mà                         bạn thích body {     margin: 0;     padding: 0;     font-family: Arial, sans-serif; }  .container {     width: 100%;     height: 300px;     background: url('hinh-anh.jpg') no-repeat center;     background-size: cover;     position: relative; }  .container .text{     text-align: center;     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     color: white;     font-size: 30px;     font-weight: bold; }  <div class=\"container\">     <div class=\"text\">Lấp đầy trang với nền hình ảnh</div> </div> <p>     Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nihil velit in quibusdam deserunt quis distinctio hic harum amet magni soluta, incidunt, quod quae optio mollitia ipsa vero saepe molestias repudiandae! </p>                              CSS background-origin                                               Thuộc tính background-origin xác định điểm bắt đầu của hình                         nền.                                               Thuộc tính background-origin có các giá trị:                      padding-box: hình nền bắt đầu từ phần padding border-box: hình nền bắt đầu từ phần border content-box: hình nền bắt đầu từ phần content   .background-origin-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: padding-box;     margin: 10px; } .background-origin-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: border-box;     margin: 10px; }  .background-origin-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: content-box;     margin: 10px; }  <div class=\"background-origin-padding-box\"></div> <div class=\"background-origin-border-box\"></div> <div class=\"background-origin-content-box\"></div>                              CSS background-clip                                               Thuộc tính background-clip xác định phần nào của phần tử sẽ                         hiển thị hình nền.                                               Thuộc tính background-clip có các giá trị:                      border-box: hình nền sẽ hiển thị dưới phần border padding-box: hình nền sẽ hiển thị dưới phần padding content-box: hình nền sẽ hiển thị dưới phần content   .background-clip-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: border-box;     margin: 10px; } .background-clip-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: padding-box;     margin: 10px; }  .background-clip-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: content-box;     margin: 10px; }  <div class=\"background-clip-border-box\"></div> <div class=\"background-clip-padding-box\"></div> <div class=\"background-clip-content-box\"></div>"
    },
    {
        "title": "Nhiều hình nền cho một phần tử",
        "content": "Nhiều hình nền cho một phần tử                                               Để thêm nhiều hình nền cho một phần tử, bạn sử dụng thuộc tính background-image nhiều lần.                      .background-image {     color: brown;     font-size: 30px;     font-weight: bold;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png'), url('pattern.jpg');     background-repeat: no-repeat, no-repeat, no-repeat;     background-position: bottom right, top left; }  <div class=\"background-image\"></div>"
    },
    {
        "title": "Đặt kích thước cho hình nền",
        "content": "Đặt kích thước cho hình nền                                               Để đặt kích thước cho hình nền, bạn sử dụng thuộc tính background-size.                                               thuộc tính background-size có các giá trị:                      auto: kích thước mặc định của hình ảnh w(%/px) h(%/px): kích thước chiều rộng và chiều cao hình ảnh cover: hình ảnh sẽ bao phủ toàn bộ phần tử contain: hình ảnh sẽ được hiển thị đầy đủ trong phần tử   .background-size-auto {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: auto; } .background-size-cover {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover; } .background-size-contain {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: contain; }  .background-size-xy {     border: 1px solid black;     width: 100%;     height: 300px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: 100px 200px; }  <div class=\"background-size-auto\"></div> <div class=\"background-size-cover\"></div> <div class=\"background-size-contain\"></div> <div class=\"background-size-xy\"></div>"
    },
    {
        "title": "Hình nền kích thước đầy đủ",
        "content": "Hình nền kích thước đầy đủ Với những yêu cầu sau:  Lấp đầy toàn bộ trang bằng hình ảnh Thu phóng ảnh linh hoạt Hình ảnh nằm chính giữa màn hình Không tạo ra thanh cuộn                           Bạn có thể thêm mã css sau:                      html {     background: url('hinh-anh.jpg') no-repeat center center fixed;     background-size: cover; }  click  Bạn cũng có thể áp dụng cho một thẻ div chứa nội dung và đặt vào bất cứ đâu trong trang web mà                         bạn thích body {     margin: 0;     padding: 0;     font-family: Arial, sans-serif; }  .container {     width: 100%;     height: 300px;     background: url('hinh-anh.jpg') no-repeat center;     background-size: cover;     position: relative; }  .container .text{     text-align: center;     position: absolute;     top: 50%;     left: 50%;     transform: translate(-50%, -50%);     color: white;     font-size: 30px;     font-weight: bold; }  <div class=\"container\">     <div class=\"text\">Lấp đầy trang với nền hình ảnh</div> </div> <p>     Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nihil velit in quibusdam deserunt quis distinctio hic harum amet magni soluta, incidunt, quod quae optio mollitia ipsa vero saepe molestias repudiandae! </p>"
    },
    {
        "title": "CSS background-origin",
        "content": "CSS background-origin                                               Thuộc tính background-origin xác định điểm bắt đầu của hình                         nền.                                               Thuộc tính background-origin có các giá trị:                      padding-box: hình nền bắt đầu từ phần padding border-box: hình nền bắt đầu từ phần border content-box: hình nền bắt đầu từ phần content   .background-origin-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: padding-box;     margin: 10px; } .background-origin-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: border-box;     margin: 10px; }  .background-origin-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-origin: content-box;     margin: 10px; }  <div class=\"background-origin-padding-box\"></div> <div class=\"background-origin-border-box\"></div> <div class=\"background-origin-content-box\"></div>"
    },
    {
        "title": "CSS background-clip",
        "content": "CSS background-clip                                               Thuộc tính background-clip xác định phần nào của phần tử sẽ                         hiển thị hình nền.                                               Thuộc tính background-clip có các giá trị:                      border-box: hình nền sẽ hiển thị dưới phần border padding-box: hình nền sẽ hiển thị dưới phần padding content-box: hình nền sẽ hiển thị dưới phần content   .background-clip-border-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: border-box;     margin: 10px; } .background-clip-padding-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: padding-box;     margin: 10px; }  .background-clip-content-box {     border: 10px solid black;     width: 300px;     height: 200px;     padding: 20px;     background-image: url('hinh-anh.png');     background-repeat: no-repeat;     background-size: cover;     background-clip: content-box;     margin: 10px; }  <div class=\"background-clip-border-box\"></div> <div class=\"background-clip-padding-box\"></div> <div class=\"background-clip-content-box\"></div>"
    },
    {
        "title": "Từ khóa màu sắc",
        "content": "Từ khóa màu sắc                                       Trong CSS, bạn có thể sử dụng một vài từ khóa như sau.                     Từ khóa Mô tả   transparent Màu trong suốt   currentColor Màu của thuộc tính color đã được khai báo trước đó   inherit Thừa hưởng màu từ phần tử cha"
    },
    {
        "title": "Hiệu ứng chuyển màu (Gradient)",
        "content": "Hiệu ứng chuyển màu (Gradient)                                       Gradient là hiệu ứng chuyển màu từ một màu này sang một màu khác. Trong CSS, bạn có thể tạo gradient                     bằng cách sử dụng thuộc tính background-image với giá trị là linear-gradient() hoặc radial-gradient().                                            Linear Gradient                                               Linear Gradient là hiệu ứng chuyển màu theo chiều ngang hoặc chiều dọc.                      Cú pháp: background-image: linear-gradient(hướng, màu 1, màu 2, ....); .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, yellow); }  <div class=\"linear-gradient\"></div>   Các hướng có thể là:                                   to top: từ dưới lên trên                                                               to right: từ trái qua phải                                                               to bottom: từ trên xuống dưới                                                               to left: từ phải qua trái                                                               to top right: từ góc dưới bên trái lên góc trên bên phải                                                               to top left: từ góc dưới bên phải lên góc trên bên trái                                                               to bottom right: từ góc trên bên trái xuống góc dưới bên phải                                                               to bottom left: từ góc trên bên phải xuống góc dưới bên trái                                                               ?deg: góc độ (0deg là từ trái qua phải, 90deg là từ trên xuống dưới)                                 Mẹo: Bạn có thể thêm bao nhiêu màu tùy thích.                         Ví dụ: .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, orange, yellow, green, blue, purple); } <div class=\"linear-gradient\"></div>    Mở rộng:  Bạn còn có thể dùng giá trị màu RGBA trong gradient.  ngoài việc thêm mã màu, bạn có thể thêm % ngay sau mã màu đó nếu muốn tăng giảm tỉ lệ                                 màu. nếu muốn lặp lại chuyển màu bạn có thể dùng                                 background-image: repeating-linear-gradient                               Radial Gradient                                               Radial Gradient là hiệu ứng chuyển màu theo hình tròn.                      .radial-gradient {     width: 100%;     height: 300px;     background-image: radial-gradient(circle, red, yellow); }  <div class=\"radial-gradient\"></div>                             conic-gradient                                               conic-gradient là hiệu ứng chuyển màu theo hình tròn.                      .conic-gradient {     width: 100%;     height: 300px;     background-image: conic-gradient(red, yellow, green, blue, purple); }  <div class=\"conic-gradient\"></div>   chú ý: bạn có thể thêm số độ vào sau màu để chỉ định góc kết thúc của màu đó."
    },
    {
        "title": "Linear Gradient",
        "content": "Linear Gradient                                               Linear Gradient là hiệu ứng chuyển màu theo chiều ngang hoặc chiều dọc.                      Cú pháp: background-image: linear-gradient(hướng, màu 1, màu 2, ....); .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, yellow); }  <div class=\"linear-gradient\"></div>   Các hướng có thể là:                                   to top: từ dưới lên trên                                                               to right: từ trái qua phải                                                               to bottom: từ trên xuống dưới                                                               to left: từ phải qua trái                                                               to top right: từ góc dưới bên trái lên góc trên bên phải                                                               to top left: từ góc dưới bên phải lên góc trên bên trái                                                               to bottom right: từ góc trên bên trái xuống góc dưới bên phải                                                               to bottom left: từ góc trên bên phải xuống góc dưới bên trái                                                               ?deg: góc độ (0deg là từ trái qua phải, 90deg là từ trên xuống dưới)                                 Mẹo: Bạn có thể thêm bao nhiêu màu tùy thích.                         Ví dụ: .linear-gradient {     width: 100%;     height: 300px;     background-image: linear-gradient(to right, red, orange, yellow, green, blue, purple); } <div class=\"linear-gradient\"></div>    Mở rộng:  Bạn còn có thể dùng giá trị màu RGBA trong gradient.  ngoài việc thêm mã màu, bạn có thể thêm % ngay sau mã màu đó nếu muốn tăng giảm tỉ lệ                                 màu. nếu muốn lặp lại chuyển màu bạn có thể dùng                                 background-image: repeating-linear-gradient"
    },
    {
        "title": "Radial Gradient",
        "content": "Radial Gradient                                               Radial Gradient là hiệu ứng chuyển màu theo hình tròn.                      .radial-gradient {     width: 100%;     height: 300px;     background-image: radial-gradient(circle, red, yellow); }  <div class=\"radial-gradient\"></div>"
    },
    {
        "title": "conic-gradient",
        "content": "conic-gradient                                               conic-gradient là hiệu ứng chuyển màu theo hình tròn.                      .conic-gradient {     width: 100%;     height: 300px;     background-image: conic-gradient(red, yellow, green, blue, purple); }  <div class=\"conic-gradient\"></div>   chú ý: bạn có thể thêm số độ vào sau màu để chỉ định góc kết thúc của màu đó."
    },
    {
        "title": "Bóng đổ (Shadow)",
        "content": "Bóng đổ (Shadow)                                       Bóng đổ là hiệu ứng tạo ra bóng cho phần tử. Trong CSS, bạn có thể tạo bóng đổ bằng cách sử dụng                     thuộc tính box-shadow hoặc text-shadow cho văn bản.                                            text-shadow                                               Thuộc tính text-shadow tạo bóng đổ cho văn bản.                         Code Mô tả Kết quả    h2{     text-shadow: 2px 2px; }  Đổ bóng với màu giống màu chữ, sang phải 2px, xuống dưới 2px  Đây là văn bản mẫu     h2{     text-shadow: 2px 2px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px                                   Đây là văn bản mẫu     h2{     text-shadow: 2px 2px 5px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px, mờ 5px                                   Đây là văn bản mẫu     h2{     color: white;     text-shadow: 2px 2px 4px #000; }                                       Đổ bóng với màu đen, sang phải 2px, xuống dưới 2px, mờ 4px                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px (hiệu ứng sáng neon)                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow,                   0 0 5px red; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px                                   Đây là văn bản mẫu     h2{     text-shadow: 1 1 2px black,                  0 0 5px red,                  0 0 7px blue; }                                       Đổ bóng với màu đen, sang phải 1px, xuống dưới 1px, mờ 2px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px + đổ bóng với màu xanh, không di chuyển, mờ 7px                                   Đây là văn                                         bản mẫu     h2{     color: white;     text-shadow: -1px 0 black,                  0 1px black,                  1px 0 black,                 0 -1px black; }                                       Đổ bóng với màu đen, sang trái 1px, lên trên 1px, sang phải 1px, xuống dưới 1px                                     (hiệu ứng viền chữ)                                                                            Đây                                         là văn bản mẫu                                box-shadow                                               Thuộc tính box-shadow tạo bóng đổ cho phần tử.                         Code Mô tả Kết quả    div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px; }  Đổ bóng với màu đen, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px 12px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, độ rộng 12px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue inset; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, bên trong        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 5px 5px blue,                 10px 10px red,                 15px 15px green; }  Đổ bóng với màu xanh, sang phải 5px, xuống dưới 5px + đổ bóng với màu đỏ, sang phải                                     10px, xuống dưới 10px + đổ bóng với màu xanh, sang phải 15px, xuống dưới 15px"
    },
    {
        "title": "text-shadow",
        "content": "text-shadow                                               Thuộc tính text-shadow tạo bóng đổ cho văn bản.                         Code Mô tả Kết quả    h2{     text-shadow: 2px 2px; }  Đổ bóng với màu giống màu chữ, sang phải 2px, xuống dưới 2px  Đây là văn bản mẫu     h2{     text-shadow: 2px 2px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px                                   Đây là văn bản mẫu     h2{     text-shadow: 2px 2px 5px red; }                                       Đổ bóng với màu đỏ, sang phải 2px, xuống dưới 2px, mờ 5px                                   Đây là văn bản mẫu     h2{     color: white;     text-shadow: 2px 2px 4px #000; }                                       Đổ bóng với màu đen, sang phải 2px, xuống dưới 2px, mờ 4px                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px (hiệu ứng sáng neon)                                   Đây là văn bản mẫu     h2{     text-shadow: 0 0 3px yellow,                   0 0 5px red; }                                       Đổ bóng với màu đỏ, không di chuyển, mờ 3px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px                                   Đây là văn bản mẫu     h2{     text-shadow: 1 1 2px black,                  0 0 5px red,                  0 0 7px blue; }                                       Đổ bóng với màu đen, sang phải 1px, xuống dưới 1px, mờ 2px + đổ bóng với màu                                     đỏ, không di chuyển, mờ 5px + đổ bóng với màu xanh, không di chuyển, mờ 7px                                   Đây là văn                                         bản mẫu     h2{     color: white;     text-shadow: -1px 0 black,                  0 1px black,                  1px 0 black,                 0 -1px black; }                                       Đổ bóng với màu đen, sang trái 1px, lên trên 1px, sang phải 1px, xuống dưới 1px                                     (hiệu ứng viền chữ)                                                                            Đây                                         là văn bản mẫu"
    },
    {
        "title": "box-shadow",
        "content": "box-shadow                                               Thuộc tính box-shadow tạo bóng đổ cho phần tử.                         Code Mô tả Kết quả    div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px; }  Đổ bóng với màu đen, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px 12px lightblue; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, độ rộng 12px        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 10px 10px 5px lightblue inset; }  Đổ bóng với màu xanh, sang phải 10px, xuống dưới 10px, mờ 5px, bên trong        div {     width: 80%;     height: 80px;     margin: auto;     background-color: red;     box-shadow: 5px 5px blue,                 10px 10px red,                 15px 15px green; }  Đổ bóng với màu xanh, sang phải 5px, xuống dưới 5px + đổ bóng với màu đỏ, sang phải                                     10px, xuống dưới 10px + đổ bóng với màu xanh, sang phải 15px, xuống dưới 15px"
    },
    {
        "title": "Hiệu ứng chữ (Text Effect)",
        "content": "Hiệu ứng chữ (Text Effect)                  Quan sát bảng dưới đây để biết thêm chi tiết    thuộc tính giá trị Mã nguồn Mô tả Kết quả   text-overflow clip  p{     white-space: nowrap; /* không ngắt dòng */     width: 200px;     border: 1px solid black;     overflow: hidden;     text-overflow: clip; }                                   Đoạn vượt quá kích thước sẽ bị cắt bớt                                                                    Đây là một đoạn văn dài dùng để test     ellipsis  p{     white-space: nowrap; /* không ngắt dòng */     width: 200px;     border: 1px solid black;     overflow: hidden;     text-overflow: ellipsis; }                                   Đoạn vượt quá kích thước sẽ được thêm dấu 3 chấm                                                                    Đây là một đoạn văn dài dùng để test      word-wrap   break-word   p{     width: 200px;     border: 1px solid black;     word-wrap: break-word; }                                   Tự động ngắt từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test condaylamotturatdaidaihoncachieudaicuathep     word-break   break-all   p{     width: 200px;     border: 1px solid black;     word-break: break-all; }                                   Tự động ngắt từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test dòng này sẽ ngắt tại bất cứ vị trí nào của kí tự     keep-all   p{     width: 200px;     border: 1px solid black;     word-break: keep-all; }                                   Giữ nguyên từ khi vượt quá kích thước                               Đây là một đoạn                                     văn dài dùng để test dòng-này-sẽ-được-ngắt-tại-dấu-gạch-nối     writing-mode   vertical-rl   p{     writing-mode: vertical-rl; }                                   Hiển thị văn bản theo chiều dọc từ phải qua trái                               Đây là một đoạn test     horizontal-bt   p{     writing-mode: horizontal-bt; }                                   Hiển thị văn bản theo chiều ngang (mặc định)                               Đây là một đoạn test"
    },
    {
        "title": "CSS Web Fonts",
        "content": "CSS Web Fonts                                       Trong CSS, bạn có thể sử dụng font chữ từ nhiều nguồn khác nhau như Google Fonts, Adobe Fonts, hoặc                     tải lên trang web của bạn.                   Chú ý: Bạn cần chú ý đến bản quyền khi sử dụng font chữ từ các nguồn khác nhau. Trong hướng                     dẫn này, không hướng dẫn cách sử dụng font chữ từ các nguồn khác nhau. Bạn có thể tìm hiểu thêm tại                     các trang web chính thức của họ.                  Nhúng font của bạn vào trang web với @font-face @font-face {     font-family: myFirstFont;     src: url(sansation_light.woff); }                      Sau đó, bạn có thể sử dụng font chữ này trong trang web của bạn.                  p {     font-family: myFirstFont; } Các thuộc tính dùng trong @font-face    Thuộc tính Giá trị Mô tả   font-family tên phông Định nghĩa tên font sẽ được gọi sau này   src url('font.woff') Đường dẫn đến file font   font-style normal, italic, oblique Chọn kiểu chữ   font-weight normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900 Chọn độ đậm của chữ   font-stretch normal, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded,                                 expanded, extra-expanded, ultra-expanded Chọn độ dài của chữ   unicode-range U+0-10FFFF Chọn phạm vi ký tự"
    },
    {
        "title": "CSS 2D & 3D Transforms",
        "content": "CSS 2D & 3D Transforms                                       Trong CSS, bạn có thể thay đổi hình dạng, kích thước, và vị trí của phần tử bằng cách sử dụng các                     transform.                                       Hãy thử các thuộc tính transform dưới đây                                                      Thuộc tính                                                               Giá trị                                                               Mã nguồn                                                               Mô tả                                                               Kết quả                                   translate() rotate() scale() scaleX() scaleY() skew() skewX() skewY() matrix()   rotateX() rotateY() rotateZ()         div {     transform: translate(0, 0); }                                   Dịch chuyển phần tử x-px sang phải và y-px xuống dưới                                                                    DIV"
    },
    {
        "title": "transition trong CSS",
        "content": "transition trong CSS                                       Trong CSS, bạn có thể thay đổi giá trị của một thuộc tính từ giá trị này sang giá trị khác một cách                     mượt mà với transition.                                       Cú pháp của transition:                  selector {     transition: property duration timing-function delay; }                      Các thuộc tính của transition:                     Thuộc tính Giá trị Mô tả   property all, property-name Chọn thuộc tính sẽ thay đổi, với all là tất cả các thuộc tính(thuộc tính bắt buộc)   duration time Thời gian thay đổi (thuộc tính bắt buộc)   timing-function ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n) Chọn kiểu chuyển động với                                  ease: chậm ở đầu và cuối, nhanh ở giữa linear: chuyển động đều ease-in: chậm ở đầu ease-out: chậm ở cuối ease-in-out: chậm ở đầu và cuối cubic-bezier(n,n,n,n): tự định nghĩa kiểu chuyển động     delay time Thời gian trễ trước khi thay đổi     Chú ý: Bạn có thể thay đổi giá trị của thuộc tính transition bằng cách sử dụng pseudo-class                     hoặc JavaScript.                      Bổ sung: Bạn có thể thêm nhiều transition cho một phần tử bằng cách sử dụng dấu phẩy.                                       Một vài ví dụ với transition                                       thay đổi màu nền của phần tử khi rê chuột vào phần tử                  div {     width: 100px;     height: 100px;     background-color: red;     transition: background-color 0.5s ease; }  div:hover {     background-color: blue; } <div>Hover me</div>                       thay đổi kích thước của phần tử khi rê chuột vào phần tử                  div {     width: 100px;     height: 100px;     background-color: red;     transition: width 0.5s ease, height 0.5s ease; }  div:hover {     width: 200px;     height: 200px; } <div>Hover me</div>"
    },
    {
        "title": "Animation trong CSS",
        "content": "Animation trong CSS                                       Trong CSS, bạn có thể tạo ra các hiệu ứng chuyển động mượt mà với animation.                                       Cú pháp của animation:                  @keyframes animation-name {     from {         property: value;     }     to {         property: value;     } }  Hoặc @keyframes animation-name {     0% {         property: value;     }     ...% {         property: value;     }     100% {         property: value;     } } selector {     animation: animation-name duration timing-function delay iteration-count direction fill-mode play-state; }                      Các thuộc tính của animation:                     Thuộc tính Giá trị Mô tả   animation-name name Tên của animation (thuộc tính bắt buộc)   duration time Thời gian chuyển động (thuộc tính bắt buộc)   timing-function ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n) Chọn kiểu chuyển động với                                  ease: chậm ở đầu và cuối, nhanh ở giữa linear: chuyển động đều ease-in: chậm ở đầu ease-out: chậm ở cuối ease-in-out: chậm ở đầu và cuối cubic-bezier(n,n,n,n): tự định nghĩa kiểu chuyển động     delay time Thời gian trễ trước khi chuyển động   iteration-count number, infinite Số lần lặp lại hoặc infinite   direction normal, reverse, alternate, alternate-reverse Chọn hướng chuyển động                                  normal: chuyển động theo thứ tự reverse: chuyển động ngược lại alternate: chuyển động theo thứ tự và ngược lại alternate-reverse: chuyển động ngược lại và theo thứ tự     fill-mode none, forwards, backwards, both Chọn giá trị của thuộc tính khi chuyển động kết thúc                                  none: không thay đổi forwards: giữ giá trị cuối cùng backwards: giữ giá trị đầu tiên both: giữ cả giá trị đầu tiên và cuối cùng     play-state running, paused Chọn trạng thái chuyển động                                  running: chuyển động paused: tạm dừng chuyển động                           Một vài ví dụ với animation                                       xoay phần tử 360 độ, kết hợp đổi màu, và thay đổi kích thước                  @keyframes rotate {     from {         transform: rotate(0deg);         background-color: red;         width: 100px;         height: 100px;     }     to {         transform: rotate(360deg);         background-color: blue;         width: 200px;         height: 200px;     } }  div {     width: 100px;     height: 100px;     background-color: red;     animation: rotate 2s ease infinite; } <div></div>                       thay đổi màu nền của phần tử từ màu đỏ -> cam -> vàng -> lục -> lam -> tím                  @keyframes changeColor {     0% {         background-color: red;         width: 100px;         height: 100px;     }     20% {         background-color: orange;         width: 120px;         height: 120px;     }     40% {         background-color: yellow;         width: 100px;         height: 100px;     }     60% {         background-color: green;         width: 120px;         height: 120px;     }     80% {         background-color: blue;         width: 100px;         height: 100px;     }     100% {         background-color: purple;         width: 120px;         height: 120px;     } }  div {     width: 100px;     height: 100px;     background-color: red;     animation: changeColor 5s linear infinite alternate; } <div></div>"
    },
    {
        "title": "resize và outline offset trong CSS",
        "content": "resize và outline offset trong CSS                                       Trong CSS, bạn có thể thay đổi kích thước của phần tử với resize và thay đổi vị trí của đường viền                     với outline offset.                                       resize có 4 giá trị:                   none: không thay đổi kích thước both: thay đổi kích thước theo chiều ngang và dọc horizontal: thay đổi kích thước theo chiều ngang vertical: thay đổi kích thước theo chiều dọc                       ví dụ với resize                  div {     width: 100px;     height: 100px;     background-color: red;     margin: 10px; } .div-resize-none {     resize: none;     overflow: auto; } .div-resize-both {     resize: both;     overflow: auto; } .div-resize-horizontal {     resize: horizontal;     overflow: auto; } .div-resize-vertical {     resize: vertical;     overflow: auto; } <div class=\"div-resize-none\"></div> <div class=\"div-resize-both\"></div> <div class=\"div-resize-horizontal\"></div> <div class=\"div-resize-vertical\"></div>                       outline offset                                       outline offset dùng để thay đổi vị trí của đường viền so với phần tử.                                       ví dụ với outline offset                  .div-outline-offset {     width: 100px;     height: 100px;     background-color: red;     margin: 10px;     outline: 2px solid blue;     outline-offset: 10px;     border: 2px solid green; } <div class=\"div-outline-offset\"></div>"
    },
    {
        "title": "Biến trong CSS",
        "content": "Biến trong CSS                                       Trong CSS, bạn có thể sử dụng biến để lưu trữ giá trị và sử dụng lại giá trị đó ở nhiều nơi khác                     nhau.                                       Cú pháp của biến trong CSS:                  :root {     --name: value; }  selector {     property: var(--name); }                      Một vài ví dụ với biến trong CSS                                       sử dụng biến để lưu trữ màu nền và kích thước của phần tử                  :root {     --background-color: red;     --width: 100px;     --height: 100px; }  div {     width: var(--width);     height: var(--height);     background-color: var(--background-color); } <div></div>                            Ghi đè biến trong CSS                                               Trong CSS, bạn có thể ghi đè giá trị của biến bằng cách khai báo biến mới với cùng tên (biến cục                         bộ).                                               Trong ví dụ ở phần trên, nếu khai váo --background-color: green; trong phần tử div, giá trị của biến --background-color sẽ bị ghi đè.                         Kết quả sẽ là màu nền của phần tử sẽ là màu xanh.                                                 Thay đổi giá trị biến trong JavaScript                                               Trong JavaScript, bạn có thể thay đổi giá trị của biến trong CSS bằng cách sử dụng phương thức                         setProperty của đối tượng style.                         Ứng dụng cho việc chuyển đổi giao diện sáng, tối...                                                 Thay đổi biến với Media Queries                                               Trong CSS, bạn có thể thay đổi giá trị của biến với media queries. Điều này giúp bạn tạo ra giao                         diện phản hồi. Phù hợp với thiết bị.                         Chẳng hạn thiết bị nhỏ hơn sẽ khai báo biến với giá trị nhỏ hơn."
    },
    {
        "title": "Ghi đè biến trong CSS",
        "content": "Ghi đè biến trong CSS                                               Trong CSS, bạn có thể ghi đè giá trị của biến bằng cách khai báo biến mới với cùng tên (biến cục                         bộ).                                               Trong ví dụ ở phần trên, nếu khai váo --background-color: green; trong phần tử div, giá trị của biến --background-color sẽ bị ghi đè.                         Kết quả sẽ là màu nền của phần tử sẽ là màu xanh."
    },
    {
        "title": "Thay đổi giá trị biến trong JavaScript",
        "content": "Thay đổi giá trị biến trong JavaScript                                               Trong JavaScript, bạn có thể thay đổi giá trị của biến trong CSS bằng cách sử dụng phương thức                         setProperty của đối tượng style.                         Ứng dụng cho việc chuyển đổi giao diện sáng, tối..."
    },
    {
        "title": "Thay đổi biến với Media Queries",
        "content": "Thay đổi biến với Media Queries                                               Trong CSS, bạn có thể thay đổi giá trị của biến với media queries. Điều này giúp bạn tạo ra giao                         diện phản hồi. Phù hợp với thiết bị.                         Chẳng hạn thiết bị nhỏ hơn sẽ khai báo biến với giá trị nhỏ hơn."
    },
    {
        "title": "Media Queries trong CSS",
        "content": "Media Queries trong CSS                                       Trong CSS, bạn có thể sử dụng media queries để thay đổi giao diện của trang web dựa trên các điều                     kiện như chiều rộng, chiều cao, tỷ lệ màn hình...                                       Cú pháp của media queries:                  @media not|only mediatype and (expressions) {     CSS-Code; }                      Các thuộc tính của media queries:                     Thuộc tính Giá trị Mô tả   not Không áp dụng cho điều kiện Không áp dụng cho điều kiện   only Chỉ áp dụng cho điều kiện Chỉ áp dụng cho điều kiện   mediatype all, print, screen, speech Chọn kiểu thiết bị   expressions width, height, min-width, max-width, min-height, max-height, orientation, aspect-ratio,                                 device-width, device-height, device-aspect-ratio, device-pixel-ratio, resolution, scan,                                 grid Chọn điều kiện                         Một vài ví dụ với media queries                                       ẩn phần tử khi chiều rộng màn hình nhỏ hơn 600px                  @media screen and (max-width: 600px) {     div {         display: none;     } } <div style=\"width: 100px; height:100px; background-color: red;\"></div>                       thay đổi màu nền của phần tử khi chiều rộng màn hình nhỏ hơn 600px                  @media screen and (max-width: 600px) {     div {         background-color: red;     } } <div style=\"width: 100px; height:100px; border: 1px solid green;\"></div>"
    },
    {
        "title": "Flexbox trong CSS",
        "content": "Flexbox trong CSS                                       Trong CSS, bạn có thể sử dụng flexbox để sắp xếp các phần tử con của một phần tử cha một cách linh                     hoạt.                                       Ví dụ về Flexbox                  .container {     display: flex;     background-color: red; } .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   Trong ví dụ trên:  Phần tử cha có class là container sẽ sắp xếp các phần tử con theo chiều                     ngang mà không cần sử dụng float, inline-block, table...                                            flex container                                               Trong CSS, phần tử cha của các phần tử con sử dụng flexbox được gọi là flex container.                                               Các thuộc tính của flex container bao gồm                       display: flex (bắt buộc) flex-direction: row, row-reverse, column, column-reverse flex-wrap: nowrap, wrap, wrap-reverse flex-flow: flex-direction flex-wrap justify-content: flex-start, flex-end, center, space-between, space-around align-items: stretch, flex-start, flex-end, center, baseline align-content: stretch, flex-start, flex-end, center, space-between, space-around   flex-direction                           flex-direction dùng để xác định hướng sắp xếp các phần tử con của flex container.                       row: sắp xếp theo chiều ngang (mặc định) row-reverse: sắp xếp theo chiều ngang ngược lại column: sắp xếp theo chiều dọc column-reverse: sắp xếp theo chiều dọc ngược lại  .container {     display: flex; }  .flex-direction-row {     flex-direction: row;     background-color: red; }  .flex-direction-row-reverse {     flex-direction: row-reverse;     background-color: green; }  .flex-direction-column {     flex-direction: column;     background-color: blue; }  .flex-direction-column-reverse {     flex-direction: column-reverse;     background-color: yellow; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-direction-row\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-row-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   flex-wrap                           flex-wrap dùng để xác định phần tử con của flex container có bị tràn ra ngoài không.                       nowrap: không tràn ra ngoài (mặc định) wrap: tràn ra ngoài wrap-reverse: tràn ra ngoài ngược lại  .container {     display: flex; }  .flex-wrap-nowrap {     flex-wrap: nowrap;     background-color: red; }  .flex-wrap-wrap {     flex-wrap: wrap;     background-color: green; }  .flex-wrap-wrap-reverse {     flex-wrap: wrap-reverse;     background-color: blue; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-wrap-nowrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    flex-flow                           flex-flow là thuộc tính rút gọn của flex-direction và flex-wrap. Nó giúp bạn viết ngắn gọn hơn.                       justify-content                           justify-content dùng để căn chỉnh các phần tử con theo chiều ngang của flex container.                       flex-start: căn chỉnh từ bên trái (mặc định) flex-end: căn chỉnh từ bên phải center: căn chỉnh ở giữa space-between: căn chỉnh đều các phần tử con space-around: căn chỉnh đều các phần tử con với khoảng cách giữa các phần tử con bằng                             nhau(khoảng cách từ lề đến phần tử con = 1/2 khoảng cách các phần tử con với nhau)  .container {     display: flex; }  .justify-content-flex-start {     justify-content: flex-start;     background-color: red; }  .justify-content-flex-end {     justify-content: flex-end;     background-color: green; }  .justify-content-center {     justify-content: center;     background-color: blue; }  .justify-content-space-between {     justify-content: space-between;     background-color: yellow; }  .justify-content-space-around {     justify-content: space-around;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container justify-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của flex container.                       stretch: căn chỉnh kéo dài các mục linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa baseline: căn chỉnh theo đườg cơ sở (đường kéo dài đi qua điểm giữa các phần tử)  .container {     display: flex;     height: 150px; }  .align-items-stretch {     align-items: stretch;     background-color: red; }  .align-items-flex-start {     align-items: flex-start;     background-color: green; }  .align-items-flex-end {     align-items: flex-end;     background-color: blue; }  .align-items-center {     align-items: center;     background-color: yellow; }  .align-items-baseline {     align-items: baseline;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-items-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-baseline\">     <div class=\"item\" style=\"font-size: 30px;\">Item 1</div>     <div class=\"item\" style=\"font-size: 20px;\">Item 2</div>     <div class=\"item\" style=\"font-size: 10px;\">Item 3</div> </div>   align-content                           align-content dùng để căn chỉnh các dòng của flex container theo chiều dọc.                       stretch: căn chỉnh kéo dài các dòng linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa space-between: căn chỉnh đều các dòng space-around: căn chỉnh đều các dòng với khoảng cách giữa các dòng bằng nhau(khoảng cách từ                             lề đến dòng = 1/2 khoảng cách các dòng với nhau)  .container {     display: flex;     flex-wrap: wrap;     height: 150px; }  .align-content-stretch {     align-content: stretch;     background-color: red; }  .align-content-flex-start {     align-content: flex-start;     background-color: green; }  .align-content-flex-end {     align-content: flex-end;     background-color: blue; }  .align-content-center {     align-content: center;     background-color: yellow; }  .align-content-space-between {     align-content: space-between;     background-color: purple; }  .align-content-space-around {     align-content: space-around;     background-color: orange; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-content-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    Mẹo: Căn phần tử con nằm chinh giữa phần tử cha một cách hoàn hảo. chỉnh thuộc tính                         justify-content và align-items thành center.                                                 flex item                                               Trong CSS, phần tử con của flex container sử dụng flexbox được gọi là flex item.                                               Các thuộc tính của flex item bao gồm                       order: xác định thứ tự của phần tử con flex-grow: xác định tỷ lệ mà phần tử con sẽ mở rộng flex-shrink: xác định tỷ lệ phần trăm mà phần tử con sẽ co lại flex-basis: xác định kích thước cơ bản của phần tử con flex: rút gọn của flex-grow, flex-shrink, flex-basis align-self: xác định căn chỉnh của phần tử con   order                           order dùng để xác định thứ tự của phần tử con trong flex container.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }   <div class=\"container\">     <div class=\"item\" style=\"order: 3;\">Item 1</div>     <div class=\"item\" style=\"order: 2;\">Item 2</div>     <div class=\"item\" style=\"order: 1;\">Item 3</div> </div>   flex-grow                           flex-grow dùng để xác định tỷ lệ mà phần tử con sẽ mở rộng.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container\">     <div class=\"item\" style=\"flex-grow: 1;\">Item 1</div>     <div class=\"item\" style=\"flex-grow: 2;\">Item 2</div>     <div class=\"item\" style=\"flex-grow: 3;\">Item 3</div> </div>   Mẹo: Phần tử con sử dụng flex-grow sẽ mở rộng theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         mở rộng gấp đôi so với phần tử con thứ 1.                       Lưu ý: chúng ta có thể đặt flex-grow là 1 và các phần tử còn lại là mặc định để cho phần tử đó lấp đầy phần còn lại của flex container.                       flex-shrink                           flex-shrink dùng để xác định tỷ lệ mà phần tử con sẽ co lại.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">1</div>     <div class=\"item\" style=\"flex-shrink: 2;\">2</div>     <div class=\"item\">3</div>     <div class=\"item\">4</div>     <div class=\"item\">5</div>     <div class=\"item\">6</div>     <div class=\"item\">7</div>     <div class=\"item\">8</div>     <div class=\"item\">9</div> </div>   Mẹo: Phần tử con sử dụng flex-shrink sẽ co lại theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         co lại gấp đôi so với phần tử con thứ 1.                       flex-basis                           flex-basis dùng để xác định kích thước cơ bản của phần tử con.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">Item 1</div>     <div class=\"item\" style=\"flex-basis: 200px;\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div> </div>   flex                           flex là thuộc tính rút gọn của flex-grow, flex-shrink, flex-basis. Nó giúp bạn viết ngắn gọn hơn.                       align-self                           align-self dùng để căn chỉnh phần tử con trong flex container.                      .container {     display: flex;     background-color: red;     align-items: stretch;     height: 150px; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\" style=\"align-self: flex-start;\">Item 1</div>     <div class=\"item\" style=\"align-self: flex-end;\">Item 2</div>     <div class=\"item\" style=\"align-self: center;\">Item 3</div>     <div class=\"item\" style=\"align-self: baseline;\">Item 4</div>     <div class=\"item\" style=\"align-self: stretch;\">Item 5</div> </div>"
    },
    {
        "title": "flex container",
        "content": "flex container                                               Trong CSS, phần tử cha của các phần tử con sử dụng flexbox được gọi là flex container.                                               Các thuộc tính của flex container bao gồm                       display: flex (bắt buộc) flex-direction: row, row-reverse, column, column-reverse flex-wrap: nowrap, wrap, wrap-reverse flex-flow: flex-direction flex-wrap justify-content: flex-start, flex-end, center, space-between, space-around align-items: stretch, flex-start, flex-end, center, baseline align-content: stretch, flex-start, flex-end, center, space-between, space-around   flex-direction                           flex-direction dùng để xác định hướng sắp xếp các phần tử con của flex container.                       row: sắp xếp theo chiều ngang (mặc định) row-reverse: sắp xếp theo chiều ngang ngược lại column: sắp xếp theo chiều dọc column-reverse: sắp xếp theo chiều dọc ngược lại  .container {     display: flex; }  .flex-direction-row {     flex-direction: row;     background-color: red; }  .flex-direction-row-reverse {     flex-direction: row-reverse;     background-color: green; }  .flex-direction-column {     flex-direction: column;     background-color: blue; }  .flex-direction-column-reverse {     flex-direction: column-reverse;     background-color: yellow; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-direction-row\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-row-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container flex-direction-column-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   flex-wrap                           flex-wrap dùng để xác định phần tử con của flex container có bị tràn ra ngoài không.                       nowrap: không tràn ra ngoài (mặc định) wrap: tràn ra ngoài wrap-reverse: tràn ra ngoài ngược lại  .container {     display: flex; }  .flex-wrap-nowrap {     flex-wrap: nowrap;     background-color: red; }  .flex-wrap-wrap {     flex-wrap: wrap;     background-color: green; }  .flex-wrap-wrap-reverse {     flex-wrap: wrap-reverse;     background-color: blue; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container flex-wrap-nowrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container flex-wrap-wrap-reverse\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    flex-flow                           flex-flow là thuộc tính rút gọn của flex-direction và flex-wrap. Nó giúp bạn viết ngắn gọn hơn.                       justify-content                           justify-content dùng để căn chỉnh các phần tử con theo chiều ngang của flex container.                       flex-start: căn chỉnh từ bên trái (mặc định) flex-end: căn chỉnh từ bên phải center: căn chỉnh ở giữa space-between: căn chỉnh đều các phần tử con space-around: căn chỉnh đều các phần tử con với khoảng cách giữa các phần tử con bằng                             nhau(khoảng cách từ lề đến phần tử con = 1/2 khoảng cách các phần tử con với nhau)  .container {     display: flex; }  .justify-content-flex-start {     justify-content: flex-start;     background-color: red; }  .justify-content-flex-end {     justify-content: flex-end;     background-color: green; }  .justify-content-center {     justify-content: center;     background-color: blue; }  .justify-content-space-between {     justify-content: space-between;     background-color: yellow; }  .justify-content-space-around {     justify-content: space-around;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container justify-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container justify-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của flex container.                       stretch: căn chỉnh kéo dài các mục linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa baseline: căn chỉnh theo đườg cơ sở (đường kéo dài đi qua điểm giữa các phần tử)  .container {     display: flex;     height: 150px; }  .align-items-stretch {     align-items: stretch;     background-color: red; }  .align-items-flex-start {     align-items: flex-start;     background-color: green; }  .align-items-flex-end {     align-items: flex-end;     background-color: blue; }  .align-items-center {     align-items: center;     background-color: yellow; }  .align-items-baseline {     align-items: baseline;     background-color: purple; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-items-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div> </div>  <div class=\"container align-items-baseline\">     <div class=\"item\" style=\"font-size: 30px;\">Item 1</div>     <div class=\"item\" style=\"font-size: 20px;\">Item 2</div>     <div class=\"item\" style=\"font-size: 10px;\">Item 3</div> </div>   align-content                           align-content dùng để căn chỉnh các dòng của flex container theo chiều dọc.                       stretch: căn chỉnh kéo dài các dòng linh hoạt cho vừa vùng chứa (mặc định) flex-start: căn chỉnh từ trên xuống flex-end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa space-between: căn chỉnh đều các dòng space-around: căn chỉnh đều các dòng với khoảng cách giữa các dòng bằng nhau(khoảng cách từ                             lề đến dòng = 1/2 khoảng cách các dòng với nhau)  .container {     display: flex;     flex-wrap: wrap;     height: 150px; }  .align-content-stretch {     align-content: stretch;     background-color: red; }  .align-content-flex-start {     align-content: flex-start;     background-color: green; }  .align-content-flex-end {     align-content: flex-end;     background-color: blue; }  .align-content-center {     align-content: center;     background-color: yellow; }  .align-content-space-between {     align-content: space-between;     background-color: purple; }  .align-content-space-around {     align-content: space-around;     background-color: orange; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     width: 100px;     text-align: center; }  <div class=\"container align-content-stretch\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-start\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-flex-end\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-center\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-around\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>  <div class=\"container align-content-space-between\">     <div class=\"item\">Item 1</div>     <div class=\"item\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div>     <div class=\"item\">Item 9</div>     <div class=\"item\">Item 10</div>     <div class=\"item\">Item 11</div>     <div class=\"item\">Item 12</div> </div>    Mẹo: Căn phần tử con nằm chinh giữa phần tử cha một cách hoàn hảo. chỉnh thuộc tính                         justify-content và align-items thành center."
    },
    {
        "title": "flex item",
        "content": "flex item                                               Trong CSS, phần tử con của flex container sử dụng flexbox được gọi là flex item.                                               Các thuộc tính của flex item bao gồm                       order: xác định thứ tự của phần tử con flex-grow: xác định tỷ lệ mà phần tử con sẽ mở rộng flex-shrink: xác định tỷ lệ phần trăm mà phần tử con sẽ co lại flex-basis: xác định kích thước cơ bản của phần tử con flex: rút gọn của flex-grow, flex-shrink, flex-basis align-self: xác định căn chỉnh của phần tử con   order                           order dùng để xác định thứ tự của phần tử con trong flex container.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }   <div class=\"container\">     <div class=\"item\" style=\"order: 3;\">Item 1</div>     <div class=\"item\" style=\"order: 2;\">Item 2</div>     <div class=\"item\" style=\"order: 1;\">Item 3</div> </div>   flex-grow                           flex-grow dùng để xác định tỷ lệ mà phần tử con sẽ mở rộng.                      .container {     display: flex;     background-color: red; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px; }  <div class=\"container\">     <div class=\"item\" style=\"flex-grow: 1;\">Item 1</div>     <div class=\"item\" style=\"flex-grow: 2;\">Item 2</div>     <div class=\"item\" style=\"flex-grow: 3;\">Item 3</div> </div>   Mẹo: Phần tử con sử dụng flex-grow sẽ mở rộng theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         mở rộng gấp đôi so với phần tử con thứ 1.                       Lưu ý: chúng ta có thể đặt flex-grow là 1 và các phần tử còn lại là mặc định để cho phần tử đó lấp đầy phần còn lại của flex container.                       flex-shrink                           flex-shrink dùng để xác định tỷ lệ mà phần tử con sẽ co lại.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">1</div>     <div class=\"item\" style=\"flex-shrink: 2;\">2</div>     <div class=\"item\">3</div>     <div class=\"item\">4</div>     <div class=\"item\">5</div>     <div class=\"item\">6</div>     <div class=\"item\">7</div>     <div class=\"item\">8</div>     <div class=\"item\">9</div> </div>   Mẹo: Phần tử con sử dụng flex-shrink sẽ co lại theo tỷ lệ. Ví dụ: Phần tử con thứ 2 sẽ                         co lại gấp đôi so với phần tử con thứ 1.                       flex-basis                           flex-basis dùng để xác định kích thước cơ bản của phần tử con.                      .container {     display: flex;     background-color: red;     align-items: stretch; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\">Item 1</div>     <div class=\"item\" style=\"flex-basis: 200px;\">Item 2</div>     <div class=\"item\">Item 3</div>     <div class=\"item\">Item 4</div>     <div class=\"item\">Item 5</div>     <div class=\"item\">Item 6</div>     <div class=\"item\">Item 7</div>     <div class=\"item\">Item 8</div> </div>   flex                           flex là thuộc tính rút gọn của flex-grow, flex-shrink, flex-basis. Nó giúp bạn viết ngắn gọn hơn.                       align-self                           align-self dùng để căn chỉnh phần tử con trong flex container.                      .container {     display: flex;     background-color: red;     align-items: stretch;     height: 150px; }  .container > .item {     padding: 10px;     margin: 10px;     background-color: white;     font-size: 20px;     width: 100px; }  <div class=\"container\">     <div class=\"item\" style=\"align-self: flex-start;\">Item 1</div>     <div class=\"item\" style=\"align-self: flex-end;\">Item 2</div>     <div class=\"item\" style=\"align-self: center;\">Item 3</div>     <div class=\"item\" style=\"align-self: baseline;\">Item 4</div>     <div class=\"item\" style=\"align-self: stretch;\">Item 5</div> </div>"
    },
    {
        "title": "Grid Layout",
        "content": "Grid Layout                                       Grid layout là hệ thống bố cục dạng lưới, giúp chúng ta tạo ra các layout phức tạp một cách dễ dàng.                                       Ví dụ về grid layout                  .container {     display: grid;     grid-template-columns: 100px 100px 100px;     grid-template-rows: 100px 100px 100px;     gap: 10px; }  .item {     background-color: red;     padding: 10px;     text-align: center; }  <div class=\"container\">     <div class=\"item\">1</div>     <div class=\"item\">2</div>     <div class=\"item\">3</div>     <div class=\"item\">4</div>     <div class=\"item\">5</div>     <div class=\"item\">6</div>     <div class=\"item\">7</div>     <div class=\"item\">8</div>     <div class=\"item\">9</div> </div>                            grid container                                               Trong CSS, phần tử chứa grid layout được gọi là grid container.                                               Các thuộc tính của grid container bao gồm                       grid-template-columns: xác định số cột của grid layout grid-template-rows: xác định số dòng của grid layout gap: xác định khoảng cách giữa các cột và dòng justify-items: xác định căn chỉnh theo chiều ngang của các phần tử con align-items: xác định căn chỉnh theo chiều dọc của các phần tử con justify-content: xác định căn chỉnh theo chiều ngang của grid container align-content: xác định căn chỉnh theo chiều dọc của grid container   grid-template-columns  Cú pháp:                         grid-template-columns: c1, c2, c3 ...;   Trong đó: c1, c2, c3 là kích thước của cột. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu cột tùy ý.                       Lưu ý: nếu số item lớn hơn số cột, item sẽ tự động chuyển xuống dòng mới.                       grid-template-rows  Cú pháp:                         grid-template-rows: r1, r2, r3 ...;   Trong đó: r1, r2, r3 là kích thước của dòng. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu dòng tùy ý.                       gap  Cú pháp:                         gap: x;   Trong đó: x là khoảng cách giữa các cột và dòng. Có thể sử dụng các đơn vị đo lường như px, %, em, rem.                       justify-items                           justify-items dùng để căn chỉnh các phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái (mặc định) end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống (mặc định) end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt                             grid item                                               Trong CSS, phần tử con của grid container được gọi là grid item.                                               Các thuộc tính của grid item bao gồm                       grid-column-start: xác định cột bắt đầu của phần tử con grid-column-end: xác định cột kết thúc của phần tử con grid-row-start: xác định dòng bắt đầu của phần tử con grid-row-end: xác định dòng kết thúc của phần tử con grid-column: rút gọn của grid-column-start và grid-column-end grid-row: rút gọn của grid-row-start và grid-row-end grid-area: rút gọn của grid-column-start, grid-column-end, grid-row-start và grid-row-end justify-self: xác định căn chỉnh theo chiều ngang của phần tử con align-self: xác định căn chỉnh theo chiều dọc của phần tử con   grid-column-start  Cú pháp:                         grid-column-start: x;   Trong đó: x là cột bắt đầu của phần tử con.                       grid-column-end  Cú pháp:                         grid-column-end: x;   Trong đó: x là cột kết thúc của phần tử con.                       grid-row-start  Cú pháp:                         grid-row-start: x;   Trong đó: x là dòng bắt đầu của phần tử con.                       grid-row-end  Cú pháp:                         grid-row-end: x;   Trong đó: x là dòng kết thúc của phần tử con.                       grid-column  Cú pháp:                         grid-column: x / y;   Trong đó: x là cột bắt đầu và y là cột kết thúc của phần tử con.                       grid-row  Cú pháp:                         grid-row: x / y;   Trong đó: x là dòng bắt đầu và y là dòng kết thúc của phần tử con.                       grid-area  Cú pháp:                         grid-area: x / y / z / t;   Trong đó: x là cột bắt đầu, y là dòng bắt đầu, z là cột kết thúc và t là dòng kết thúc của phần tử con.                       justify-self                           justify-self dùng để căn chỉnh phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-self                           align-self dùng để căn chỉnh phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt"
    },
    {
        "title": "grid container",
        "content": "grid container                                               Trong CSS, phần tử chứa grid layout được gọi là grid container.                                               Các thuộc tính của grid container bao gồm                       grid-template-columns: xác định số cột của grid layout grid-template-rows: xác định số dòng của grid layout gap: xác định khoảng cách giữa các cột và dòng justify-items: xác định căn chỉnh theo chiều ngang của các phần tử con align-items: xác định căn chỉnh theo chiều dọc của các phần tử con justify-content: xác định căn chỉnh theo chiều ngang của grid container align-content: xác định căn chỉnh theo chiều dọc của grid container   grid-template-columns  Cú pháp:                         grid-template-columns: c1, c2, c3 ...;   Trong đó: c1, c2, c3 là kích thước của cột. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu cột tùy ý.                       Lưu ý: nếu số item lớn hơn số cột, item sẽ tự động chuyển xuống dòng mới.                       grid-template-rows  Cú pháp:                         grid-template-rows: r1, r2, r3 ...;   Trong đó: r1, r2, r3 là kích thước của dòng. Có thể sử dụng các đơn vị đo lường như px, %, fr, auto. Có thể thêm bao nhiêu dòng tùy ý.                       gap  Cú pháp:                         gap: x;   Trong đó: x là khoảng cách giữa các cột và dòng. Có thể sử dụng các đơn vị đo lường như px, %, em, rem.                       justify-items                           justify-items dùng để căn chỉnh các phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái (mặc định) end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-items                           align-items dùng để căn chỉnh các phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống (mặc định) end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt"
    },
    {
        "title": "grid item",
        "content": "grid item                                               Trong CSS, phần tử con của grid container được gọi là grid item.                                               Các thuộc tính của grid item bao gồm                       grid-column-start: xác định cột bắt đầu của phần tử con grid-column-end: xác định cột kết thúc của phần tử con grid-row-start: xác định dòng bắt đầu của phần tử con grid-row-end: xác định dòng kết thúc của phần tử con grid-column: rút gọn của grid-column-start và grid-column-end grid-row: rút gọn của grid-row-start và grid-row-end grid-area: rút gọn của grid-column-start, grid-column-end, grid-row-start và grid-row-end justify-self: xác định căn chỉnh theo chiều ngang của phần tử con align-self: xác định căn chỉnh theo chiều dọc của phần tử con   grid-column-start  Cú pháp:                         grid-column-start: x;   Trong đó: x là cột bắt đầu của phần tử con.                       grid-column-end  Cú pháp:                         grid-column-end: x;   Trong đó: x là cột kết thúc của phần tử con.                       grid-row-start  Cú pháp:                         grid-row-start: x;   Trong đó: x là dòng bắt đầu của phần tử con.                       grid-row-end  Cú pháp:                         grid-row-end: x;   Trong đó: x là dòng kết thúc của phần tử con.                       grid-column  Cú pháp:                         grid-column: x / y;   Trong đó: x là cột bắt đầu và y là cột kết thúc của phần tử con.                       grid-row  Cú pháp:                         grid-row: x / y;   Trong đó: x là dòng bắt đầu và y là dòng kết thúc của phần tử con.                       grid-area  Cú pháp:                         grid-area: x / y / z / t;   Trong đó: x là cột bắt đầu, y là dòng bắt đầu, z là cột kết thúc và t là dòng kết thúc của phần tử con.                       justify-self                           justify-self dùng để căn chỉnh phần tử con theo chiều ngang của grid container.                       start: căn chỉnh từ bên trái end: căn chỉnh từ bên phải center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt   align-self                           align-self dùng để căn chỉnh phần tử con theo chiều dọc của grid container.                       start: căn chỉnh từ trên xuống end: căn chỉnh từ dưới lên center: căn chỉnh ở giữa stretch: căn chỉnh linh hoạt"
    },
    {
        "title": "Responsive Web Design",
        "content": "Responsive Web Design                               Responsive Web Design (RWD) là một phương pháp thiết kế web giúp trang web hiển thị đẹp trên mọi thiết bị.                               Responsive Web Design sử dụng các kỹ thuật CSS để thay đổi giao diện trang web tùy theo kích thước màn hình của thiết bị."
    },
    {
        "title": "viewport",
        "content": "viewport                                        Viewport là khu vực hiển thị nội dung trên trình duyệt.                                       Bạn nên thêm thẻ meta viewport vào trang web để trình duyệt hiển thị đúng kích thước trên mọi thiết bị.  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">  Những quy tắc trong việc đặt kích thước nội dung trong khung nhìn   Không dùng các phần tử có kích thước cố định lớn  Nếu hình ảnh có kích thước lớn hơn chiều rộng thiết bị                         người dùng có thể phải cuộn ngang để xem hết hình ảnh. Đây là một trải nghiệm không tốt.                       Hạn chế dùng kích thước tuyệt đối Kích thước tuyệt đối không thay đổi tùy theo kích thước màn hình. Nếu bạn                         dùng kích thước tuyệt đối, trang web sẽ không hiển thị đẹp trên mọi thiết bị.                       Sử dụng đơn vị đo linh hoạt Sử dụng đơn vị đo linh hoạt như %, em, rem thay vì px.                                              Grid - View                                       Nhiều trang web dựa trên chế độ xem dạng lưới, có nghĩa là trang được chia thành các cột.                                       Sử dụng chế độ xem dạng lưới rất hữu ích khi thiết kế trang web. Nó làm cho việc đặt các phần tử trên trang trở nên dễ dàng hơn.                                       Chế độ xem lưới đáp ứng thường có 12 cột và có tổng chiều rộng là 100%, đồng thời sẽ thu nhỏ và mở rộng khi bạn thay đổi kích thước cửa sổ trình duyệt.                                       Ta có thể tính toán mỗi cột sẽ có chiều rộng bằng 100% / 12 = 8.33%.                                       Từ đó ta có thể xây dựng một thư viện grid view như sau:                  * {     box-sizing: border-box; }  .row::after {     content: \"\";     clear: both;     display: table; } [class*=\"col-\"] {     float: left;     padding: 15px;     border: 1px solid #d9d9d9; } .col-1 {width: 8.33%;} .col-2 {width: 16.66%;} .col-3 {width: 25%;} .col-4 {width: 33.33%;} .col-5 {width: 41.66%;} .col-6 {width: 50%;} .col-7 {width: 58.33%;} .col-8 {width: 66.66%;} .col-9 {width: 75%;} .col-10 {width: 83.33%;} .col-11 {width: 91.66%;} .col-12 {width: 100%;}                       Ví dụ tạo một layout đơn giản                   <header class=\"row\">     <div class=\"col-12\">         <h1>Header</h1>     </div> </header>  <div class=\"row\">     <div class=\"col-3\">         <nav>             <ul>                 <li><a href=\"#\">Home</a></li>                 <li><a href=\"#\">About</a></li>                 <li><a href=\"#\">Contact</a></li>             </ul>         </nav>     </div>     <div class=\"col-9\">         <article>             <h1>Article</h1>             <p>Content</p>         </article>     </div> </div>  <footer class=\"row\">     <div class=\"col-12\">         <p>Footer</p>     </div> </footer>                         Responsive - media query                                       Media query là một công cụ mạnh mẽ giúp thiết kế trang web đáp ứng trên mọi thiết bị.                                            Add a Breakpoint                                               Để thêm một điểm ngắt, bạn cần sử dụng từ khóa @media và max-width hoặc min-width.                                               Ví dụ ta lấy điện thoại có kích thước chiều rộng tối đa là 768px                      @media only screen and (max-width: 768px) {     /* CSS cho màn hình điện thoại */     [class*=\"col-\"] {         width: 100%;     } }                          Trong ví dụ trên, nếu chiều rộng của màn hình nhỏ hơn hoặc bằng 768px, tất cả các cột sẽ có chiều rộng là 100%.                                                 Luôn đặt thiết kế cho thiết bị nhỏ trước                                               Khi thiết kế trang web, bạn nên bắt đầu từ thiết bị nhỏ trước, sau đó mới đến thiết bị lớn.                         Nguyên nhân là vì thiết bị nhỏ thường có các hạn chế về kích thước và hiển thị. Đôi khi một số phần tử không cần thiết trên thiết bị lớn có thể ẩn đi trên thiết bị nhỏ.                                                Thay vì đặt max-width để định dạng cho thiết bị di động bạn có thể thêm min-width để định dạng cho thiết bị lớn.                         Và bỏ qua max-width.                                               Như vậy chúng ta sẽ có một thư viện mới như sau:                      /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%; }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ngoài ra chúng ta cũng có thể thiết kế riêng cho tablet với min-width = 600px                  /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%;     height: 80px;     background-color: red;     border: 2px solid black;     float: left; } /*Cho máy tính bảng*/ @media only screen and (min-width: 600px) {     .col-s-1 {width: 8.33%;}     .col-s-2 {width: 16.66%;}     .col-s-3 {width: 25%;}     .col-s-4 {width: 33.33%;}     .col-s-5 {width: 41.66%;}     .col-s-6 {width: 50%;}     .col-s-7 {width: 58.33%;}     .col-s-8 {width: 66.66%;}     .col-s-9 {width: 75%;}     .col-s-10 {width: 83.33%;}     .col-s-11 {width: 91.66%;}     .col-s-12 {width: 100%;} }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ta có một ví dụ sau                  <div class=\"row\">     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div> </div>                       Trong ví dụ trên, màn hình tablet sẽ hiển thị 2 cột, màn hình lớn sẽ hiển thị 4 cột, màn hình điện thoại sẽ hiển thị 1 cột.                                             Danh sách các điểm ngắt trong năm 2024                                               Dùng min-width                                                    576px: Màn hình điện thoại                                                       768px: Màn hình tablet                                                       992px: Màn hình máy tính                                                       1200px: Màn hình lớn (TV, máy chiếu...)                                                    Dùng max-width                                                    575.98px: Màn hình điện thoại                                                       767.98px: Màn hình tablet                                                       991.98px: Màn hình máy tính                                                       1199.98px: Màn hình lớn (TV, máy chiếu...)                                                    Lưu ý: Các điểm ngắt trên chỉ là ước lượng, bạn có thể thay đổi tùy theo thiết kế của mình.                         Đồng thời nên đồng nhất các điểm ngắt trong dự án của mình để tránh xung đột.                                              RWD - Hình ảnh                                       Khi thiết kế trang web đáp ứng, bạn cần chú ý đến hình ảnh.                                            Các thuộc tính có sẵn của hình ảnh trong CSS                                               width                                               Thuộc tính width giúp bạn thiết lập chiều rộng của hình ảnh.                         khi thiết lập kích thước chiều rộng cố định, chiều cao là auto -> hình ảnh sẽ tự động thay đổi chiều cao tương ứng.                                               max-width                                               Khi max-width được set là 100%, hình ảnh sẽ giảm kích thước nếu cần nhưng không vượt quá kích thước gốc.                                                 Background image                                               Khi sử dụng background-image, bạn cần chú ý đến thuộc tính background-size.                                               Thuộc tính này đã được học ở bài trước, bạn có thể xem lại tại đây                             Hình ảnh khác nhau cho mỗi thiết bị                                               Bạn có thể sử dụng thẻ <picture> để hiển thị hình ảnh khác nhau cho mỗi thiết bị.                                               Thẻ <picture> đã được học ở bài trước, bạn có thể xem lại tại đây                           Hoặc có thể dùng media query để thay đổi background-image cho mỗi thiết bị.                                              RWD - FrameWork                                       Nếu bạn không muốn tự viết CSS cho trang web của mình, bạn có thể sử dụng các framework CSS đã có sẵn.                                       Một số framework phổ biến như: Bootstrap, Foundation, Bulma, Materialize...                                       Framework CSS giúp bạn xây dựng trang web nhanh chóng, dễ dàng và đẹp mắt.                                       Tuy nhiên, bạn cần chú ý đến việc tùy chỉnh giao diện cho phù hợp với dự án của mình."
    },
    {
        "title": "viewport",
        "content": "viewport                                        Viewport là khu vực hiển thị nội dung trên trình duyệt.                                       Bạn nên thêm thẻ meta viewport vào trang web để trình duyệt hiển thị đúng kích thước trên mọi thiết bị.  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">  Những quy tắc trong việc đặt kích thước nội dung trong khung nhìn   Không dùng các phần tử có kích thước cố định lớn  Nếu hình ảnh có kích thước lớn hơn chiều rộng thiết bị                         người dùng có thể phải cuộn ngang để xem hết hình ảnh. Đây là một trải nghiệm không tốt.                       Hạn chế dùng kích thước tuyệt đối Kích thước tuyệt đối không thay đổi tùy theo kích thước màn hình. Nếu bạn                         dùng kích thước tuyệt đối, trang web sẽ không hiển thị đẹp trên mọi thiết bị.                       Sử dụng đơn vị đo linh hoạt Sử dụng đơn vị đo linh hoạt như %, em, rem thay vì px."
    },
    {
        "title": "Grid - View",
        "content": "Grid - View                                       Nhiều trang web dựa trên chế độ xem dạng lưới, có nghĩa là trang được chia thành các cột.                                       Sử dụng chế độ xem dạng lưới rất hữu ích khi thiết kế trang web. Nó làm cho việc đặt các phần tử trên trang trở nên dễ dàng hơn.                                       Chế độ xem lưới đáp ứng thường có 12 cột và có tổng chiều rộng là 100%, đồng thời sẽ thu nhỏ và mở rộng khi bạn thay đổi kích thước cửa sổ trình duyệt.                                       Ta có thể tính toán mỗi cột sẽ có chiều rộng bằng 100% / 12 = 8.33%.                                       Từ đó ta có thể xây dựng một thư viện grid view như sau:                  * {     box-sizing: border-box; }  .row::after {     content: \"\";     clear: both;     display: table; } [class*=\"col-\"] {     float: left;     padding: 15px;     border: 1px solid #d9d9d9; } .col-1 {width: 8.33%;} .col-2 {width: 16.66%;} .col-3 {width: 25%;} .col-4 {width: 33.33%;} .col-5 {width: 41.66%;} .col-6 {width: 50%;} .col-7 {width: 58.33%;} .col-8 {width: 66.66%;} .col-9 {width: 75%;} .col-10 {width: 83.33%;} .col-11 {width: 91.66%;} .col-12 {width: 100%;}                       Ví dụ tạo một layout đơn giản                   <header class=\"row\">     <div class=\"col-12\">         <h1>Header</h1>     </div> </header>  <div class=\"row\">     <div class=\"col-3\">         <nav>             <ul>                 <li><a href=\"#\">Home</a></li>                 <li><a href=\"#\">About</a></li>                 <li><a href=\"#\">Contact</a></li>             </ul>         </nav>     </div>     <div class=\"col-9\">         <article>             <h1>Article</h1>             <p>Content</p>         </article>     </div> </div>  <footer class=\"row\">     <div class=\"col-12\">         <p>Footer</p>     </div> </footer>"
    },
    {
        "title": "Responsive - media query",
        "content": "Responsive - media query                                       Media query là một công cụ mạnh mẽ giúp thiết kế trang web đáp ứng trên mọi thiết bị.                                            Add a Breakpoint                                               Để thêm một điểm ngắt, bạn cần sử dụng từ khóa @media và max-width hoặc min-width.                                               Ví dụ ta lấy điện thoại có kích thước chiều rộng tối đa là 768px                      @media only screen and (max-width: 768px) {     /* CSS cho màn hình điện thoại */     [class*=\"col-\"] {         width: 100%;     } }                          Trong ví dụ trên, nếu chiều rộng của màn hình nhỏ hơn hoặc bằng 768px, tất cả các cột sẽ có chiều rộng là 100%.                                                 Luôn đặt thiết kế cho thiết bị nhỏ trước                                               Khi thiết kế trang web, bạn nên bắt đầu từ thiết bị nhỏ trước, sau đó mới đến thiết bị lớn.                         Nguyên nhân là vì thiết bị nhỏ thường có các hạn chế về kích thước và hiển thị. Đôi khi một số phần tử không cần thiết trên thiết bị lớn có thể ẩn đi trên thiết bị nhỏ.                                                Thay vì đặt max-width để định dạng cho thiết bị di động bạn có thể thêm min-width để định dạng cho thiết bị lớn.                         Và bỏ qua max-width.                                               Như vậy chúng ta sẽ có một thư viện mới như sau:                      /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%; }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ngoài ra chúng ta cũng có thể thiết kế riêng cho tablet với min-width = 600px                  /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%;     height: 80px;     background-color: red;     border: 2px solid black;     float: left; } /*Cho máy tính bảng*/ @media only screen and (min-width: 600px) {     .col-s-1 {width: 8.33%;}     .col-s-2 {width: 16.66%;}     .col-s-3 {width: 25%;}     .col-s-4 {width: 33.33%;}     .col-s-5 {width: 41.66%;}     .col-s-6 {width: 50%;}     .col-s-7 {width: 58.33%;}     .col-s-8 {width: 66.66%;}     .col-s-9 {width: 75%;}     .col-s-10 {width: 83.33%;}     .col-s-11 {width: 91.66%;}     .col-s-12 {width: 100%;} }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ta có một ví dụ sau                  <div class=\"row\">     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div> </div>                       Trong ví dụ trên, màn hình tablet sẽ hiển thị 2 cột, màn hình lớn sẽ hiển thị 4 cột, màn hình điện thoại sẽ hiển thị 1 cột.                                             Danh sách các điểm ngắt trong năm 2024                                               Dùng min-width                                                    576px: Màn hình điện thoại                                                       768px: Màn hình tablet                                                       992px: Màn hình máy tính                                                       1200px: Màn hình lớn (TV, máy chiếu...)                                                    Dùng max-width                                                    575.98px: Màn hình điện thoại                                                       767.98px: Màn hình tablet                                                       991.98px: Màn hình máy tính                                                       1199.98px: Màn hình lớn (TV, máy chiếu...)                                                    Lưu ý: Các điểm ngắt trên chỉ là ước lượng, bạn có thể thay đổi tùy theo thiết kế của mình.                         Đồng thời nên đồng nhất các điểm ngắt trong dự án của mình để tránh xung đột."
    },
    {
        "title": "Add a Breakpoint",
        "content": "Add a Breakpoint                                               Để thêm một điểm ngắt, bạn cần sử dụng từ khóa @media và max-width hoặc min-width.                                               Ví dụ ta lấy điện thoại có kích thước chiều rộng tối đa là 768px                      @media only screen and (max-width: 768px) {     /* CSS cho màn hình điện thoại */     [class*=\"col-\"] {         width: 100%;     } }                          Trong ví dụ trên, nếu chiều rộng của màn hình nhỏ hơn hoặc bằng 768px, tất cả các cột sẽ có chiều rộng là 100%."
    },
    {
        "title": "Luôn đặt thiết kế cho thiết bị nhỏ trước",
        "content": "Luôn đặt thiết kế cho thiết bị nhỏ trước                                               Khi thiết kế trang web, bạn nên bắt đầu từ thiết bị nhỏ trước, sau đó mới đến thiết bị lớn.                         Nguyên nhân là vì thiết bị nhỏ thường có các hạn chế về kích thước và hiển thị. Đôi khi một số phần tử không cần thiết trên thiết bị lớn có thể ẩn đi trên thiết bị nhỏ.                                                Thay vì đặt max-width để định dạng cho thiết bị di động bạn có thể thêm min-width để định dạng cho thiết bị lớn.                         Và bỏ qua max-width.                                               Như vậy chúng ta sẽ có một thư viện mới như sau:                      /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%; }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ngoài ra chúng ta cũng có thể thiết kế riêng cho tablet với min-width = 600px                  /*Cho thiết bị di động*/ [class*=\"col-\"] {     width: 100%;     height: 80px;     background-color: red;     border: 2px solid black;     float: left; } /*Cho máy tính bảng*/ @media only screen and (min-width: 600px) {     .col-s-1 {width: 8.33%;}     .col-s-2 {width: 16.66%;}     .col-s-3 {width: 25%;}     .col-s-4 {width: 33.33%;}     .col-s-5 {width: 41.66%;}     .col-s-6 {width: 50%;}     .col-s-7 {width: 58.33%;}     .col-s-8 {width: 66.66%;}     .col-s-9 {width: 75%;}     .col-s-10 {width: 83.33%;}     .col-s-11 {width: 91.66%;}     .col-s-12 {width: 100%;} }  /*Cho thiết bị lớn*/ @media only screen and (min-width: 768px) {     .col-1 {width: 8.33%;}     .col-2 {width: 16.66%;}     .col-3 {width: 25%;}     .col-4 {width: 33.33%;}     .col-5 {width: 41.66%;}     .col-6 {width: 50%;}     .col-7 {width: 58.33%;}     .col-8 {width: 66.66%;}     .col-9 {width: 75%;}     .col-10 {width: 83.33%;}     .col-11 {width: 91.66%;}     .col-12 {width: 100%;} }                       Ta có một ví dụ sau                  <div class=\"row\">     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div>     <div class=\"col-3 col-s-6\">     </div> </div>                       Trong ví dụ trên, màn hình tablet sẽ hiển thị 2 cột, màn hình lớn sẽ hiển thị 4 cột, màn hình điện thoại sẽ hiển thị 1 cột."
    },
    {
        "title": "Danh sách các điểm ngắt trong năm 2024",
        "content": "Danh sách các điểm ngắt trong năm 2024                                               Dùng min-width                                                    576px: Màn hình điện thoại                                                       768px: Màn hình tablet                                                       992px: Màn hình máy tính                                                       1200px: Màn hình lớn (TV, máy chiếu...)                                                    Dùng max-width                                                    575.98px: Màn hình điện thoại                                                       767.98px: Màn hình tablet                                                       991.98px: Màn hình máy tính                                                       1199.98px: Màn hình lớn (TV, máy chiếu...)                                                    Lưu ý: Các điểm ngắt trên chỉ là ước lượng, bạn có thể thay đổi tùy theo thiết kế của mình.                         Đồng thời nên đồng nhất các điểm ngắt trong dự án của mình để tránh xung đột."
    },
    {
        "title": "RWD - Hình ảnh",
        "content": "RWD - Hình ảnh                                       Khi thiết kế trang web đáp ứng, bạn cần chú ý đến hình ảnh.                                            Các thuộc tính có sẵn của hình ảnh trong CSS                                               width                                               Thuộc tính width giúp bạn thiết lập chiều rộng của hình ảnh.                         khi thiết lập kích thước chiều rộng cố định, chiều cao là auto -> hình ảnh sẽ tự động thay đổi chiều cao tương ứng.                                               max-width                                               Khi max-width được set là 100%, hình ảnh sẽ giảm kích thước nếu cần nhưng không vượt quá kích thước gốc.                                                 Background image                                               Khi sử dụng background-image, bạn cần chú ý đến thuộc tính background-size.                                               Thuộc tính này đã được học ở bài trước, bạn có thể xem lại tại đây                             Hình ảnh khác nhau cho mỗi thiết bị                                               Bạn có thể sử dụng thẻ <picture> để hiển thị hình ảnh khác nhau cho mỗi thiết bị.                                               Thẻ <picture> đã được học ở bài trước, bạn có thể xem lại tại đây                           Hoặc có thể dùng media query để thay đổi background-image cho mỗi thiết bị."
    },
    {
        "title": "Các thuộc tính có sẵn của hình ảnh trong CSS",
        "content": "Các thuộc tính có sẵn của hình ảnh trong CSS                                               width                                               Thuộc tính width giúp bạn thiết lập chiều rộng của hình ảnh.                         khi thiết lập kích thước chiều rộng cố định, chiều cao là auto -> hình ảnh sẽ tự động thay đổi chiều cao tương ứng.                                               max-width                                               Khi max-width được set là 100%, hình ảnh sẽ giảm kích thước nếu cần nhưng không vượt quá kích thước gốc."
    },
    {
        "title": "Background image",
        "content": "Background image                                               Khi sử dụng background-image, bạn cần chú ý đến thuộc tính background-size.                                               Thuộc tính này đã được học ở bài trước, bạn có thể xem lại tại đây"
    },
    {
        "title": "Hình ảnh khác nhau cho mỗi thiết bị",
        "content": "Hình ảnh khác nhau cho mỗi thiết bị                                               Bạn có thể sử dụng thẻ <picture> để hiển thị hình ảnh khác nhau cho mỗi thiết bị.                                               Thẻ <picture> đã được học ở bài trước, bạn có thể xem lại tại đây                           Hoặc có thể dùng media query để thay đổi background-image cho mỗi thiết bị."
    },
    {
        "title": "RWD - FrameWork",
        "content": "RWD - FrameWork                                       Nếu bạn không muốn tự viết CSS cho trang web của mình, bạn có thể sử dụng các framework CSS đã có sẵn.                                       Một số framework phổ biến như: Bootstrap, Foundation, Bulma, Materialize...                                       Framework CSS giúp bạn xây dựng trang web nhanh chóng, dễ dàng và đẹp mắt.                                       Tuy nhiên, bạn cần chú ý đến việc tùy chỉnh giao diện cho phù hợp với dự án của mình."
    },
    {
        "title": "Giới thiệu về Bootstrap",
        "content": "Giới thiệu về Bootstrap                               Bootstrap là một framework phổ biến nhất để xây dựng giao diện web. Bootstrap cung cấp một bộ các class                 CSS và JavaScript giúp bạn xây dựng giao diện web nhanh chóng và dễ dàng hơn.                               Bootstrap được phát triển bởi Twitter và được phát hành miễn phí dưới giấy phép MIT.                               Bootstrap hỗ trợ responsive design, tức là giao diện web sẽ tự động thay đổi theo kích thước của màn                 hình thiết bị.                               Các phiên bản Bootstrap                               Hiện tại, Bootstrap có 4 phiên bản chính:                                    Bootstrap 2: Phiên bản cũ nhất, không còn được hỗ trợ.                                       Bootstrap 3: Phiên bản ổn định, được sử dụng rộng rãi.                                       Bootstrap 4: Phiên bản mới hơn, được cải thiện về hiệu suất và tính năng.                                       Bootstrap 5: Phiên bản mới nhất, được cải thiện về hiệu suất và tính năng.                                    Làm sao để sử dụng Bootstrap                               Để sử dụng Bootstrap, bạn có thể tải Bootstrap từ trang chủ của Bootstrap (https://getbootstrap.com/),                 hoặc sử dụng CDN của Bootstrap.                               Ví dụ, để sử dụng Bootstrap thông qua CDN, bạn chỉ cần thêm đoạn mã sau vào phần head của trang web:              <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>                  Sau đó, bạn có thể sử dụng các class và component của Bootstrap trong trang web của mình."
    },
    {
        "title": "container trong Bootstrap",
        "content": "container trong Bootstrap                                       Trong Bootstrap, container là một class dùng để bọc nội dung trên trang web. Container giúp hiển thị nội dung trên trang web một cách chính xác trên mọi thiết bị.                                       Bootstrap cung cấp 2 loại container chính:                                            Container: Container thông thường, có kích thước cố định.                                               Container-fluid: Container có chiều rộng 100%, sẽ căng đầy trên mọi thiết bị.                                            Để sử dụng container trong Bootstrap, bạn chỉ cần thêm class container hoặc container-fluid vào thẻ div chứa nội dung.                   container <div class=\"container\">     <h1>Container</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p> </div>                     container-fluid              <div class=\"container-fluid\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>                     container padding                               Theo mặc định, vùng chứa có phần đệm trái và phải, không có phần đệm trên cùng hoặc dưới cùng.                 Vì vậy, chúng ta thường sử dụng thuộc tính về khoảng cách, chẳng hạn như phần đệm thêm và lề để khiến                 chúng trông đẹp hơn.                 Ví dụ thêm class \"pt-5\" vào container để thêm phần đệm trên cùng.              <div class=\"container pt-5\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>                     container border và color                               Bạn cũng có thể thêm border và color cho container bằng cách sử dụng class border và color của                 Bootstrap.              <div class=\"container p-5 m-5 border\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-dark text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-primary text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>                      Responsive container                               Bootstrap hỗ trợ responsive riêng cho container. Bạn có thể sử dụng các class sau để tạo container                 responsive:                                    container-sm: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 576px.                                       container-md: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 768px.                                       container-lg: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 992px.                                       container-xl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1200px.                                       container-xxl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1400px.                                       Grid trong Bootstrap                               Hệ thống lưới của Bootstrap được xây dựng bằng flexbox và cho phép tối đa 12 cột trên trang.                               Nếu không muốn sử dụng riêng lẻ cả 12 cột, bạn có thể nhóm các cột lại với nhau để tạo cột rộng hơn                               Hệ thống lưới phản hồi nhanh và các cột sẽ tự động sắp xếp lại tùy theo kích thước màn hình.                               Đảm bảo rằng tổng cộng tối đa là 12 hoặc ít hơn (không bắt buộc bạn phải sử dụng tất cả 12 cột có sẵn).                                    Grid class trong Bootstrap                                       Trong Bootstrap, hệ thống lưới có 6 class chính:                    .col-: dùng cho thiết bị có màn hình rất nhỏ (dưới 576px).                       .col-sm-: dùng cho thiết bị có màn hình từ 576px trở lên.                       .col-md-: dùng cho thiết bị có màn hình từ 768px trở lên.                       .col-lg-: dùng cho thiết bị có màn hình từ 992px trở lên.                       .col-xl-: dùng cho thiết bị có màn hình từ 1200px trở lên.                       .col-xxl-: dùng cho thiết bị có màn hình từ 1400px trở lên.                                              Cấu trúc cơ bản của grid                                       Cấu trúc cơ bản của grid trong Bootstrap như sau:                  <div class=\"row\">     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 1</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 2</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 3</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 4</p>     </div> </div>                            Trong ví dụ trên, chúng ta đã tạo một hàng với 4 cột. Mỗi cột sẽ chiếm 12 cột trên màn hình nhỏ                         nhất (dưới 576px), 6 cột trên màn hình từ 576px trở lên, 3 cột trên màn hình từ 992px trở lên.                                               Bạn có thể để giá trị col để cột tự động co giãn theo nội dung.                                           Text/Typography trong Bootstrap                               Bootstrap cung cấp một số class để tùy chỉnh kiểu chữ và văn bản trên trang web.                                    h1 - h6                                       Bootstrap có những kiểu mặc định cho các thẻ h1 - h6 như sau:                  <h1>Heading 1</h1> <h2>Heading 2</h2> <h3>Heading 3</h3> <h4>Heading 4</h4> <h5>Heading 5</h5> <h6>Heading 6</h6>                       Đồng thời bạn có thể dùng các class h1 - h6 cho những thẻ khác nếu bạn muốn áp dụng phong cách của                     các thẻ tiêu đề.                                         Display heading                                       Bootstrap cung cấp các class display-1 đến display-6 để tạo kiểu tiêu đề lớn hơn so với các thẻ h1 -                     h6.                  <h1 class=\"display-1\">Display 1</h1> <h2 class=\"display-2\">Display 2</h2> <h3 class=\"display-3\">Display 3</h3> <h4 class=\"display-4\">Display 4</h4> <h5 class=\"display-5\">Display 5</h5> <h6 class=\"display-6\">Display 6</h6>                         small text                                       trong bosstrap 5, bạn có thể dử dụng thẻ <small> hoặc thêm                     class .small vào thẻ để tạo kiểu chữ nhỏ.                  <h1>Heading 1 <small>small text</small></h1> <h1>Heading 1 <span class=\"small\">small text</span></h1>                         mark                                       Bạn có thể sử dụng thẻ <mark> hoặc class .mark để tạo kiểu chữ được đánh dấu.                  <p>Đây là một đoạn văn để test, <mark>còn đây là phần được đánh dấu</mark> có màu nổi bật.</p> <p>Đây là một đoạn văn để test, <span class=\"mark\">còn đây là phần được đánh dấu</span> có màu nổi bật.</p>                         abbr                                       Bạn có thể sử dụng thẻ <abbr> để tạo chú thích cho văn bản                     viết tắt với viền chấm ở dưới và có dấu chấm hỏi khi di chuột qua.                  <p><abbr title=\"HyperText Markup Language\">HTML</abbr> không phải ngôn ngữ lập trình.</p>                         blockquote                                       Bạn có thể sử dụng thẻ <blockquote> với class .blockquote để mô tả nội dung trích dẫn. Đồng thời bạn có thể sử                     dụng thẻ <footer> với class .blockquote-footer để thêm thông tin về người viết.                  <blockquote class=\"blockquote\">     <p>Từ ấy trong tôi bừng nắng hạ.<br>Mặt trời chân lí chói qua tim.<br>Hồn tôi là một vườn hoa lá.<br>Rất đậm hương và rộn tiếng chim.</p>     <footer class=\"blockquote-footer\">Tố Hữu - Từ Ấy</footer> </blockquote>                         dl                                       Bạn có thể sử dụng thẻ <dl> để tạo danh sách định nghĩa.                     Trong đó, thẻ <dt> để tạo tiêu đề cho danh sách, thẻ <dd> để tạo nội dung cho danh sách.                  <dl>     <dt>HTML</dt>     <dd>Ngôn ngữ đánh dấu siêu văn bản</dd>     <dt>CSS</dt>     <dd>Ngôn ngữ định dạng siêu văn bản</dd>     <dt>JavaScript</dt>     <dd>Ngôn ngữ lập trình client-side</dd> </dl>                         code                                       Bạn có thể sử dụng thẻ <code> để tạo kiểu chữ cho mã nguồn.                  <p>Các phần tử HTML như:<code>div</code>, <code>p</code> có <code>display: block;</code>.</p>                         kbd                                       Bạn có thể sử dụng thẻ <kbd> để tạo kiểu chữ cho phím bấm.                  <p>Để mở Developer Tools trong trình duyệt Chrome, bạn nhấn tổ hợp phím <kbd>ctrl+shift+i</kbd> hoặc <kbd>F12</kbd>.</p>                         pre                                       Bạn có thể sử dụng thẻ <pre> để giữ nguyên định dạng của mã                     nguồn.                  <pre>     Đây là một đoạn mã nguồn nằm trong thẻ pre    nó sẽ được hiển   thị bằng font chữ monospace và giữ nguyên định dạng </pre>                         các class khác                  Bạn có thể tham khảo thêm ở bảng sau    Class Mô tả   .lead Tạo kiểu chữ lớn hơn   .text-start Căn lề trái   .text-break Xuống dòng khi vượt quá khung   .text-center Căn giữa   .text-decoration-none Loại bỏ gạch chân trong thẻ a   .text-end Căn lề phải   .text-nowrap Văn bản không ngắt dòng   .text-lowercase Chuyển văn bản thành chữ thường   .text-uppercase Chuyển văn bản thành chữ hoa   .text-capitalize Chuyển văn bản thành chữ in hoa đầu từ   .initialism Hiển thị văn bản bên trong phần tử <abbr> với cỡ chữ nhỏ hơn một chút   .list-unstyled Loại bỏ dấu đầu dòng của danh sách   .list-inline Hiển thị danh sách theo chiều ngang. Sử dụng kết hợp thêm class                                 .list-inline-item vào thẻ li                                                     bosstrap 5 - color                               Bootstrap 5 có một số lớp theo ngữ cảnh có thể được sử dụng để cung cấp \"ý nghĩa thông qua màu sắc\".                                    text color                                       Bạn có thể sử dụng các class text- để thay đổi màu chữ.                  <p class=\"text-primary\">Primary text.</p> <p class=\"text-secondary\">Secondary text.</p> <p class=\"text-success\">Success text.</p> <p class=\"text-danger\">Danger text.</p> <p class=\"text-warning\">Warning text.</p> <p class=\"text-info\">Info text.</p> <p class=\"text-light bg-dark\">Light text.</p> <p class=\"text-dark\">Dark text.</p> <p class=\"text-body\">Body text.</p> <p class=\"text-muted\">Muted text.</p> <p class=\"text-white bg-dark\">White text.</p> <p class=\"text-black-50\">Black 50 text.</p> <p class=\"text-white-50 bg-dark\">White 50 text.</p>                         background color                                       Bạn có thể sử dụng các class bg- để thay đổi màu nền.                  <p class=\"bg-primary text-white\">Primary background.</p> <p class=\"bg-secondary text-white\">Secondary background.</p> <p class=\"bg-success text-white\">Success background.</p> <p class=\"bg-danger text-white\">Danger background.</p> <p class=\"bg-warning text-white\">Warning background.</p> <p class=\"bg-info text-white\">Info background.</p> <p class=\"bg-light\">Light background.</p> <p class=\"bg-dark text-white\">Dark background.</p> <p class=\"bg-white\">White background.</p>                      bosstrap 5 - table                               Bootstrap 5 cung cấp một số class để tạo bảng dễ dàng và nhanh chóng.                                    bảng đơn giản                                       Bạn có thể sử dụng class .table để tạo bảng đơn giản.                  <table class=\"table\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có hàng sọc                                       Bạn có thể sử dụng class .table-striped để tạo bảng có hàng sọc.                  <table class=\"table table-striped\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có đường viền                                       Bạn có thể sử dụng class .table-bordered để tạo bảng có đường                     viền.                  <table class=\"table table-bordered\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có hiệu ứng hover                                       Bạn có thể sử dụng class .table-hover để tạo bảng có hiệu ứng                     hover.                  <table class=\"table table-hover\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         Bảng tối                                       Bạn có thể sử dụng class .table-dark để tạo bảng có màu nền tối.                  <table class=\"table table-dark\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                       Bạn cũng có thể kết hợp các class trên để tạo bảng tối theo ý muốn.                                         Bảng không có border                                       Bạn có thể sử dụng class .table-borderless để tạo bảng không có                     border.                  <table class=\"table table-borderless\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         Bảng có màu theo ngữ cảnh                                       Bạn có thể sử dụng class .table-{context} để tạo bảng có màu theo                     ngữ cảnh.                  <table class=\"table\">     <thead>         <tr>             <th>Ngữ cảnh</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Mặc định</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr class=\"table-primary\">             <td>Primary</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr class=\"table-success\">             <td>Success</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>         <tr class=\"table-danger\">             <td>Danger</td>             <td>Dòng 4, Cột 2</td>             <td>Dòng 4, Cột 3</td>         </tr>         <tr class=\"table-warning\">             <td>Warning</td>             <td>Dòng 5, Cột 2</td>             <td>Dòng 5, Cột 3</td>         </tr>         <tr class=\"table-info\">             <td>Info</td>             <td>Dòng 6, Cột 2</td>             <td>Dòng 6, Cột 3</td>         </tr>         <tr class=\"table-light\">             <td>Light</td>             <td>Dòng 7, Cột 2</td>             <td>Dòng 7, Cột 3</td>         </tr>         <tr class=\"table-dark\">             <td>Dark</td>             <td>Dòng 8, Cột 2</td>             <td>Dòng 8, Cột 3</td>         </tr>         <tr class=\"table-active\">             <td>Active</td>             <td>Dòng 9, Cột 2</td>             <td>Dòng 9, Cột 3</td>         </tr>         <tr class=\"table-secondary\">             <td>Secondary</td>             <td>Dòng 10, Cột 2</td>             <td>Dòng 10, Cột 3</td>         </tr>     </tbody> </table>                       Bạn có thể thêm class vào thẻ table để thay đổi màu của toàn bảng,                     thêm class vào thẻ thead để thay đổi màu của tiêu đề,                     thêm class vào thẻ tbody để thay đổi màu của nội dung,                     thêm class vào thẻ tr để thay đổi màu của dòng,                     thêm class vào thẻ th hoặc td để thay đổi màu của từng ô.                                         Bảng nhỏ hơn                                       Bạn có thể sử dụng class .table-sm để tạo bảng nhỏ hơn.                  <table class=\"table table-sm\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         responsive table                                       Bạn có thể sử dụng class .table-responsive để tạo bảng có thể cuộn                     ngang khi màn hình nhỏ.                  <div class=\"container mt-3\">      <div class=\"table-responsive\">         <table class=\"table table-bordered\">             <thead>                 <tr>                     <th>1</th>                     <th>2</th>                     <th>3</th>                     <th>4</th>                     <th>5</th>                     <th>6</th>                     <th>7</th>                     <th>8</th>                     <th>9</th>                     <th>10</th>                     <th>11</th>                     <th>12</th>                     <th>13</th>                     <th>14</th>                     <th>15</th>                     <th>16</th>                 </tr>             </thead>             <tbody>                 <tr>                     <td>Cột 1</td>                     <td>Cột 2</td>                     <td>Cột 3</td>                     <td>Cột 4</td>                     <td>Cột 5</td>                     <td>Cột 6</td>                     <td>Cột 7</td>                     <td>Cột 8</td>                     <td>Cột 9</td>                     <td>Cột 10</td>                     <td>Cột 11</td>                     <td>Cột 12</td>                     <td>Cột 13</td>                     <td>Cột 14</td>                     <td>Cột 15</td>                     <td>Cột 16</td>                 </tr>             </tbody>         </table>     </div> </div>                      bosstrap 5 - image                               Bootstrap 5 cung cấp một số class để tùy chỉnh hình ảnh dễ dàng và nhanh chóng.                                    hình ảnh bo góc                                       Bạn có thể sử dụng class .rounded để tạo hình bo góc.                  <img src=\"image.jpg\" class=\"rounded\" alt=\"Hình bo góc\">                         hình ảnh bo tròn                                       Bạn có thể sử dụng class .rounded-circle để tạo hình bo tròn.                  <img src=\"image.jpg\" class=\"rounded-circle\" alt=\"Hình bo tròn\">                         thubmnail - hình ảnh có viền                                       Bạn có thể sử dụng class .img-thumbnail để tạo hình ảnh có viền.                  <img src=\"image.jpg\" class=\"img-thumbnail\" alt=\"Hình ảnh có viền\">                         căn chỉnh hình ảnh                                       Bạn có thể sử dụng class .float-{direction} để căn chỉnh hình ảnh                     theo hướng.                  <img src=\"image.jpg\" class=\"float-start\" alt=\"Hình ảnh căn trái\"> <img src=\"image.jpg\" class=\"float-end\" alt=\"Hình ảnh căn phải\">                         căn giữa hình ảnh                                       Bạn có thể sử dụng class .mx-auto(margin: auto) và .d-block(display: block) để căn giữa hình ảnh.                  <img src=\"image.jpg\" class=\"mx-auto d-block\" alt=\"Hình ảnh căn giữa\">                         hình ảnh đáp ứng                                       Bạn có thể sử dụng class .img-fluid để tạo hình ảnh đáp ứng.                  <div class=\"container mt-3\">     <h2>Hình ảnh đáp ứng</h2>     <p>.img-fluid class giúp hình ảnh có tỉ lệ phù hợp với phần tử cha:</p>     <img src=\"image.jpg\" class=\"img-fluid\" alt=\"Hình ảnh đáp ứng\">  </div>                      Jumbotron trong Bootstrap 5                               Jumbotron là một thành phần quan trọng trong, nó giúp tạo ra một phần tử chứa nội dung lớn, thu hút                 người xem.                 Jumbotron không còn được hỗ trợ trong Bootstrap 5, nhưng bạn vẫn có thể tạo một Jumbotron bằng cách sử                 dụng các class của Bootstrap 5.              <div class=\"container mt-3\">     <div class=\"mt-4 p-5 bg-primary text-white rounded\">         <h1>Tiêu đề lớn</h1>         <p>Nội dung lớn</p>     </div> </div>                     Bootstrap 5 - Alert                               Bootstrap 5 cung cấp một số class để tạo thông báo dễ dàng và nhanh chóng.                                    Thông báo cơ bản                                       Thông báo được tạo bởi một div với class .alert và một class ngữ                     cảnh                  <div class=\"alert alert-primary\" role=\"alert\">     <strong>Primary!</strong> Đây là thông báo primary. </div> <div class=\"alert alert-secondary\" role=\"alert\">     <strong>Secondary!</strong> Đây là thông báo secondary. </div> <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success. </div> <div class=\"alert alert-danger\" role=\"alert\">     <strong>Danger!</strong> Đây là thông báo danger. </div> <div class=\"alert alert-warning\" role=\"alert\">     <strong>Warning!</strong> Đây là thông báo warning. </div> <div class=\"alert alert-info\" role=\"alert\">     <strong>Info!</strong> Đây là thông báo info. </div> <div class=\"alert alert-light\" role=\"alert\">     <strong>Light!</strong> Đây là thông báo light. </div> <div class=\"alert alert-dark\" role=\"alert\">     <strong>Dark!</strong> Đây là thông báo dark. </div>                         Thông báo có liên kết                                       Bạn có thể thêm một liên kết vào thông báo bằng cách thêm một thẻ a với class                     .alert-link vào bên trong thông báo.                  <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success với <a href=\"#\" class=\"alert-link\">liên kết</a>. </div>                         Thông báo có nút đóng                                       Bạn có thể thêm một nút đóng vào thông báo bằng cách thêm một thẻ button với class                     .btn-close vào bên trong thông báo.                  <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Danger!</strong> Đây là thông báo danger với nút đóng. </div>                         Thông báo với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào thông báo bằng cách thêm class .fade                     và                     .show vào thông báo.                  <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Success!</strong> Đây là thông báo success với hiệu ứng. </div>                      Bootstrap 5 - Button                                    Button cơ bản                                       Bạn có thể tạo button cơ bản bằng cách sử dụng class .btn kết hợp                     với class ngữ cảnh.                  <button type=\"button\" class=\"btn\">Basic</button> <button type=\"button\" class=\"btn btn-primary\">Primary</button> <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-success\">Success</button> <button type=\"button\" class=\"btn btn-info\">Info</button> <button type=\"button\" class=\"btn btn-warning\">Warning</button> <button type=\"button\" class=\"btn btn-danger\">Danger</button> <button type=\"button\" class=\"btn btn-dark\">Dark</button> <button type=\"button\" class=\"btn btn-light\">Light</button> <button type=\"button\" class=\"btn btn-link\">Link</button>                       Bạn cũng có thể thêm class .btn-lg hoặc .btn-sm để tạo button lớn hoặc nhỏ.                                       Bạn cũng có thể dùng cho thẻ <a>, <input>, <button>.                                         Button với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào button bằng cách sử dụng class .btn                     và                     .btn-outline.                  <button type=\"button\" class=\"btn btn-outline-primary\">Primary</button> <button type=\"button\" class=\"btn btn-outline-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-outline-success\">Success</button> <button type=\"button\" class=\"btn btn-outline-info\">Info</button> <button type=\"button\" class=\"btn btn-outline-warning\">Warning</button> <button type=\"button\" class=\"btn btn-outline-danger\">Danger</button> <button type=\"button\" class=\"btn btn-outline-dark\">Dark</button> <button type=\"button\" class=\"btn btn-outline-light\">Light</button>                         full width button                                       Bạn có thể tạo button full width bằng cách sử dụng class .d-grid                     cho phần tử cha chứa button.                  <div class=\"d-grid\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>  Nếu bạn muốn kiểm soát khoảng cách giữa các button, có thể thêm class .gap-* <div class=\"d-grid gap-2\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>                         button active/disable                                       Bạn có thể tạo button active hoặc disable bằng cách thêm class .active hoặc .disabled.                  <button type=\"button\" class=\"btn btn-primary active\">Active</button> <button type=\"button\" class=\"btn btn-primary disabled\">Disabled</button>   Lưu ý: class .disabled chỉ làm cho button trở nên mờ đi, không thể click được,                     nếu muốn button không thể click được, bạn cần thêm thuộc tính disabled vào button.                                         spinner button                                       Bạn có thể tạo button với spinner bằng cách thêm thẻ <span>                     với class .spinner-border hoặc .spinner-grow vào bên trong button.                  <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-border spinner-border-sm\"></span>     Loading... </button> <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-grow spinner-grow-sm\"></span>     Loading... </button>                      Button group                               Bạn có thể tạo button group bằng cách sử dụng class .btn-group cho                 phần tử cha chứa button.              <div class=\"btn-group\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <button type=\"button\" class=\"btn btn-primary\">Button 3</button> </div>                   Bạn cũng có thể thêm class .btn-group-vertical để tạo button group                 dọc.                 <div class=\"btn-group-vertical\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <button type=\"button\" class=\"btn btn-primary\">Button 3</button> </div>                         Kết hợp với dropdown                                       Bạn có thể kết hợp button group với dropdown bằng cách sử dụng class .dropdown-toggle cho button trigger dropdown.                  <div class=\"btn-group\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <div class=\"btn-group\">         <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Button 3</button>         <div class=\"dropdown-menu\">             <a class=\"dropdown-item\" href=\"#\">Dropdown 1</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 2</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 3</a>         </div>     </div> </div>                      Bootstrap 5 - Bagde                               Badge là một thành phần quan trọng trong Bootstrap 5, nó giúp hiển thị thông tin hoặc trạng thái của một                 phần tử.                                    Badge cơ bản                                       Bạn có thể tạo badge cơ bản bằng cách sử dụng class .badge kết hợp                     với class ngữ cảnh.                  <span class=\"badge bg-primary\">Primary</span> <span class=\"badge bg-secondary\">Secondary</span> <span class=\"badge bg-success\">Success</span> <span class=\"badge bg-danger\">Danger</span> <span class=\"badge bg-warning text-dark\">Warning</span> <span class=\"badge bg-info\">Info</span> <span class=\"badge bg-light text-dark\">Light</span> <span class=\"badge bg-dark\">Dark</span>                         pill badge                                       Bạn có thể tạo pill badge bằng cách thêm class .rounded-pill vào                     badge.                  <span class=\"badge bg-primary rounded-pill\">Primary</span> <span class=\"badge bg-secondary rounded-pill\">Secondary</span> <span class=\"badge bg-success rounded-pill\">Success</span> <span class=\"badge bg-danger rounded-pill\">Danger</span> <span class=\"badge bg-warning text-dark rounded-pill\">Warning</span> <span class=\"badge bg-info rounded-pill\">Info</span> <span class=\"badge bg-light text-dark rounded-pill\">Light</span> <span class=\"badge bg-dark rounded-pill\">Dark</span>                         badge bên trong một button                                       Bạn có thể thêm badge vào bên trong button bằng cách thêm một thẻ <span> class .badge vào bên                     trong button.                  <button type=\"button\" class=\"btn btn-primary\">Thông báo mới <span class=\"badge bg-warning\">4</span></button>                      Thanh tiến trình trong Bootstrap 5                               Thanh tiến trình trong Bootstrap 5 giúp hiển thị tiến trình của một công việc.                                    Thanh tiến trình cơ bản                                       Bạn có thể tạo thanh tiến trình cơ bản bằng cách sử dụng class .progress kết hợp với class ngữ cảnh.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning\" style=\"width: 100%\">100%</div>     </div> </div>                         Thanh tiến trình striped                                       Bạn có thể tạo thanh tiến trình striped bằng cách thêm class .progress-bar-striped vào thanh tiến trình.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar progress-bar-striped\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success progress-bar-striped\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info progress-bar-striped\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning progress-bar-striped\" style=\"width: 100%\">100%</div>     </div> </div>                         Thanh tiến trình animated                                       Bạn có thể tạo thanh tiến trình animated bằng cách thêm class .progress-bar-animated vào thanh tiến trình.                  <div class=\"progress\">     <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\">75%</div> </div>                         Thanh tiến trình multiple                                       Bạn có thể tạo thanh tiến trình multiple bằng cách thêm nhiều thẻ <div> với class .progress-bar vào bên trong thanh tiến trình.                  <div style=\"height: 25px\" class=\"progress\">     <div class=\"progress-bar bg-primary\" style=\"width: 25%\">Tập tin hệ thống</div>     <div class=\"progress-bar bg-success\" style=\"width: 10%\">Tập tin hình ảnh</div>     <div class=\"progress-bar bg-info\" style=\"width: 15%\">Tập tin video</div> </div>                      spinner/loader trong Bootstrap 5                                    spinner cơ bản                                       Bạn có thể tạo spinner cơ bản bằng cách sử dụng class .spinner-border hoặc .spinner-grow.                  <div class=\"spinner-border text-muted\" role=\"status\"></div> <div class=\"spinner-grow text-primary\" role=\"status\"></div> <div class=\"spinner-border text-success\" role=\"status\"></div> <div class=\"spinner-grow text-info\" role=\"status\"></div> <div class=\"spinner-border text-warning\" role=\"status\"></div> <div class=\"spinner-grow text-danger\" role=\"status\"></div> <div class=\"spinner-border text-dark\" role=\"status\"></div> <div class=\"spinner-grow text-light\" role=\"status\"></div>                         spinner size                                       Bạn có thể tạo spinner với kích thước khác nhau bằng cách thêm class .spinner-border-sm hoặc .spinner-grow-sm.                  <div class=\"spinner-border spinner-border-sm text-muted\" role=\"status\"></div> <div class=\"spinner-grow spinner-grow-sm text-primary\" role=\"status\"></div>                      pagination trong Bootstrap 5                               Bạn có thể tạo pagination trong Bootstrap 5 bằng cách sử dụng class .pagination.                                    pagination cơ bản                                       Bạn có thể tạo pagination cơ bản bằng cách sử dụng class .page-item và .page-link.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination thuộc tính active                                       Bạn có thể tạo pagination với thuộc tính active bằng cách thêm class .active vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination disabled                                       Bạn có thể tạo pagination disabled bằng cách thêm class .disabled                     vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination size                                       Bạn có thể tạo pagination với kích thước khác nhau bằng cách thêm class .pagination-lg hoặc .pagination-sm.                  <nav>     <ul class=\"pagination pagination-lg\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination align                                       Bạn có thể tạo pagination với alignment khác nhau bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-center\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-end\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         Breadcrumbs                                       Breadcrumbs giúp người dùng biết được vị trí của mình trong trang web.                                       Bạn có thể tạo breadcrumbs bằng cách sử dụng class .breadcrumb kết                     hợp với class .breadcrumb-item và .breadcrumb-item.active.                  <nav aria-label=\"breadcrumb\">     <ol class=\"breadcrumb\">         <li class=\"breadcrumb-item\"><a href=\"#\">Trang chủ</a></li>         <li class=\"breadcrumb-item\"><a href=\"#\">Danh mục</a></li>         <li class=\"breadcrumb-item active\" aria-current=\"page\">Sản phẩm</li>     </ol> </nav>                      list group trong Bootstrap 5                                    list group cơ bản                                       Bạn có thể tạo list group cơ bản bằng cách sử dụng class .list-group kết hợp với class .list-group-item.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>                         active item                                       Bạn có thể tạo list group với item active bằng cách thêm class .active vào thẻ <li>.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item active\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>                         List group với các liên kết                                       Bạn có thể tạo list group với các liên kết bằng cách sử dụng thẻ <a> thay vì thẻ <li>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         disabled item                                       Bạn có thể tạo list group với item disabled bằng cách thêm class .disabled vào thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 3</a> </div>                         Flush/remove border                                       Bạn có thể tạo list group mà không có border bằng cách thêm class .list-group-flush vào thẻ <div>.                  <div class=\"list-group list-group-flush\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         Thêm số thứ tự cho list group                                       Bạn có thể thêm số thứ tự cho list group bằng cách thêm class <.list-group-numbered> vào bên trong thẻ <div>.                  <div class=\"list-group list-group-numbered\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         list group nằm ngang                                       Bạn có thể tạo list group nằm ngang bằng cách thêm class .list-group-horizontal vào thẻ <div>.                  <div class=\"list-group list-group-horizontal\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         list items với class ngữ cảnh                                       Bạn có thể tạo list group với class ngữ cảnh bằng cách thêm class .list-group-item-{contex}.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item Action</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-primary\">Item Primary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-secondary\">Item Secondary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-info\">Item info</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-warning\">Item warning</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-danger\">Item danger</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-success\">Item success</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-dark\">Item dark</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\">Item light</a> </div>                         list group với badge                                       Bạn có thể tạo list group với badge bằng cách thêm thẻ <span> vào bên trong thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Hộp thư đến <span class=\"badge bg-primary\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Quảng cáo <span class=\"badge bg-warning\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Thư nháp <span class=\"badge bg-info\">14</span></a> </div>                      Bootstrap 5 - Card                                    Card cơ bản                                       Bạn có thể tạo card cơ bản bằng cách sử dụng class .card kết hợp                     với class .card-body.                  <div class=\"card\">     <div class=\"card-body\">         Đây là nội dung card     </div> </div>                         Header và footer                                       Bạn có thể thêm header và footer cho card bằng cách sử dụng class .card-header và .card-footer.                  <div class=\"card\">     <div class=\"card-header\">         Đây là header     </div>     <div class=\"card-body\">         Đây là nội dung card     </div>     <div class=\"card-footer\">         Đây là footer     </div> </div>                         Card với context class                                       Bạn có thể tạo card với class ngữ cảnh bằng cách thêm class .bg-{context} vào thẻ <div>.                  <div class=\"card bg-primary\">     <div class=\"card-body text-white\">         Đây là nội dung card     </div> </div>                         Tiêu đề, văn bản và liên kết                                       Bạn có thể thêm tiêu đề, văn bản và liên kết vào card bằng cách sử dụng class .card-title(h4), .card-text(p) và                     .card-link(a).                  <div class=\"card\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link\">Liên kết</a>         <a href=\"#\" class=\"card-link\">Liên kết khác</a>     </div> </div>                         card với hình ảnh                                       Bạn có thể thêm hình ảnh vào card bằng cách sử dụng class .card-img-top hoặc .card-img-bottom.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>                         card image overlay                                       Bạn có thể tạo card với hình ảnh overlay bằng cách sử dụng class .card-img-overlay.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-img-overlay\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>                      Bootstrap 5 - Dropdown                                    Dropdown cơ bản                                       Bạn có thể tạo dropdown bằng cách sử dụng class .dropdown kết hợp                     với class .dropdown-toggle và .dropdown-menu.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>                         Dropdown với hướng                                       Bạn có thể tạo dropdown với hướng bằng cách thêm class .dropup hoặc .dropright hoặc .dropleft vào thẻ <div>.                  <div class=\"dropdown dropup\" style=\"margin-top: 150px; \">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>                         dropdown-header và dropdown-divider                                       Bạn có thể tạo dropdown với header và divider bằng cách sử dụng class .dropdown-header và .dropdown-divider.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li class=\"dropdown-header\">Header</li>         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>         <li class=\"dropdown-divider\"></li>         <li><a class=\"dropdown-item\" href=\"#\">Separated link</a></li>     </ul> </div>                         disabled item và active item                                       Bạn có thể tạo dropdown với item disabled và active bằng cách thêm class .disabled và .active vào thẻ <a>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item disabled\" href=\"#\">Disabled link</a></li>         <li><a class=\"dropdown-item active\" href=\"#\">Active link</a></li>     </ul> </div>                         align right và left                                       Bạn có thể tạo dropdown với alignment khác nhau bằng cách thêm class .dropdown-menu-end hoặc .dropdown-menu-start vào thẻ <ul>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button with right align     </button>     <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>                      collapse trong Bootstrap 5                                    collapse cơ bản                                       Bạn có thể tạo collapse bằng cách sử dụng button hoặc thẻ a với attribute data-bs-toggle=\"collapse\" và data-bs-target=\"#id_collapse\".                                       Lưu ý: id của collapse phải trùng với id của data-bs-target.                                          Bạn cũng có thể thêm class .collapse vào thẻ <div> để ẩn nội dung.                                          Bạn cần thêm href=\"#id_collapse\" vào thẻ <a> nếu dùng thẻ a thay vì button.                  <button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseExample\">     Button with data-bs-target </button> <div class=\"collapse\" id=\"collapseExample\">     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Perferendis veniam mollitia veritatis illum autem asperiores, culpa laborum excepturi sint recusandae! Rem et iste voluptas impedit illo magni, cumque sequi cum?     </p> </div>                      Nav trong Bootstrap 5                                    Nav menu                                       Bạn có thể tạo nav menu bằng cách sử dụng class .nav kết hợp với                     class .nav-item và .nav-link.                  <ul class=\"nav\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         căn chỉnh vị trí                                       Bạn có thể căn chỉnh vị trí của nav menu bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <ul class=\"nav justify-content-center\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav justify-content-end\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav nằm dọc                                       Bạn có thể tạo nav menu nằm dọc bằng cách thêm class .flex-column vào thẻ <ul>.                  <ul class=\"nav flex-column\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav tabs                                       Bạn có thể tạo nav tabs bằng cách thêm class .nav-tabs vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item active\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav pills                                       Bạn có thể tạo nav pills bằng cách thêm class .nav-pills vào thẻ <ul>.                  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav justify tabs và pills (chiều rộng bằng nhau)                                       Bạn có thể tạo nav justify tabs và pills bằng cách thêm class .nav-justified vào thẻ <ul>.                  <ul class=\"nav nav-tabs nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav nav-pills nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         toggle tabs và pills                                       Bạn có thể tạo toggle tabs và pills bằng cách thêm class .nav-toggle vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">NodeJS</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>Được phát hành vào năm 2009, NodeJS, hay còn được biết với tên gọi chính thức là Node.js, là môi trường thời gian chạy (runtime environment) JavaScript đa nền tảng và mã nguồn mở. NodeJS cho phép các lập trình viên tạo cả ứng dụng front-end và back-end bằng JavaScript.</p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>NodeJS sử dụng JavaScript, ngôn ngữ lập trình phổ biến nhất thế giới.</li>             <li>NodeJS sử dụng cơ chế bất đồng bộ (asynchronous) giúp tăng hiệu suất ứng dụng.</li>             <li>NodeJS có cộng đồng lớn và phong phú.</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>NodeJS không phù hợp với các ứng dụng yêu cầu xử lý đa luồng (multi-threading).</li>             <li>Vấn đề về quản lý bộ nhớ (memory management) khi xử lý các tác vụ đồng thời (concurrent tasks).</li>             <li>Bảo mật của NodeJS còn yếu so với các ngôn ngữ lập trình back-end khác.</li>         </ul>     </div> </div>  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">Spring boot</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>             Spring Boot là một dự án của Pivotal Team, một công ty con của VMware. Spring Boot là một framework giúp tạo và chạy ứng dụng Spring một cách dễ dàng hơn. Spring Boot giúp giảm thiểu cấu hình XML và Annotation cũng như giúp tạo ra các ứng dụng Spring một cách nhanh chóng.         </p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>Spring Boot giúp giảm thiểu cấu hình XML và Annotation.</li>             <li>Phổ biến</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>Thiếu kiểm soát. Hệ thống tạo ra nhiều sự phụ thuộc không sử dụng, dẫn đến tệp triển khai lớn</li>             <li>Không phù hợp với các dự án quy mô lớn. Nhiều nhà phát triển cho rằng công cụ này không phù hợp để xây dựng các ứng dụng đơn khối lớn. Mặc dù một số người cho rằng nó có thể xử lý tốt các dự án lớn, nhưng điều này không phải là sự đồng thuận chung</li>             <li>Có thể không linh hoạt.</li>         </ul>     </div> </div>                      Navbar trong Bootstrap 5                                    Navbar cơ bản                                       Bạn có thể tạo navbar bằng cách sử dụng class .navbar kết hợp với                     class .navbar-brand và .navbar-nav.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để tạo navbar dọc, xóa class .navbar-expand-*.                                                       Để căn giữa navbar, thêm class .justify-content-center vào thẻ <nav>.                                                       Để đổi màu nền navbar, thay class .bg-light bằng .bg-primary hoặc .bg-dark hoặc .bg-info hoặc .bg-success hoặc .bg-warning hoặc .bg-danger.                                                   Navbar với logo (hoặc tên thương hiệu)                                       Bạn có thể thêm logo hoặc tên thương hiệu vào navbar bằng cách thêm class .navbar-brand vào thẻ <a> nằm bên trong thẻ <div>.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <a class=\"navbar-brand\" href=\"#\">Logo</a>         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để thêm logo, thay văn bản trong thẻ <a> bằng thẻ <img>.                                                bosstrap 5 - carousel/slileshow                                    Carousel cơ bản                                       Bạn có thể tạo carousel bằng cách sử dụng class .carousel kết hợp với                     class .carousel-inner và .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>                         Carousel với caption                                       Bạn có thể thêm caption vào carousel bằng cách thêm thẻ <div> với class .carousel-caption vào thẻ <div> có class .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 1</h3>                 <p>Đây là ảnh 1</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 2</h3>                 <p>Đây là ảnh 2</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 3</h3>                 <p>Đây là ảnh 3</p>             </div>         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>"
    },
    {
        "title": "container trong Bootstrap",
        "content": "container trong Bootstrap                                       Trong Bootstrap, container là một class dùng để bọc nội dung trên trang web. Container giúp hiển thị nội dung trên trang web một cách chính xác trên mọi thiết bị.                                       Bootstrap cung cấp 2 loại container chính:                                            Container: Container thông thường, có kích thước cố định.                                               Container-fluid: Container có chiều rộng 100%, sẽ căng đầy trên mọi thiết bị.                                            Để sử dụng container trong Bootstrap, bạn chỉ cần thêm class container hoặc container-fluid vào thẻ div chứa nội dung.                   container <div class=\"container\">     <h1>Container</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p> </div>                     container-fluid              <div class=\"container-fluid\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>                     container padding                               Theo mặc định, vùng chứa có phần đệm trái và phải, không có phần đệm trên cùng hoặc dưới cùng.                 Vì vậy, chúng ta thường sử dụng thuộc tính về khoảng cách, chẳng hạn như phần đệm thêm và lề để khiến                 chúng trông đẹp hơn.                 Ví dụ thêm class \"pt-5\" vào container để thêm phần đệm trên cùng.              <div class=\"container pt-5\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>                     container border và color                               Bạn cũng có thể thêm border và color cho container bằng cách sử dụng class border và color của                 Bootstrap.              <div class=\"container p-5 m-5 border\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-dark text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-primary text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>                      Responsive container                               Bootstrap hỗ trợ responsive riêng cho container. Bạn có thể sử dụng các class sau để tạo container                 responsive:                                    container-sm: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 576px.                                       container-md: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 768px.                                       container-lg: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 992px.                                       container-xl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1200px.                                       container-xxl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1400px."
    },
    {
        "title": "container",
        "content": "container <div class=\"container\">     <h1>Container</h1>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>     <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p> </div>"
    },
    {
        "title": "container-fluid",
        "content": "container-fluid              <div class=\"container-fluid\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>"
    },
    {
        "title": "container padding",
        "content": "container padding                               Theo mặc định, vùng chứa có phần đệm trái và phải, không có phần đệm trên cùng hoặc dưới cùng.                 Vì vậy, chúng ta thường sử dụng thuộc tính về khoảng cách, chẳng hạn như phần đệm thêm và lề để khiến                 chúng trông đẹp hơn.                 Ví dụ thêm class \"pt-5\" vào container để thêm phần đệm trên cùng.              <div class=\"container pt-5\">             <h1>Container</h1>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi molestias obcaecati ipsa ipsum velit blanditiis magnam dolorum reprehenderit perferendis? Corrupti soluta accusantium, veritatis ea obcaecati ipsa. Nostrum consectetur sunt iste!</p>             <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deserunt laboriosam eos tempora quas ullam corrupti praesentium ut, qui totam reprehenderit animi. Similique itaque enim ipsa aperiam officia et facere porro?</p>             <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat, corrupti, quo reprehenderit ratione totam amet aut rerum esse, nam temporibus delectus! Porro necessitatibus corrupti delectus voluptatibus doloribus iure voluptatem ut?</p>         </div>"
    },
    {
        "title": "container border và color",
        "content": "container border và color                               Bạn cũng có thể thêm border và color cho container bằng cách sử dụng class border và color của                 Bootstrap.              <div class=\"container p-5 m-5 border\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-dark text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>         <div class=\"container p-5 m-5 bg-primary text-white\">             <h1>Container</h1>             <p>container p-5 m-5 border</p>         </div>"
    },
    {
        "title": "Responsive container",
        "content": "Responsive container                               Bootstrap hỗ trợ responsive riêng cho container. Bạn có thể sử dụng các class sau để tạo container                 responsive:                                    container-sm: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 576px.                                       container-md: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 768px.                                       container-lg: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 992px.                                       container-xl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1200px.                                       container-xxl: Container sẽ căng đầy trên mọi thiết bị có kích thước lớn hơn hoặc bằng 1400px."
    },
    {
        "title": "Grid trong Bootstrap",
        "content": "Grid trong Bootstrap                               Hệ thống lưới của Bootstrap được xây dựng bằng flexbox và cho phép tối đa 12 cột trên trang.                               Nếu không muốn sử dụng riêng lẻ cả 12 cột, bạn có thể nhóm các cột lại với nhau để tạo cột rộng hơn                               Hệ thống lưới phản hồi nhanh và các cột sẽ tự động sắp xếp lại tùy theo kích thước màn hình.                               Đảm bảo rằng tổng cộng tối đa là 12 hoặc ít hơn (không bắt buộc bạn phải sử dụng tất cả 12 cột có sẵn).                                    Grid class trong Bootstrap                                       Trong Bootstrap, hệ thống lưới có 6 class chính:                    .col-: dùng cho thiết bị có màn hình rất nhỏ (dưới 576px).                       .col-sm-: dùng cho thiết bị có màn hình từ 576px trở lên.                       .col-md-: dùng cho thiết bị có màn hình từ 768px trở lên.                       .col-lg-: dùng cho thiết bị có màn hình từ 992px trở lên.                       .col-xl-: dùng cho thiết bị có màn hình từ 1200px trở lên.                       .col-xxl-: dùng cho thiết bị có màn hình từ 1400px trở lên.                                              Cấu trúc cơ bản của grid                                       Cấu trúc cơ bản của grid trong Bootstrap như sau:                  <div class=\"row\">     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 1</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 2</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 3</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 4</p>     </div> </div>                            Trong ví dụ trên, chúng ta đã tạo một hàng với 4 cột. Mỗi cột sẽ chiếm 12 cột trên màn hình nhỏ                         nhất (dưới 576px), 6 cột trên màn hình từ 576px trở lên, 3 cột trên màn hình từ 992px trở lên.                                               Bạn có thể để giá trị col để cột tự động co giãn theo nội dung."
    },
    {
        "title": "Grid class trong Bootstrap",
        "content": "Grid class trong Bootstrap                                       Trong Bootstrap, hệ thống lưới có 6 class chính:                    .col-: dùng cho thiết bị có màn hình rất nhỏ (dưới 576px).                       .col-sm-: dùng cho thiết bị có màn hình từ 576px trở lên.                       .col-md-: dùng cho thiết bị có màn hình từ 768px trở lên.                       .col-lg-: dùng cho thiết bị có màn hình từ 992px trở lên.                       .col-xl-: dùng cho thiết bị có màn hình từ 1200px trở lên.                       .col-xxl-: dùng cho thiết bị có màn hình từ 1400px trở lên."
    },
    {
        "title": "Cấu trúc cơ bản của grid",
        "content": "Cấu trúc cơ bản của grid                                       Cấu trúc cơ bản của grid trong Bootstrap như sau:                  <div class=\"row\">     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 1</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 2</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 3</p>     </div>     <div class=\"col-12 col-md-6 col-lg-3 border\">         <p>Column 4</p>     </div> </div>                            Trong ví dụ trên, chúng ta đã tạo một hàng với 4 cột. Mỗi cột sẽ chiếm 12 cột trên màn hình nhỏ                         nhất (dưới 576px), 6 cột trên màn hình từ 576px trở lên, 3 cột trên màn hình từ 992px trở lên.                                               Bạn có thể để giá trị col để cột tự động co giãn theo nội dung."
    },
    {
        "title": "Text/Typography trong Bootstrap",
        "content": "Text/Typography trong Bootstrap                               Bootstrap cung cấp một số class để tùy chỉnh kiểu chữ và văn bản trên trang web.                                    h1 - h6                                       Bootstrap có những kiểu mặc định cho các thẻ h1 - h6 như sau:                  <h1>Heading 1</h1> <h2>Heading 2</h2> <h3>Heading 3</h3> <h4>Heading 4</h4> <h5>Heading 5</h5> <h6>Heading 6</h6>                       Đồng thời bạn có thể dùng các class h1 - h6 cho những thẻ khác nếu bạn muốn áp dụng phong cách của                     các thẻ tiêu đề.                                         Display heading                                       Bootstrap cung cấp các class display-1 đến display-6 để tạo kiểu tiêu đề lớn hơn so với các thẻ h1 -                     h6.                  <h1 class=\"display-1\">Display 1</h1> <h2 class=\"display-2\">Display 2</h2> <h3 class=\"display-3\">Display 3</h3> <h4 class=\"display-4\">Display 4</h4> <h5 class=\"display-5\">Display 5</h5> <h6 class=\"display-6\">Display 6</h6>                         small text                                       trong bosstrap 5, bạn có thể dử dụng thẻ <small> hoặc thêm                     class .small vào thẻ để tạo kiểu chữ nhỏ.                  <h1>Heading 1 <small>small text</small></h1> <h1>Heading 1 <span class=\"small\">small text</span></h1>                         mark                                       Bạn có thể sử dụng thẻ <mark> hoặc class .mark để tạo kiểu chữ được đánh dấu.                  <p>Đây là một đoạn văn để test, <mark>còn đây là phần được đánh dấu</mark> có màu nổi bật.</p> <p>Đây là một đoạn văn để test, <span class=\"mark\">còn đây là phần được đánh dấu</span> có màu nổi bật.</p>                         abbr                                       Bạn có thể sử dụng thẻ <abbr> để tạo chú thích cho văn bản                     viết tắt với viền chấm ở dưới và có dấu chấm hỏi khi di chuột qua.                  <p><abbr title=\"HyperText Markup Language\">HTML</abbr> không phải ngôn ngữ lập trình.</p>                         blockquote                                       Bạn có thể sử dụng thẻ <blockquote> với class .blockquote để mô tả nội dung trích dẫn. Đồng thời bạn có thể sử                     dụng thẻ <footer> với class .blockquote-footer để thêm thông tin về người viết.                  <blockquote class=\"blockquote\">     <p>Từ ấy trong tôi bừng nắng hạ.<br>Mặt trời chân lí chói qua tim.<br>Hồn tôi là một vườn hoa lá.<br>Rất đậm hương và rộn tiếng chim.</p>     <footer class=\"blockquote-footer\">Tố Hữu - Từ Ấy</footer> </blockquote>                         dl                                       Bạn có thể sử dụng thẻ <dl> để tạo danh sách định nghĩa.                     Trong đó, thẻ <dt> để tạo tiêu đề cho danh sách, thẻ <dd> để tạo nội dung cho danh sách.                  <dl>     <dt>HTML</dt>     <dd>Ngôn ngữ đánh dấu siêu văn bản</dd>     <dt>CSS</dt>     <dd>Ngôn ngữ định dạng siêu văn bản</dd>     <dt>JavaScript</dt>     <dd>Ngôn ngữ lập trình client-side</dd> </dl>                         code                                       Bạn có thể sử dụng thẻ <code> để tạo kiểu chữ cho mã nguồn.                  <p>Các phần tử HTML như:<code>div</code>, <code>p</code> có <code>display: block;</code>.</p>                         kbd                                       Bạn có thể sử dụng thẻ <kbd> để tạo kiểu chữ cho phím bấm.                  <p>Để mở Developer Tools trong trình duyệt Chrome, bạn nhấn tổ hợp phím <kbd>ctrl+shift+i</kbd> hoặc <kbd>F12</kbd>.</p>                         pre                                       Bạn có thể sử dụng thẻ <pre> để giữ nguyên định dạng của mã                     nguồn.                  <pre>     Đây là một đoạn mã nguồn nằm trong thẻ pre    nó sẽ được hiển   thị bằng font chữ monospace và giữ nguyên định dạng </pre>                         các class khác                  Bạn có thể tham khảo thêm ở bảng sau    Class Mô tả   .lead Tạo kiểu chữ lớn hơn   .text-start Căn lề trái   .text-break Xuống dòng khi vượt quá khung   .text-center Căn giữa   .text-decoration-none Loại bỏ gạch chân trong thẻ a   .text-end Căn lề phải   .text-nowrap Văn bản không ngắt dòng   .text-lowercase Chuyển văn bản thành chữ thường   .text-uppercase Chuyển văn bản thành chữ hoa   .text-capitalize Chuyển văn bản thành chữ in hoa đầu từ   .initialism Hiển thị văn bản bên trong phần tử <abbr> với cỡ chữ nhỏ hơn một chút   .list-unstyled Loại bỏ dấu đầu dòng của danh sách   .list-inline Hiển thị danh sách theo chiều ngang. Sử dụng kết hợp thêm class                                 .list-inline-item vào thẻ li"
    },
    {
        "title": "h1 - h6",
        "content": "h1 - h6                                       Bootstrap có những kiểu mặc định cho các thẻ h1 - h6 như sau:                  <h1>Heading 1</h1> <h2>Heading 2</h2> <h3>Heading 3</h3> <h4>Heading 4</h4> <h5>Heading 5</h5> <h6>Heading 6</h6>                       Đồng thời bạn có thể dùng các class h1 - h6 cho những thẻ khác nếu bạn muốn áp dụng phong cách của                     các thẻ tiêu đề."
    },
    {
        "title": "Display heading",
        "content": "Display heading                                       Bootstrap cung cấp các class display-1 đến display-6 để tạo kiểu tiêu đề lớn hơn so với các thẻ h1 -                     h6.                  <h1 class=\"display-1\">Display 1</h1> <h2 class=\"display-2\">Display 2</h2> <h3 class=\"display-3\">Display 3</h3> <h4 class=\"display-4\">Display 4</h4> <h5 class=\"display-5\">Display 5</h5> <h6 class=\"display-6\">Display 6</h6>"
    },
    {
        "title": "small text",
        "content": "small text                                       trong bosstrap 5, bạn có thể dử dụng thẻ <small> hoặc thêm                     class .small vào thẻ để tạo kiểu chữ nhỏ.                  <h1>Heading 1 <small>small text</small></h1> <h1>Heading 1 <span class=\"small\">small text</span></h1>"
    },
    {
        "title": "mark",
        "content": "mark                                       Bạn có thể sử dụng thẻ <mark> hoặc class .mark để tạo kiểu chữ được đánh dấu.                  <p>Đây là một đoạn văn để test, <mark>còn đây là phần được đánh dấu</mark> có màu nổi bật.</p> <p>Đây là một đoạn văn để test, <span class=\"mark\">còn đây là phần được đánh dấu</span> có màu nổi bật.</p>"
    },
    {
        "title": "abbr",
        "content": "abbr                                       Bạn có thể sử dụng thẻ <abbr> để tạo chú thích cho văn bản                     viết tắt với viền chấm ở dưới và có dấu chấm hỏi khi di chuột qua.                  <p><abbr title=\"HyperText Markup Language\">HTML</abbr> không phải ngôn ngữ lập trình.</p>"
    },
    {
        "title": "blockquote",
        "content": "blockquote                                       Bạn có thể sử dụng thẻ <blockquote> với class .blockquote để mô tả nội dung trích dẫn. Đồng thời bạn có thể sử                     dụng thẻ <footer> với class .blockquote-footer để thêm thông tin về người viết.                  <blockquote class=\"blockquote\">     <p>Từ ấy trong tôi bừng nắng hạ.<br>Mặt trời chân lí chói qua tim.<br>Hồn tôi là một vườn hoa lá.<br>Rất đậm hương và rộn tiếng chim.</p>     <footer class=\"blockquote-footer\">Tố Hữu - Từ Ấy</footer> </blockquote>"
    },
    {
        "title": "dl",
        "content": "dl                                       Bạn có thể sử dụng thẻ <dl> để tạo danh sách định nghĩa.                     Trong đó, thẻ <dt> để tạo tiêu đề cho danh sách, thẻ <dd> để tạo nội dung cho danh sách.                  <dl>     <dt>HTML</dt>     <dd>Ngôn ngữ đánh dấu siêu văn bản</dd>     <dt>CSS</dt>     <dd>Ngôn ngữ định dạng siêu văn bản</dd>     <dt>JavaScript</dt>     <dd>Ngôn ngữ lập trình client-side</dd> </dl>"
    },
    {
        "title": "code",
        "content": "code                                       Bạn có thể sử dụng thẻ <code> để tạo kiểu chữ cho mã nguồn.                  <p>Các phần tử HTML như:<code>div</code>, <code>p</code> có <code>display: block;</code>.</p>"
    },
    {
        "title": "kbd",
        "content": "kbd                                       Bạn có thể sử dụng thẻ <kbd> để tạo kiểu chữ cho phím bấm.                  <p>Để mở Developer Tools trong trình duyệt Chrome, bạn nhấn tổ hợp phím <kbd>ctrl+shift+i</kbd> hoặc <kbd>F12</kbd>.</p>"
    },
    {
        "title": "pre",
        "content": "pre                                       Bạn có thể sử dụng thẻ <pre> để giữ nguyên định dạng của mã                     nguồn.                  <pre>     Đây là một đoạn mã nguồn nằm trong thẻ pre    nó sẽ được hiển   thị bằng font chữ monospace và giữ nguyên định dạng </pre>"
    },
    {
        "title": "các class khác",
        "content": "các class khác                  Bạn có thể tham khảo thêm ở bảng sau    Class Mô tả   .lead Tạo kiểu chữ lớn hơn   .text-start Căn lề trái   .text-break Xuống dòng khi vượt quá khung   .text-center Căn giữa   .text-decoration-none Loại bỏ gạch chân trong thẻ a   .text-end Căn lề phải   .text-nowrap Văn bản không ngắt dòng   .text-lowercase Chuyển văn bản thành chữ thường   .text-uppercase Chuyển văn bản thành chữ hoa   .text-capitalize Chuyển văn bản thành chữ in hoa đầu từ   .initialism Hiển thị văn bản bên trong phần tử <abbr> với cỡ chữ nhỏ hơn một chút   .list-unstyled Loại bỏ dấu đầu dòng của danh sách   .list-inline Hiển thị danh sách theo chiều ngang. Sử dụng kết hợp thêm class                                 .list-inline-item vào thẻ li"
    },
    {
        "title": "bosstrap 5 - color",
        "content": "bosstrap 5 - color                               Bootstrap 5 có một số lớp theo ngữ cảnh có thể được sử dụng để cung cấp \"ý nghĩa thông qua màu sắc\".                                    text color                                       Bạn có thể sử dụng các class text- để thay đổi màu chữ.                  <p class=\"text-primary\">Primary text.</p> <p class=\"text-secondary\">Secondary text.</p> <p class=\"text-success\">Success text.</p> <p class=\"text-danger\">Danger text.</p> <p class=\"text-warning\">Warning text.</p> <p class=\"text-info\">Info text.</p> <p class=\"text-light bg-dark\">Light text.</p> <p class=\"text-dark\">Dark text.</p> <p class=\"text-body\">Body text.</p> <p class=\"text-muted\">Muted text.</p> <p class=\"text-white bg-dark\">White text.</p> <p class=\"text-black-50\">Black 50 text.</p> <p class=\"text-white-50 bg-dark\">White 50 text.</p>                         background color                                       Bạn có thể sử dụng các class bg- để thay đổi màu nền.                  <p class=\"bg-primary text-white\">Primary background.</p> <p class=\"bg-secondary text-white\">Secondary background.</p> <p class=\"bg-success text-white\">Success background.</p> <p class=\"bg-danger text-white\">Danger background.</p> <p class=\"bg-warning text-white\">Warning background.</p> <p class=\"bg-info text-white\">Info background.</p> <p class=\"bg-light\">Light background.</p> <p class=\"bg-dark text-white\">Dark background.</p> <p class=\"bg-white\">White background.</p>"
    },
    {
        "title": "text color",
        "content": "text color                                       Bạn có thể sử dụng các class text- để thay đổi màu chữ.                  <p class=\"text-primary\">Primary text.</p> <p class=\"text-secondary\">Secondary text.</p> <p class=\"text-success\">Success text.</p> <p class=\"text-danger\">Danger text.</p> <p class=\"text-warning\">Warning text.</p> <p class=\"text-info\">Info text.</p> <p class=\"text-light bg-dark\">Light text.</p> <p class=\"text-dark\">Dark text.</p> <p class=\"text-body\">Body text.</p> <p class=\"text-muted\">Muted text.</p> <p class=\"text-white bg-dark\">White text.</p> <p class=\"text-black-50\">Black 50 text.</p> <p class=\"text-white-50 bg-dark\">White 50 text.</p>"
    },
    {
        "title": "background color",
        "content": "background color                                       Bạn có thể sử dụng các class bg- để thay đổi màu nền.                  <p class=\"bg-primary text-white\">Primary background.</p> <p class=\"bg-secondary text-white\">Secondary background.</p> <p class=\"bg-success text-white\">Success background.</p> <p class=\"bg-danger text-white\">Danger background.</p> <p class=\"bg-warning text-white\">Warning background.</p> <p class=\"bg-info text-white\">Info background.</p> <p class=\"bg-light\">Light background.</p> <p class=\"bg-dark text-white\">Dark background.</p> <p class=\"bg-white\">White background.</p>"
    },
    {
        "title": "bosstrap 5 - table",
        "content": "bosstrap 5 - table                               Bootstrap 5 cung cấp một số class để tạo bảng dễ dàng và nhanh chóng.                                    bảng đơn giản                                       Bạn có thể sử dụng class .table để tạo bảng đơn giản.                  <table class=\"table\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có hàng sọc                                       Bạn có thể sử dụng class .table-striped để tạo bảng có hàng sọc.                  <table class=\"table table-striped\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có đường viền                                       Bạn có thể sử dụng class .table-bordered để tạo bảng có đường                     viền.                  <table class=\"table table-bordered\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         bảng có hiệu ứng hover                                       Bạn có thể sử dụng class .table-hover để tạo bảng có hiệu ứng                     hover.                  <table class=\"table table-hover\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         Bảng tối                                       Bạn có thể sử dụng class .table-dark để tạo bảng có màu nền tối.                  <table class=\"table table-dark\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                       Bạn cũng có thể kết hợp các class trên để tạo bảng tối theo ý muốn.                                         Bảng không có border                                       Bạn có thể sử dụng class .table-borderless để tạo bảng không có                     border.                  <table class=\"table table-borderless\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         Bảng có màu theo ngữ cảnh                                       Bạn có thể sử dụng class .table-{context} để tạo bảng có màu theo                     ngữ cảnh.                  <table class=\"table\">     <thead>         <tr>             <th>Ngữ cảnh</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Mặc định</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr class=\"table-primary\">             <td>Primary</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr class=\"table-success\">             <td>Success</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>         <tr class=\"table-danger\">             <td>Danger</td>             <td>Dòng 4, Cột 2</td>             <td>Dòng 4, Cột 3</td>         </tr>         <tr class=\"table-warning\">             <td>Warning</td>             <td>Dòng 5, Cột 2</td>             <td>Dòng 5, Cột 3</td>         </tr>         <tr class=\"table-info\">             <td>Info</td>             <td>Dòng 6, Cột 2</td>             <td>Dòng 6, Cột 3</td>         </tr>         <tr class=\"table-light\">             <td>Light</td>             <td>Dòng 7, Cột 2</td>             <td>Dòng 7, Cột 3</td>         </tr>         <tr class=\"table-dark\">             <td>Dark</td>             <td>Dòng 8, Cột 2</td>             <td>Dòng 8, Cột 3</td>         </tr>         <tr class=\"table-active\">             <td>Active</td>             <td>Dòng 9, Cột 2</td>             <td>Dòng 9, Cột 3</td>         </tr>         <tr class=\"table-secondary\">             <td>Secondary</td>             <td>Dòng 10, Cột 2</td>             <td>Dòng 10, Cột 3</td>         </tr>     </tbody> </table>                       Bạn có thể thêm class vào thẻ table để thay đổi màu của toàn bảng,                     thêm class vào thẻ thead để thay đổi màu của tiêu đề,                     thêm class vào thẻ tbody để thay đổi màu của nội dung,                     thêm class vào thẻ tr để thay đổi màu của dòng,                     thêm class vào thẻ th hoặc td để thay đổi màu của từng ô.                                         Bảng nhỏ hơn                                       Bạn có thể sử dụng class .table-sm để tạo bảng nhỏ hơn.                  <table class=\"table table-sm\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                         responsive table                                       Bạn có thể sử dụng class .table-responsive để tạo bảng có thể cuộn                     ngang khi màn hình nhỏ.                  <div class=\"container mt-3\">      <div class=\"table-responsive\">         <table class=\"table table-bordered\">             <thead>                 <tr>                     <th>1</th>                     <th>2</th>                     <th>3</th>                     <th>4</th>                     <th>5</th>                     <th>6</th>                     <th>7</th>                     <th>8</th>                     <th>9</th>                     <th>10</th>                     <th>11</th>                     <th>12</th>                     <th>13</th>                     <th>14</th>                     <th>15</th>                     <th>16</th>                 </tr>             </thead>             <tbody>                 <tr>                     <td>Cột 1</td>                     <td>Cột 2</td>                     <td>Cột 3</td>                     <td>Cột 4</td>                     <td>Cột 5</td>                     <td>Cột 6</td>                     <td>Cột 7</td>                     <td>Cột 8</td>                     <td>Cột 9</td>                     <td>Cột 10</td>                     <td>Cột 11</td>                     <td>Cột 12</td>                     <td>Cột 13</td>                     <td>Cột 14</td>                     <td>Cột 15</td>                     <td>Cột 16</td>                 </tr>             </tbody>         </table>     </div> </div>"
    },
    {
        "title": "bảng đơn giản",
        "content": "bảng đơn giản                                       Bạn có thể sử dụng class .table để tạo bảng đơn giản.                  <table class=\"table\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "bảng có hàng sọc",
        "content": "bảng có hàng sọc                                       Bạn có thể sử dụng class .table-striped để tạo bảng có hàng sọc.                  <table class=\"table table-striped\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "bảng có đường viền",
        "content": "bảng có đường viền                                       Bạn có thể sử dụng class .table-bordered để tạo bảng có đường                     viền.                  <table class=\"table table-bordered\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "bảng có hiệu ứng hover",
        "content": "bảng có hiệu ứng hover                                       Bạn có thể sử dụng class .table-hover để tạo bảng có hiệu ứng                     hover.                  <table class=\"table table-hover\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "Bảng tối",
        "content": "Bảng tối                                       Bạn có thể sử dụng class .table-dark để tạo bảng có màu nền tối.                  <table class=\"table table-dark\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>                       Bạn cũng có thể kết hợp các class trên để tạo bảng tối theo ý muốn."
    },
    {
        "title": "Bảng không có border",
        "content": "Bảng không có border                                       Bạn có thể sử dụng class .table-borderless để tạo bảng không có                     border.                  <table class=\"table table-borderless\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "Bảng có màu theo ngữ cảnh",
        "content": "Bảng có màu theo ngữ cảnh                                       Bạn có thể sử dụng class .table-{context} để tạo bảng có màu theo                     ngữ cảnh.                  <table class=\"table\">     <thead>         <tr>             <th>Ngữ cảnh</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Mặc định</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr class=\"table-primary\">             <td>Primary</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr class=\"table-success\">             <td>Success</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>         <tr class=\"table-danger\">             <td>Danger</td>             <td>Dòng 4, Cột 2</td>             <td>Dòng 4, Cột 3</td>         </tr>         <tr class=\"table-warning\">             <td>Warning</td>             <td>Dòng 5, Cột 2</td>             <td>Dòng 5, Cột 3</td>         </tr>         <tr class=\"table-info\">             <td>Info</td>             <td>Dòng 6, Cột 2</td>             <td>Dòng 6, Cột 3</td>         </tr>         <tr class=\"table-light\">             <td>Light</td>             <td>Dòng 7, Cột 2</td>             <td>Dòng 7, Cột 3</td>         </tr>         <tr class=\"table-dark\">             <td>Dark</td>             <td>Dòng 8, Cột 2</td>             <td>Dòng 8, Cột 3</td>         </tr>         <tr class=\"table-active\">             <td>Active</td>             <td>Dòng 9, Cột 2</td>             <td>Dòng 9, Cột 3</td>         </tr>         <tr class=\"table-secondary\">             <td>Secondary</td>             <td>Dòng 10, Cột 2</td>             <td>Dòng 10, Cột 3</td>         </tr>     </tbody> </table>                       Bạn có thể thêm class vào thẻ table để thay đổi màu của toàn bảng,                     thêm class vào thẻ thead để thay đổi màu của tiêu đề,                     thêm class vào thẻ tbody để thay đổi màu của nội dung,                     thêm class vào thẻ tr để thay đổi màu của dòng,                     thêm class vào thẻ th hoặc td để thay đổi màu của từng ô."
    },
    {
        "title": "Bảng nhỏ hơn",
        "content": "Bảng nhỏ hơn                                       Bạn có thể sử dụng class .table-sm để tạo bảng nhỏ hơn.                  <table class=\"table table-sm\">     <thead>         <tr>             <th>Tiêu Đề 1</th>             <th>Tiêu Đề 2</th>             <th>Tiêu Đề 3</th>         </tr>     </thead>     <tbody>         <tr>             <td>Dòng 1, Cột 1</td>             <td>Dòng 1, Cột 2</td>             <td>Dòng 1, Cột 3</td>         </tr>         <tr>             <td>Dòng 2, Cột 1</td>             <td>Dòng 2, Cột 2</td>             <td>Dòng 2, Cột 3</td>         </tr>         <tr>             <td>Dòng 3, Cột 1</td>             <td>Dòng 3, Cột 2</td>             <td>Dòng 3, Cột 3</td>         </tr>     </tbody> </table>"
    },
    {
        "title": "responsive table",
        "content": "responsive table                                       Bạn có thể sử dụng class .table-responsive để tạo bảng có thể cuộn                     ngang khi màn hình nhỏ.                  <div class=\"container mt-3\">      <div class=\"table-responsive\">         <table class=\"table table-bordered\">             <thead>                 <tr>                     <th>1</th>                     <th>2</th>                     <th>3</th>                     <th>4</th>                     <th>5</th>                     <th>6</th>                     <th>7</th>                     <th>8</th>                     <th>9</th>                     <th>10</th>                     <th>11</th>                     <th>12</th>                     <th>13</th>                     <th>14</th>                     <th>15</th>                     <th>16</th>                 </tr>             </thead>             <tbody>                 <tr>                     <td>Cột 1</td>                     <td>Cột 2</td>                     <td>Cột 3</td>                     <td>Cột 4</td>                     <td>Cột 5</td>                     <td>Cột 6</td>                     <td>Cột 7</td>                     <td>Cột 8</td>                     <td>Cột 9</td>                     <td>Cột 10</td>                     <td>Cột 11</td>                     <td>Cột 12</td>                     <td>Cột 13</td>                     <td>Cột 14</td>                     <td>Cột 15</td>                     <td>Cột 16</td>                 </tr>             </tbody>         </table>     </div> </div>"
    },
    {
        "title": "bosstrap 5 - image",
        "content": "bosstrap 5 - image                               Bootstrap 5 cung cấp một số class để tùy chỉnh hình ảnh dễ dàng và nhanh chóng.                                    hình ảnh bo góc                                       Bạn có thể sử dụng class .rounded để tạo hình bo góc.                  <img src=\"image.jpg\" class=\"rounded\" alt=\"Hình bo góc\">                         hình ảnh bo tròn                                       Bạn có thể sử dụng class .rounded-circle để tạo hình bo tròn.                  <img src=\"image.jpg\" class=\"rounded-circle\" alt=\"Hình bo tròn\">                         thubmnail - hình ảnh có viền                                       Bạn có thể sử dụng class .img-thumbnail để tạo hình ảnh có viền.                  <img src=\"image.jpg\" class=\"img-thumbnail\" alt=\"Hình ảnh có viền\">                         căn chỉnh hình ảnh                                       Bạn có thể sử dụng class .float-{direction} để căn chỉnh hình ảnh                     theo hướng.                  <img src=\"image.jpg\" class=\"float-start\" alt=\"Hình ảnh căn trái\"> <img src=\"image.jpg\" class=\"float-end\" alt=\"Hình ảnh căn phải\">                         căn giữa hình ảnh                                       Bạn có thể sử dụng class .mx-auto(margin: auto) và .d-block(display: block) để căn giữa hình ảnh.                  <img src=\"image.jpg\" class=\"mx-auto d-block\" alt=\"Hình ảnh căn giữa\">                         hình ảnh đáp ứng                                       Bạn có thể sử dụng class .img-fluid để tạo hình ảnh đáp ứng.                  <div class=\"container mt-3\">     <h2>Hình ảnh đáp ứng</h2>     <p>.img-fluid class giúp hình ảnh có tỉ lệ phù hợp với phần tử cha:</p>     <img src=\"image.jpg\" class=\"img-fluid\" alt=\"Hình ảnh đáp ứng\">  </div>"
    },
    {
        "title": "hình ảnh bo góc",
        "content": "hình ảnh bo góc                                       Bạn có thể sử dụng class .rounded để tạo hình bo góc.                  <img src=\"image.jpg\" class=\"rounded\" alt=\"Hình bo góc\">"
    },
    {
        "title": "hình ảnh bo tròn",
        "content": "hình ảnh bo tròn                                       Bạn có thể sử dụng class .rounded-circle để tạo hình bo tròn.                  <img src=\"image.jpg\" class=\"rounded-circle\" alt=\"Hình bo tròn\">"
    },
    {
        "title": "thubmnail - hình ảnh có viền",
        "content": "thubmnail - hình ảnh có viền                                       Bạn có thể sử dụng class .img-thumbnail để tạo hình ảnh có viền.                  <img src=\"image.jpg\" class=\"img-thumbnail\" alt=\"Hình ảnh có viền\">"
    },
    {
        "title": "căn chỉnh hình ảnh",
        "content": "căn chỉnh hình ảnh                                       Bạn có thể sử dụng class .float-{direction} để căn chỉnh hình ảnh                     theo hướng.                  <img src=\"image.jpg\" class=\"float-start\" alt=\"Hình ảnh căn trái\"> <img src=\"image.jpg\" class=\"float-end\" alt=\"Hình ảnh căn phải\">"
    },
    {
        "title": "căn giữa hình ảnh",
        "content": "căn giữa hình ảnh                                       Bạn có thể sử dụng class .mx-auto(margin: auto) và .d-block(display: block) để căn giữa hình ảnh.                  <img src=\"image.jpg\" class=\"mx-auto d-block\" alt=\"Hình ảnh căn giữa\">"
    },
    {
        "title": "hình ảnh đáp ứng",
        "content": "hình ảnh đáp ứng                                       Bạn có thể sử dụng class .img-fluid để tạo hình ảnh đáp ứng.                  <div class=\"container mt-3\">     <h2>Hình ảnh đáp ứng</h2>     <p>.img-fluid class giúp hình ảnh có tỉ lệ phù hợp với phần tử cha:</p>     <img src=\"image.jpg\" class=\"img-fluid\" alt=\"Hình ảnh đáp ứng\">  </div>"
    },
    {
        "title": "Jumbotron trong Bootstrap 5",
        "content": "Jumbotron trong Bootstrap 5                               Jumbotron là một thành phần quan trọng trong, nó giúp tạo ra một phần tử chứa nội dung lớn, thu hút                 người xem.                 Jumbotron không còn được hỗ trợ trong Bootstrap 5, nhưng bạn vẫn có thể tạo một Jumbotron bằng cách sử                 dụng các class của Bootstrap 5.              <div class=\"container mt-3\">     <div class=\"mt-4 p-5 bg-primary text-white rounded\">         <h1>Tiêu đề lớn</h1>         <p>Nội dung lớn</p>     </div> </div>"
    },
    {
        "title": "Bootstrap 5 - Alert",
        "content": "Bootstrap 5 - Alert                               Bootstrap 5 cung cấp một số class để tạo thông báo dễ dàng và nhanh chóng.                                    Thông báo cơ bản                                       Thông báo được tạo bởi một div với class .alert và một class ngữ                     cảnh                  <div class=\"alert alert-primary\" role=\"alert\">     <strong>Primary!</strong> Đây là thông báo primary. </div> <div class=\"alert alert-secondary\" role=\"alert\">     <strong>Secondary!</strong> Đây là thông báo secondary. </div> <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success. </div> <div class=\"alert alert-danger\" role=\"alert\">     <strong>Danger!</strong> Đây là thông báo danger. </div> <div class=\"alert alert-warning\" role=\"alert\">     <strong>Warning!</strong> Đây là thông báo warning. </div> <div class=\"alert alert-info\" role=\"alert\">     <strong>Info!</strong> Đây là thông báo info. </div> <div class=\"alert alert-light\" role=\"alert\">     <strong>Light!</strong> Đây là thông báo light. </div> <div class=\"alert alert-dark\" role=\"alert\">     <strong>Dark!</strong> Đây là thông báo dark. </div>                         Thông báo có liên kết                                       Bạn có thể thêm một liên kết vào thông báo bằng cách thêm một thẻ a với class                     .alert-link vào bên trong thông báo.                  <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success với <a href=\"#\" class=\"alert-link\">liên kết</a>. </div>                         Thông báo có nút đóng                                       Bạn có thể thêm một nút đóng vào thông báo bằng cách thêm một thẻ button với class                     .btn-close vào bên trong thông báo.                  <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Danger!</strong> Đây là thông báo danger với nút đóng. </div>                         Thông báo với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào thông báo bằng cách thêm class .fade                     và                     .show vào thông báo.                  <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Success!</strong> Đây là thông báo success với hiệu ứng. </div>"
    },
    {
        "title": "Thông báo cơ bản",
        "content": "Thông báo cơ bản                                       Thông báo được tạo bởi một div với class .alert và một class ngữ                     cảnh                  <div class=\"alert alert-primary\" role=\"alert\">     <strong>Primary!</strong> Đây là thông báo primary. </div> <div class=\"alert alert-secondary\" role=\"alert\">     <strong>Secondary!</strong> Đây là thông báo secondary. </div> <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success. </div> <div class=\"alert alert-danger\" role=\"alert\">     <strong>Danger!</strong> Đây là thông báo danger. </div> <div class=\"alert alert-warning\" role=\"alert\">     <strong>Warning!</strong> Đây là thông báo warning. </div> <div class=\"alert alert-info\" role=\"alert\">     <strong>Info!</strong> Đây là thông báo info. </div> <div class=\"alert alert-light\" role=\"alert\">     <strong>Light!</strong> Đây là thông báo light. </div> <div class=\"alert alert-dark\" role=\"alert\">     <strong>Dark!</strong> Đây là thông báo dark. </div>"
    },
    {
        "title": "Thông báo có liên kết",
        "content": "Thông báo có liên kết                                       Bạn có thể thêm một liên kết vào thông báo bằng cách thêm một thẻ a với class                     .alert-link vào bên trong thông báo.                  <div class=\"alert alert-success\" role=\"alert\">     <strong>Success!</strong> Đây là thông báo success với <a href=\"#\" class=\"alert-link\">liên kết</a>. </div>"
    },
    {
        "title": "Thông báo có nút đóng",
        "content": "Thông báo có nút đóng                                       Bạn có thể thêm một nút đóng vào thông báo bằng cách thêm một thẻ button với class                     .btn-close vào bên trong thông báo.                  <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Danger!</strong> Đây là thông báo danger với nút đóng. </div>"
    },
    {
        "title": "Thông báo với hiệu ứng",
        "content": "Thông báo với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào thông báo bằng cách thêm class .fade                     và                     .show vào thông báo.                  <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">     <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>     <strong>Success!</strong> Đây là thông báo success với hiệu ứng. </div>"
    },
    {
        "title": "Bootstrap 5 - Button",
        "content": "Bootstrap 5 - Button                                    Button cơ bản                                       Bạn có thể tạo button cơ bản bằng cách sử dụng class .btn kết hợp                     với class ngữ cảnh.                  <button type=\"button\" class=\"btn\">Basic</button> <button type=\"button\" class=\"btn btn-primary\">Primary</button> <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-success\">Success</button> <button type=\"button\" class=\"btn btn-info\">Info</button> <button type=\"button\" class=\"btn btn-warning\">Warning</button> <button type=\"button\" class=\"btn btn-danger\">Danger</button> <button type=\"button\" class=\"btn btn-dark\">Dark</button> <button type=\"button\" class=\"btn btn-light\">Light</button> <button type=\"button\" class=\"btn btn-link\">Link</button>                       Bạn cũng có thể thêm class .btn-lg hoặc .btn-sm để tạo button lớn hoặc nhỏ.                                       Bạn cũng có thể dùng cho thẻ <a>, <input>, <button>.                                         Button với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào button bằng cách sử dụng class .btn                     và                     .btn-outline.                  <button type=\"button\" class=\"btn btn-outline-primary\">Primary</button> <button type=\"button\" class=\"btn btn-outline-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-outline-success\">Success</button> <button type=\"button\" class=\"btn btn-outline-info\">Info</button> <button type=\"button\" class=\"btn btn-outline-warning\">Warning</button> <button type=\"button\" class=\"btn btn-outline-danger\">Danger</button> <button type=\"button\" class=\"btn btn-outline-dark\">Dark</button> <button type=\"button\" class=\"btn btn-outline-light\">Light</button>                         full width button                                       Bạn có thể tạo button full width bằng cách sử dụng class .d-grid                     cho phần tử cha chứa button.                  <div class=\"d-grid\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>  Nếu bạn muốn kiểm soát khoảng cách giữa các button, có thể thêm class .gap-* <div class=\"d-grid gap-2\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>                         button active/disable                                       Bạn có thể tạo button active hoặc disable bằng cách thêm class .active hoặc .disabled.                  <button type=\"button\" class=\"btn btn-primary active\">Active</button> <button type=\"button\" class=\"btn btn-primary disabled\">Disabled</button>   Lưu ý: class .disabled chỉ làm cho button trở nên mờ đi, không thể click được,                     nếu muốn button không thể click được, bạn cần thêm thuộc tính disabled vào button.                                         spinner button                                       Bạn có thể tạo button với spinner bằng cách thêm thẻ <span>                     với class .spinner-border hoặc .spinner-grow vào bên trong button.                  <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-border spinner-border-sm\"></span>     Loading... </button> <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-grow spinner-grow-sm\"></span>     Loading... </button>"
    },
    {
        "title": "Button cơ bản",
        "content": "Button cơ bản                                       Bạn có thể tạo button cơ bản bằng cách sử dụng class .btn kết hợp                     với class ngữ cảnh.                  <button type=\"button\" class=\"btn\">Basic</button> <button type=\"button\" class=\"btn btn-primary\">Primary</button> <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-success\">Success</button> <button type=\"button\" class=\"btn btn-info\">Info</button> <button type=\"button\" class=\"btn btn-warning\">Warning</button> <button type=\"button\" class=\"btn btn-danger\">Danger</button> <button type=\"button\" class=\"btn btn-dark\">Dark</button> <button type=\"button\" class=\"btn btn-light\">Light</button> <button type=\"button\" class=\"btn btn-link\">Link</button>                       Bạn cũng có thể thêm class .btn-lg hoặc .btn-sm để tạo button lớn hoặc nhỏ.                                       Bạn cũng có thể dùng cho thẻ <a>, <input>, <button>."
    },
    {
        "title": "Button với hiệu ứng",
        "content": "Button với hiệu ứng                                       Bạn có thể thêm hiệu ứng vào button bằng cách sử dụng class .btn                     và                     .btn-outline.                  <button type=\"button\" class=\"btn btn-outline-primary\">Primary</button> <button type=\"button\" class=\"btn btn-outline-secondary\">Secondary</button> <button type=\"button\" class=\"btn btn-outline-success\">Success</button> <button type=\"button\" class=\"btn btn-outline-info\">Info</button> <button type=\"button\" class=\"btn btn-outline-warning\">Warning</button> <button type=\"button\" class=\"btn btn-outline-danger\">Danger</button> <button type=\"button\" class=\"btn btn-outline-dark\">Dark</button> <button type=\"button\" class=\"btn btn-outline-light\">Light</button>"
    },
    {
        "title": "full width button",
        "content": "full width button                                       Bạn có thể tạo button full width bằng cách sử dụng class .d-grid                     cho phần tử cha chứa button.                  <div class=\"d-grid\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>  Nếu bạn muốn kiểm soát khoảng cách giữa các button, có thể thêm class .gap-* <div class=\"d-grid gap-2\">     <button type=\"button\" class=\"btn btn-primary\">Primary</button>     <button type=\"button\" class=\"btn btn-secondary\">Secondary</button> </div>"
    },
    {
        "title": "button active/disable",
        "content": "button active/disable                                       Bạn có thể tạo button active hoặc disable bằng cách thêm class .active hoặc .disabled.                  <button type=\"button\" class=\"btn btn-primary active\">Active</button> <button type=\"button\" class=\"btn btn-primary disabled\">Disabled</button>   Lưu ý: class .disabled chỉ làm cho button trở nên mờ đi, không thể click được,                     nếu muốn button không thể click được, bạn cần thêm thuộc tính disabled vào button."
    },
    {
        "title": "spinner button",
        "content": "spinner button                                       Bạn có thể tạo button với spinner bằng cách thêm thẻ <span>                     với class .spinner-border hoặc .spinner-grow vào bên trong button.                  <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-border spinner-border-sm\"></span>     Loading... </button> <button type=\"button\" class=\"btn btn-primary\">     <span class=\"spinner-grow spinner-grow-sm\"></span>     Loading... </button>"
    },
    {
        "title": "Button group",
        "content": "Button group                               Bạn có thể tạo button group bằng cách sử dụng class .btn-group cho                 phần tử cha chứa button.              <div class=\"btn-group\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <button type=\"button\" class=\"btn btn-primary\">Button 3</button> </div>                   Bạn cũng có thể thêm class .btn-group-vertical để tạo button group                 dọc.                 <div class=\"btn-group-vertical\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <button type=\"button\" class=\"btn btn-primary\">Button 3</button> </div>                         Kết hợp với dropdown                                       Bạn có thể kết hợp button group với dropdown bằng cách sử dụng class .dropdown-toggle cho button trigger dropdown.                  <div class=\"btn-group\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <div class=\"btn-group\">         <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Button 3</button>         <div class=\"dropdown-menu\">             <a class=\"dropdown-item\" href=\"#\">Dropdown 1</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 2</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 3</a>         </div>     </div> </div>"
    },
    {
        "title": "Kết hợp với dropdown",
        "content": "Kết hợp với dropdown                                       Bạn có thể kết hợp button group với dropdown bằng cách sử dụng class .dropdown-toggle cho button trigger dropdown.                  <div class=\"btn-group\">     <button type=\"button\" class=\"btn btn-primary\">Button 1</button>     <button type=\"button\" class=\"btn btn-primary\">Button 2</button>     <div class=\"btn-group\">         <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Button 3</button>         <div class=\"dropdown-menu\">             <a class=\"dropdown-item\" href=\"#\">Dropdown 1</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 2</a>             <a class=\"dropdown-item\" href=\"#\">Dropdown 3</a>         </div>     </div> </div>"
    },
    {
        "title": "Bootstrap 5 - Bagde",
        "content": "Bootstrap 5 - Bagde                               Badge là một thành phần quan trọng trong Bootstrap 5, nó giúp hiển thị thông tin hoặc trạng thái của một                 phần tử.                                    Badge cơ bản                                       Bạn có thể tạo badge cơ bản bằng cách sử dụng class .badge kết hợp                     với class ngữ cảnh.                  <span class=\"badge bg-primary\">Primary</span> <span class=\"badge bg-secondary\">Secondary</span> <span class=\"badge bg-success\">Success</span> <span class=\"badge bg-danger\">Danger</span> <span class=\"badge bg-warning text-dark\">Warning</span> <span class=\"badge bg-info\">Info</span> <span class=\"badge bg-light text-dark\">Light</span> <span class=\"badge bg-dark\">Dark</span>                         pill badge                                       Bạn có thể tạo pill badge bằng cách thêm class .rounded-pill vào                     badge.                  <span class=\"badge bg-primary rounded-pill\">Primary</span> <span class=\"badge bg-secondary rounded-pill\">Secondary</span> <span class=\"badge bg-success rounded-pill\">Success</span> <span class=\"badge bg-danger rounded-pill\">Danger</span> <span class=\"badge bg-warning text-dark rounded-pill\">Warning</span> <span class=\"badge bg-info rounded-pill\">Info</span> <span class=\"badge bg-light text-dark rounded-pill\">Light</span> <span class=\"badge bg-dark rounded-pill\">Dark</span>                         badge bên trong một button                                       Bạn có thể thêm badge vào bên trong button bằng cách thêm một thẻ <span> class .badge vào bên                     trong button.                  <button type=\"button\" class=\"btn btn-primary\">Thông báo mới <span class=\"badge bg-warning\">4</span></button>"
    },
    {
        "title": "Badge cơ bản",
        "content": "Badge cơ bản                                       Bạn có thể tạo badge cơ bản bằng cách sử dụng class .badge kết hợp                     với class ngữ cảnh.                  <span class=\"badge bg-primary\">Primary</span> <span class=\"badge bg-secondary\">Secondary</span> <span class=\"badge bg-success\">Success</span> <span class=\"badge bg-danger\">Danger</span> <span class=\"badge bg-warning text-dark\">Warning</span> <span class=\"badge bg-info\">Info</span> <span class=\"badge bg-light text-dark\">Light</span> <span class=\"badge bg-dark\">Dark</span>"
    },
    {
        "title": "pill badge",
        "content": "pill badge                                       Bạn có thể tạo pill badge bằng cách thêm class .rounded-pill vào                     badge.                  <span class=\"badge bg-primary rounded-pill\">Primary</span> <span class=\"badge bg-secondary rounded-pill\">Secondary</span> <span class=\"badge bg-success rounded-pill\">Success</span> <span class=\"badge bg-danger rounded-pill\">Danger</span> <span class=\"badge bg-warning text-dark rounded-pill\">Warning</span> <span class=\"badge bg-info rounded-pill\">Info</span> <span class=\"badge bg-light text-dark rounded-pill\">Light</span> <span class=\"badge bg-dark rounded-pill\">Dark</span>"
    },
    {
        "title": "badge bên trong một button",
        "content": "badge bên trong một button                                       Bạn có thể thêm badge vào bên trong button bằng cách thêm một thẻ <span> class .badge vào bên                     trong button.                  <button type=\"button\" class=\"btn btn-primary\">Thông báo mới <span class=\"badge bg-warning\">4</span></button>"
    },
    {
        "title": "Thanh tiến trình trong Bootstrap 5",
        "content": "Thanh tiến trình trong Bootstrap 5                               Thanh tiến trình trong Bootstrap 5 giúp hiển thị tiến trình của một công việc.                                    Thanh tiến trình cơ bản                                       Bạn có thể tạo thanh tiến trình cơ bản bằng cách sử dụng class .progress kết hợp với class ngữ cảnh.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning\" style=\"width: 100%\">100%</div>     </div> </div>                         Thanh tiến trình striped                                       Bạn có thể tạo thanh tiến trình striped bằng cách thêm class .progress-bar-striped vào thanh tiến trình.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar progress-bar-striped\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success progress-bar-striped\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info progress-bar-striped\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning progress-bar-striped\" style=\"width: 100%\">100%</div>     </div> </div>                         Thanh tiến trình animated                                       Bạn có thể tạo thanh tiến trình animated bằng cách thêm class .progress-bar-animated vào thanh tiến trình.                  <div class=\"progress\">     <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\">75%</div> </div>                         Thanh tiến trình multiple                                       Bạn có thể tạo thanh tiến trình multiple bằng cách thêm nhiều thẻ <div> với class .progress-bar vào bên trong thanh tiến trình.                  <div style=\"height: 25px\" class=\"progress\">     <div class=\"progress-bar bg-primary\" style=\"width: 25%\">Tập tin hệ thống</div>     <div class=\"progress-bar bg-success\" style=\"width: 10%\">Tập tin hình ảnh</div>     <div class=\"progress-bar bg-info\" style=\"width: 15%\">Tập tin video</div> </div>"
    },
    {
        "title": "Thanh tiến trình cơ bản",
        "content": "Thanh tiến trình cơ bản                                       Bạn có thể tạo thanh tiến trình cơ bản bằng cách sử dụng class .progress kết hợp với class ngữ cảnh.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning\" style=\"width: 100%\">100%</div>     </div> </div>"
    },
    {
        "title": "Thanh tiến trình striped",
        "content": "Thanh tiến trình striped                                       Bạn có thể tạo thanh tiến trình striped bằng cách thêm class .progress-bar-striped vào thanh tiến trình.                  <div class=\"d-grid gap-4\">     <div class=\"progress\">         <div class=\"progress-bar progress-bar-striped\" style=\"width: 25%\">25%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-success progress-bar-striped\" style=\"width: 50%\">50%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-info progress-bar-striped\" style=\"width: 75%\">75%</div>     </div>     <div class=\"progress\">         <div class=\"progress-bar bg-warning progress-bar-striped\" style=\"width: 100%\">100%</div>     </div> </div>"
    },
    {
        "title": "Thanh tiến trình animated",
        "content": "Thanh tiến trình animated                                       Bạn có thể tạo thanh tiến trình animated bằng cách thêm class .progress-bar-animated vào thanh tiến trình.                  <div class=\"progress\">     <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width: 75%\">75%</div> </div>"
    },
    {
        "title": "Thanh tiến trình multiple",
        "content": "Thanh tiến trình multiple                                       Bạn có thể tạo thanh tiến trình multiple bằng cách thêm nhiều thẻ <div> với class .progress-bar vào bên trong thanh tiến trình.                  <div style=\"height: 25px\" class=\"progress\">     <div class=\"progress-bar bg-primary\" style=\"width: 25%\">Tập tin hệ thống</div>     <div class=\"progress-bar bg-success\" style=\"width: 10%\">Tập tin hình ảnh</div>     <div class=\"progress-bar bg-info\" style=\"width: 15%\">Tập tin video</div> </div>"
    },
    {
        "title": "spinner/loader trong Bootstrap 5",
        "content": "spinner/loader trong Bootstrap 5                                    spinner cơ bản                                       Bạn có thể tạo spinner cơ bản bằng cách sử dụng class .spinner-border hoặc .spinner-grow.                  <div class=\"spinner-border text-muted\" role=\"status\"></div> <div class=\"spinner-grow text-primary\" role=\"status\"></div> <div class=\"spinner-border text-success\" role=\"status\"></div> <div class=\"spinner-grow text-info\" role=\"status\"></div> <div class=\"spinner-border text-warning\" role=\"status\"></div> <div class=\"spinner-grow text-danger\" role=\"status\"></div> <div class=\"spinner-border text-dark\" role=\"status\"></div> <div class=\"spinner-grow text-light\" role=\"status\"></div>                         spinner size                                       Bạn có thể tạo spinner với kích thước khác nhau bằng cách thêm class .spinner-border-sm hoặc .spinner-grow-sm.                  <div class=\"spinner-border spinner-border-sm text-muted\" role=\"status\"></div> <div class=\"spinner-grow spinner-grow-sm text-primary\" role=\"status\"></div>"
    },
    {
        "title": "spinner cơ bản",
        "content": "spinner cơ bản                                       Bạn có thể tạo spinner cơ bản bằng cách sử dụng class .spinner-border hoặc .spinner-grow.                  <div class=\"spinner-border text-muted\" role=\"status\"></div> <div class=\"spinner-grow text-primary\" role=\"status\"></div> <div class=\"spinner-border text-success\" role=\"status\"></div> <div class=\"spinner-grow text-info\" role=\"status\"></div> <div class=\"spinner-border text-warning\" role=\"status\"></div> <div class=\"spinner-grow text-danger\" role=\"status\"></div> <div class=\"spinner-border text-dark\" role=\"status\"></div> <div class=\"spinner-grow text-light\" role=\"status\"></div>"
    },
    {
        "title": "spinner size",
        "content": "spinner size                                       Bạn có thể tạo spinner với kích thước khác nhau bằng cách thêm class .spinner-border-sm hoặc .spinner-grow-sm.                  <div class=\"spinner-border spinner-border-sm text-muted\" role=\"status\"></div> <div class=\"spinner-grow spinner-grow-sm text-primary\" role=\"status\"></div>"
    },
    {
        "title": "pagination trong Bootstrap 5",
        "content": "pagination trong Bootstrap 5                               Bạn có thể tạo pagination trong Bootstrap 5 bằng cách sử dụng class .pagination.                                    pagination cơ bản                                       Bạn có thể tạo pagination cơ bản bằng cách sử dụng class .page-item và .page-link.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination thuộc tính active                                       Bạn có thể tạo pagination với thuộc tính active bằng cách thêm class .active vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination disabled                                       Bạn có thể tạo pagination disabled bằng cách thêm class .disabled                     vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination size                                       Bạn có thể tạo pagination với kích thước khác nhau bằng cách thêm class .pagination-lg hoặc .pagination-sm.                  <nav>     <ul class=\"pagination pagination-lg\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         pagination align                                       Bạn có thể tạo pagination với alignment khác nhau bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-center\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-end\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>                         Breadcrumbs                                       Breadcrumbs giúp người dùng biết được vị trí của mình trong trang web.                                       Bạn có thể tạo breadcrumbs bằng cách sử dụng class .breadcrumb kết                     hợp với class .breadcrumb-item và .breadcrumb-item.active.                  <nav aria-label=\"breadcrumb\">     <ol class=\"breadcrumb\">         <li class=\"breadcrumb-item\"><a href=\"#\">Trang chủ</a></li>         <li class=\"breadcrumb-item\"><a href=\"#\">Danh mục</a></li>         <li class=\"breadcrumb-item active\" aria-current=\"page\">Sản phẩm</li>     </ol> </nav>"
    },
    {
        "title": "pagination cơ bản",
        "content": "pagination cơ bản                                       Bạn có thể tạo pagination cơ bản bằng cách sử dụng class .page-item và .page-link.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>"
    },
    {
        "title": "pagination thuộc tính active",
        "content": "pagination thuộc tính active                                       Bạn có thể tạo pagination với thuộc tính active bằng cách thêm class .active vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>"
    },
    {
        "title": "pagination disabled",
        "content": "pagination disabled                                       Bạn có thể tạo pagination disabled bằng cách thêm class .disabled                     vào thẻ <li>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>"
    },
    {
        "title": "pagination size",
        "content": "pagination size                                       Bạn có thể tạo pagination với kích thước khác nhau bằng cách thêm class .pagination-lg hoặc .pagination-sm.                  <nav>     <ul class=\"pagination pagination-lg\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>"
    },
    {
        "title": "pagination align",
        "content": "pagination align                                       Bạn có thể tạo pagination với alignment khác nhau bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <nav>     <ul class=\"pagination\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-center\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav> <nav>     <ul class=\"pagination justify-content-end\">         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Trước</a></li>         <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">1</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>         <li class=\"page-item\"><a class=\"page-link\" href=\"#\">Sau</a></li>     </ul> </nav>"
    },
    {
        "title": "Breadcrumbs",
        "content": "Breadcrumbs                                       Breadcrumbs giúp người dùng biết được vị trí của mình trong trang web.                                       Bạn có thể tạo breadcrumbs bằng cách sử dụng class .breadcrumb kết                     hợp với class .breadcrumb-item và .breadcrumb-item.active.                  <nav aria-label=\"breadcrumb\">     <ol class=\"breadcrumb\">         <li class=\"breadcrumb-item\"><a href=\"#\">Trang chủ</a></li>         <li class=\"breadcrumb-item\"><a href=\"#\">Danh mục</a></li>         <li class=\"breadcrumb-item active\" aria-current=\"page\">Sản phẩm</li>     </ol> </nav>"
    },
    {
        "title": "list group trong Bootstrap 5",
        "content": "list group trong Bootstrap 5                                    list group cơ bản                                       Bạn có thể tạo list group cơ bản bằng cách sử dụng class .list-group kết hợp với class .list-group-item.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>                         active item                                       Bạn có thể tạo list group với item active bằng cách thêm class .active vào thẻ <li>.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item active\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>                         List group với các liên kết                                       Bạn có thể tạo list group với các liên kết bằng cách sử dụng thẻ <a> thay vì thẻ <li>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         disabled item                                       Bạn có thể tạo list group với item disabled bằng cách thêm class .disabled vào thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 3</a> </div>                         Flush/remove border                                       Bạn có thể tạo list group mà không có border bằng cách thêm class .list-group-flush vào thẻ <div>.                  <div class=\"list-group list-group-flush\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         Thêm số thứ tự cho list group                                       Bạn có thể thêm số thứ tự cho list group bằng cách thêm class <.list-group-numbered> vào bên trong thẻ <div>.                  <div class=\"list-group list-group-numbered\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         list group nằm ngang                                       Bạn có thể tạo list group nằm ngang bằng cách thêm class .list-group-horizontal vào thẻ <div>.                  <div class=\"list-group list-group-horizontal\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>                         list items với class ngữ cảnh                                       Bạn có thể tạo list group với class ngữ cảnh bằng cách thêm class .list-group-item-{contex}.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item Action</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-primary\">Item Primary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-secondary\">Item Secondary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-info\">Item info</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-warning\">Item warning</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-danger\">Item danger</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-success\">Item success</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-dark\">Item dark</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\">Item light</a> </div>                         list group với badge                                       Bạn có thể tạo list group với badge bằng cách thêm thẻ <span> vào bên trong thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Hộp thư đến <span class=\"badge bg-primary\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Quảng cáo <span class=\"badge bg-warning\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Thư nháp <span class=\"badge bg-info\">14</span></a> </div>"
    },
    {
        "title": "list group cơ bản",
        "content": "list group cơ bản                                       Bạn có thể tạo list group cơ bản bằng cách sử dụng class .list-group kết hợp với class .list-group-item.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>"
    },
    {
        "title": "active item",
        "content": "active item                                       Bạn có thể tạo list group với item active bằng cách thêm class .active vào thẻ <li>.                  <ul class=\"list-group\">     <li class=\"list-group-item\">Item 1</li>     <li class=\"list-group-item active\">Item 2</li>     <li class=\"list-group-item\">Item 3</li> </ul>"
    },
    {
        "title": "List group với các liên kết",
        "content": "List group với các liên kết                                       Bạn có thể tạo list group với các liên kết bằng cách sử dụng thẻ <a> thay vì thẻ <li>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>"
    },
    {
        "title": "disabled item",
        "content": "disabled item                                       Bạn có thể tạo list group với item disabled bằng cách thêm class .disabled vào thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action disabled\">Item 3</a> </div>"
    },
    {
        "title": "Flush/remove border",
        "content": "Flush/remove border                                       Bạn có thể tạo list group mà không có border bằng cách thêm class .list-group-flush vào thẻ <div>.                  <div class=\"list-group list-group-flush\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>"
    },
    {
        "title": "Thêm số thứ tự cho list group",
        "content": "Thêm số thứ tự cho list group                                       Bạn có thể thêm số thứ tự cho list group bằng cách thêm class <.list-group-numbered> vào bên trong thẻ <div>.                  <div class=\"list-group list-group-numbered\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>"
    },
    {
        "title": "list group nằm ngang",
        "content": "list group nằm ngang                                       Bạn có thể tạo list group nằm ngang bằng cách thêm class .list-group-horizontal vào thẻ <div>.                  <div class=\"list-group list-group-horizontal\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 1</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 2</a>     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item 3</a> </div>"
    },
    {
        "title": "list items với class ngữ cảnh",
        "content": "list items với class ngữ cảnh                                       Bạn có thể tạo list group với class ngữ cảnh bằng cách thêm class .list-group-item-{contex}.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action\">Item Action</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-primary\">Item Primary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-secondary\">Item Secondary</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-info\">Item info</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-warning\">Item warning</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-danger\">Item danger</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-success\">Item success</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-dark\">Item dark</a>     <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\">Item light</a> </div>"
    },
    {
        "title": "list group với badge",
        "content": "list group với badge                                       Bạn có thể tạo list group với badge bằng cách thêm thẻ <span> vào bên trong thẻ <a>.                  <div class=\"list-group\">     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Hộp thư đến <span class=\"badge bg-primary\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Quảng cáo <span class=\"badge bg-warning\">14</span></a>     <a href=\"#\" class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"> Thư nháp <span class=\"badge bg-info\">14</span></a> </div>"
    },
    {
        "title": "Bootstrap 5 - Card",
        "content": "Bootstrap 5 - Card                                    Card cơ bản                                       Bạn có thể tạo card cơ bản bằng cách sử dụng class .card kết hợp                     với class .card-body.                  <div class=\"card\">     <div class=\"card-body\">         Đây là nội dung card     </div> </div>                         Header và footer                                       Bạn có thể thêm header và footer cho card bằng cách sử dụng class .card-header và .card-footer.                  <div class=\"card\">     <div class=\"card-header\">         Đây là header     </div>     <div class=\"card-body\">         Đây là nội dung card     </div>     <div class=\"card-footer\">         Đây là footer     </div> </div>                         Card với context class                                       Bạn có thể tạo card với class ngữ cảnh bằng cách thêm class .bg-{context} vào thẻ <div>.                  <div class=\"card bg-primary\">     <div class=\"card-body text-white\">         Đây là nội dung card     </div> </div>                         Tiêu đề, văn bản và liên kết                                       Bạn có thể thêm tiêu đề, văn bản và liên kết vào card bằng cách sử dụng class .card-title(h4), .card-text(p) và                     .card-link(a).                  <div class=\"card\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link\">Liên kết</a>         <a href=\"#\" class=\"card-link\">Liên kết khác</a>     </div> </div>                         card với hình ảnh                                       Bạn có thể thêm hình ảnh vào card bằng cách sử dụng class .card-img-top hoặc .card-img-bottom.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>                         card image overlay                                       Bạn có thể tạo card với hình ảnh overlay bằng cách sử dụng class .card-img-overlay.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-img-overlay\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>"
    },
    {
        "title": "Card cơ bản",
        "content": "Card cơ bản                                       Bạn có thể tạo card cơ bản bằng cách sử dụng class .card kết hợp                     với class .card-body.                  <div class=\"card\">     <div class=\"card-body\">         Đây là nội dung card     </div> </div>"
    },
    {
        "title": "Header và footer",
        "content": "Header và footer                                       Bạn có thể thêm header và footer cho card bằng cách sử dụng class .card-header và .card-footer.                  <div class=\"card\">     <div class=\"card-header\">         Đây là header     </div>     <div class=\"card-body\">         Đây là nội dung card     </div>     <div class=\"card-footer\">         Đây là footer     </div> </div>"
    },
    {
        "title": "Card với context class",
        "content": "Card với context class                                       Bạn có thể tạo card với class ngữ cảnh bằng cách thêm class .bg-{context} vào thẻ <div>.                  <div class=\"card bg-primary\">     <div class=\"card-body text-white\">         Đây là nội dung card     </div> </div>"
    },
    {
        "title": "Tiêu đề, văn bản và liên kết",
        "content": "Tiêu đề, văn bản và liên kết                                       Bạn có thể thêm tiêu đề, văn bản và liên kết vào card bằng cách sử dụng class .card-title(h4), .card-text(p) và                     .card-link(a).                  <div class=\"card\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link\">Liên kết</a>         <a href=\"#\" class=\"card-link\">Liên kết khác</a>     </div> </div>"
    },
    {
        "title": "card với hình ảnh",
        "content": "card với hình ảnh                                       Bạn có thể thêm hình ảnh vào card bằng cách sử dụng class .card-img-top hoặc .card-img-bottom.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-body\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>"
    },
    {
        "title": "card image overlay",
        "content": "card image overlay                                       Bạn có thể tạo card với hình ảnh overlay bằng cách sử dụng class .card-img-overlay.                  <div class=\"card\" style=\"width: 300px;\">     <img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\">     <div class=\"card-img-overlay\">         <h4 class=\"card-title\">Tiêu đề card</h4>         <p class=\"card-text\">Đây là nội dung card</p>         <a href=\"#\" class=\"card-link btn btn-primary\">Liên kết</a>         <a href=\"#\" class=\"card-link btn btn-outline-info\">Liên kết khác</a>     </div> </div>"
    },
    {
        "title": "Bootstrap 5 - Dropdown",
        "content": "Bootstrap 5 - Dropdown                                    Dropdown cơ bản                                       Bạn có thể tạo dropdown bằng cách sử dụng class .dropdown kết hợp                     với class .dropdown-toggle và .dropdown-menu.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>                         Dropdown với hướng                                       Bạn có thể tạo dropdown với hướng bằng cách thêm class .dropup hoặc .dropright hoặc .dropleft vào thẻ <div>.                  <div class=\"dropdown dropup\" style=\"margin-top: 150px; \">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>                         dropdown-header và dropdown-divider                                       Bạn có thể tạo dropdown với header và divider bằng cách sử dụng class .dropdown-header và .dropdown-divider.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li class=\"dropdown-header\">Header</li>         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>         <li class=\"dropdown-divider\"></li>         <li><a class=\"dropdown-item\" href=\"#\">Separated link</a></li>     </ul> </div>                         disabled item và active item                                       Bạn có thể tạo dropdown với item disabled và active bằng cách thêm class .disabled và .active vào thẻ <a>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item disabled\" href=\"#\">Disabled link</a></li>         <li><a class=\"dropdown-item active\" href=\"#\">Active link</a></li>     </ul> </div>                         align right và left                                       Bạn có thể tạo dropdown với alignment khác nhau bằng cách thêm class .dropdown-menu-end hoặc .dropdown-menu-start vào thẻ <ul>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button with right align     </button>     <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>"
    },
    {
        "title": "Dropdown cơ bản",
        "content": "Dropdown cơ bản                                       Bạn có thể tạo dropdown bằng cách sử dụng class .dropdown kết hợp                     với class .dropdown-toggle và .dropdown-menu.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>"
    },
    {
        "title": "Dropdown với hướng",
        "content": "Dropdown với hướng                                       Bạn có thể tạo dropdown với hướng bằng cách thêm class .dropup hoặc .dropright hoặc .dropleft vào thẻ <div>.                  <div class=\"dropdown dropup\" style=\"margin-top: 150px; \">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>"
    },
    {
        "title": "dropdown-header và dropdown-divider",
        "content": "dropdown-header và dropdown-divider                                       Bạn có thể tạo dropdown với header và divider bằng cách sử dụng class .dropdown-header và .dropdown-divider.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li class=\"dropdown-header\">Header</li>         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>         <li class=\"dropdown-divider\"></li>         <li><a class=\"dropdown-item\" href=\"#\">Separated link</a></li>     </ul> </div>"
    },
    {
        "title": "disabled item và active item",
        "content": "disabled item và active item                                       Bạn có thể tạo dropdown với item disabled và active bằng cách thêm class .disabled và .active vào thẻ <a>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button     </button>     <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item disabled\" href=\"#\">Disabled link</a></li>         <li><a class=\"dropdown-item active\" href=\"#\">Active link</a></li>     </ul> </div>"
    },
    {
        "title": "align right và left",
        "content": "align right và left                                       Bạn có thể tạo dropdown với alignment khác nhau bằng cách thêm class .dropdown-menu-end hoặc .dropdown-menu-start vào thẻ <ul>.                  <div class=\"dropdown\">     <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">         Dropdown button with right align     </button>     <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"dropdownMenuButton\">         <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>         <li><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>     </ul> </div>"
    },
    {
        "title": "collapse trong Bootstrap 5",
        "content": "collapse trong Bootstrap 5                                    collapse cơ bản                                       Bạn có thể tạo collapse bằng cách sử dụng button hoặc thẻ a với attribute data-bs-toggle=\"collapse\" và data-bs-target=\"#id_collapse\".                                       Lưu ý: id của collapse phải trùng với id của data-bs-target.                                          Bạn cũng có thể thêm class .collapse vào thẻ <div> để ẩn nội dung.                                          Bạn cần thêm href=\"#id_collapse\" vào thẻ <a> nếu dùng thẻ a thay vì button.                  <button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseExample\">     Button with data-bs-target </button> <div class=\"collapse\" id=\"collapseExample\">     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Perferendis veniam mollitia veritatis illum autem asperiores, culpa laborum excepturi sint recusandae! Rem et iste voluptas impedit illo magni, cumque sequi cum?     </p> </div>"
    },
    {
        "title": "collapse cơ bản",
        "content": "collapse cơ bản                                       Bạn có thể tạo collapse bằng cách sử dụng button hoặc thẻ a với attribute data-bs-toggle=\"collapse\" và data-bs-target=\"#id_collapse\".                                       Lưu ý: id của collapse phải trùng với id của data-bs-target.                                          Bạn cũng có thể thêm class .collapse vào thẻ <div> để ẩn nội dung.                                          Bạn cần thêm href=\"#id_collapse\" vào thẻ <a> nếu dùng thẻ a thay vì button.                  <button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseExample\">     Button with data-bs-target </button> <div class=\"collapse\" id=\"collapseExample\">     <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Perferendis veniam mollitia veritatis illum autem asperiores, culpa laborum excepturi sint recusandae! Rem et iste voluptas impedit illo magni, cumque sequi cum?     </p> </div>"
    },
    {
        "title": "Nav trong Bootstrap 5",
        "content": "Nav trong Bootstrap 5                                    Nav menu                                       Bạn có thể tạo nav menu bằng cách sử dụng class .nav kết hợp với                     class .nav-item và .nav-link.                  <ul class=\"nav\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         căn chỉnh vị trí                                       Bạn có thể căn chỉnh vị trí của nav menu bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <ul class=\"nav justify-content-center\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav justify-content-end\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav nằm dọc                                       Bạn có thể tạo nav menu nằm dọc bằng cách thêm class .flex-column vào thẻ <ul>.                  <ul class=\"nav flex-column\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav tabs                                       Bạn có thể tạo nav tabs bằng cách thêm class .nav-tabs vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item active\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav pills                                       Bạn có thể tạo nav pills bằng cách thêm class .nav-pills vào thẻ <ul>.                  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         Nav justify tabs và pills (chiều rộng bằng nhau)                                       Bạn có thể tạo nav justify tabs và pills bằng cách thêm class .nav-justified vào thẻ <ul>.                  <ul class=\"nav nav-tabs nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav nav-pills nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>                         toggle tabs và pills                                       Bạn có thể tạo toggle tabs và pills bằng cách thêm class .nav-toggle vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">NodeJS</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>Được phát hành vào năm 2009, NodeJS, hay còn được biết với tên gọi chính thức là Node.js, là môi trường thời gian chạy (runtime environment) JavaScript đa nền tảng và mã nguồn mở. NodeJS cho phép các lập trình viên tạo cả ứng dụng front-end và back-end bằng JavaScript.</p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>NodeJS sử dụng JavaScript, ngôn ngữ lập trình phổ biến nhất thế giới.</li>             <li>NodeJS sử dụng cơ chế bất đồng bộ (asynchronous) giúp tăng hiệu suất ứng dụng.</li>             <li>NodeJS có cộng đồng lớn và phong phú.</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>NodeJS không phù hợp với các ứng dụng yêu cầu xử lý đa luồng (multi-threading).</li>             <li>Vấn đề về quản lý bộ nhớ (memory management) khi xử lý các tác vụ đồng thời (concurrent tasks).</li>             <li>Bảo mật của NodeJS còn yếu so với các ngôn ngữ lập trình back-end khác.</li>         </ul>     </div> </div>  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">Spring boot</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>             Spring Boot là một dự án của Pivotal Team, một công ty con của VMware. Spring Boot là một framework giúp tạo và chạy ứng dụng Spring một cách dễ dàng hơn. Spring Boot giúp giảm thiểu cấu hình XML và Annotation cũng như giúp tạo ra các ứng dụng Spring một cách nhanh chóng.         </p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>Spring Boot giúp giảm thiểu cấu hình XML và Annotation.</li>             <li>Phổ biến</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>Thiếu kiểm soát. Hệ thống tạo ra nhiều sự phụ thuộc không sử dụng, dẫn đến tệp triển khai lớn</li>             <li>Không phù hợp với các dự án quy mô lớn. Nhiều nhà phát triển cho rằng công cụ này không phù hợp để xây dựng các ứng dụng đơn khối lớn. Mặc dù một số người cho rằng nó có thể xử lý tốt các dự án lớn, nhưng điều này không phải là sự đồng thuận chung</li>             <li>Có thể không linh hoạt.</li>         </ul>     </div> </div>"
    },
    {
        "title": "Nav menu",
        "content": "Nav menu                                       Bạn có thể tạo nav menu bằng cách sử dụng class .nav kết hợp với                     class .nav-item và .nav-link.                  <ul class=\"nav\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "căn chỉnh vị trí",
        "content": "căn chỉnh vị trí                                       Bạn có thể căn chỉnh vị trí của nav menu bằng cách thêm class .justify-content-center hoặc .justify-content-end vào thẻ <ul>.                  <ul class=\"nav justify-content-center\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav justify-content-end\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "Nav nằm dọc",
        "content": "Nav nằm dọc                                       Bạn có thể tạo nav menu nằm dọc bằng cách thêm class .flex-column vào thẻ <ul>.                  <ul class=\"nav flex-column\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "Nav tabs",
        "content": "Nav tabs                                       Bạn có thể tạo nav tabs bằng cách thêm class .nav-tabs vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item active\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "Nav pills",
        "content": "Nav pills                                       Bạn có thể tạo nav pills bằng cách thêm class .nav-pills vào thẻ <ul>.                  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "Nav justify tabs và pills (chiều rộng bằng nhau)",
        "content": "Nav justify tabs và pills (chiều rộng bằng nhau)                                       Bạn có thể tạo nav justify tabs và pills bằng cách thêm class .nav-justified vào thẻ <ul>.                  <ul class=\"nav nav-tabs nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul> <ul class=\"nav nav-pills nav-justified\">     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link active\" href=\"#\">Link</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link disabled\" href=\"#\">Disabled</a>     </li> </ul>"
    },
    {
        "title": "toggle tabs và pills",
        "content": "toggle tabs và pills                                       Bạn có thể tạo toggle tabs và pills bằng cách thêm class .nav-toggle vào thẻ <ul>.                  <ul class=\"nav nav-tabs\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">NodeJS</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>Được phát hành vào năm 2009, NodeJS, hay còn được biết với tên gọi chính thức là Node.js, là môi trường thời gian chạy (runtime environment) JavaScript đa nền tảng và mã nguồn mở. NodeJS cho phép các lập trình viên tạo cả ứng dụng front-end và back-end bằng JavaScript.</p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>NodeJS sử dụng JavaScript, ngôn ngữ lập trình phổ biến nhất thế giới.</li>             <li>NodeJS sử dụng cơ chế bất đồng bộ (asynchronous) giúp tăng hiệu suất ứng dụng.</li>             <li>NodeJS có cộng đồng lớn và phong phú.</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>NodeJS không phù hợp với các ứng dụng yêu cầu xử lý đa luồng (multi-threading).</li>             <li>Vấn đề về quản lý bộ nhớ (memory management) khi xử lý các tác vụ đồng thời (concurrent tasks).</li>             <li>Bảo mật của NodeJS còn yếu so với các ngôn ngữ lập trình back-end khác.</li>         </ul>     </div> </div>  <ul class=\"nav nav-pills\">     <li class=\"nav-item\">         <a class=\"nav-link active\" data-bs-toggle=\"tab\" href=\"#home\">Spring boot</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#pros\">Ưu điểm</a>     </li>     <li class=\"nav-item\">         <a class=\"nav-link\" data-bs-toggle=\"tab\" href=\"#cons\">Nhược điểm</a>     </li> </ul>  <div class=\"tab-content\">     <div class=\"tab-pane container active\" id=\"home\">         <h2>Home</h2>         <p>             Spring Boot là một dự án của Pivotal Team, một công ty con của VMware. Spring Boot là một framework giúp tạo và chạy ứng dụng Spring một cách dễ dàng hơn. Spring Boot giúp giảm thiểu cấu hình XML và Annotation cũng như giúp tạo ra các ứng dụng Spring một cách nhanh chóng.         </p>     </div>     <div class=\"tab-pane container fade\" id=\"pros\">         <h2>Ưu điểm</h2>         <ul>             <li>Spring Boot giúp giảm thiểu cấu hình XML và Annotation.</li>             <li>Phổ biến</li>         </ul>     </div>     <div class=\"tab-pane container fade\" id=\"cons\">         <h2>Nhược điểm</h2>         <ul>             <li>Thiếu kiểm soát. Hệ thống tạo ra nhiều sự phụ thuộc không sử dụng, dẫn đến tệp triển khai lớn</li>             <li>Không phù hợp với các dự án quy mô lớn. Nhiều nhà phát triển cho rằng công cụ này không phù hợp để xây dựng các ứng dụng đơn khối lớn. Mặc dù một số người cho rằng nó có thể xử lý tốt các dự án lớn, nhưng điều này không phải là sự đồng thuận chung</li>             <li>Có thể không linh hoạt.</li>         </ul>     </div> </div>"
    },
    {
        "title": "Navbar trong Bootstrap 5",
        "content": "Navbar trong Bootstrap 5                                    Navbar cơ bản                                       Bạn có thể tạo navbar bằng cách sử dụng class .navbar kết hợp với                     class .navbar-brand và .navbar-nav.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để tạo navbar dọc, xóa class .navbar-expand-*.                                                       Để căn giữa navbar, thêm class .justify-content-center vào thẻ <nav>.                                                       Để đổi màu nền navbar, thay class .bg-light bằng .bg-primary hoặc .bg-dark hoặc .bg-info hoặc .bg-success hoặc .bg-warning hoặc .bg-danger.                                                   Navbar với logo (hoặc tên thương hiệu)                                       Bạn có thể thêm logo hoặc tên thương hiệu vào navbar bằng cách thêm class .navbar-brand vào thẻ <a> nằm bên trong thẻ <div>.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <a class=\"navbar-brand\" href=\"#\">Logo</a>         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để thêm logo, thay văn bản trong thẻ <a> bằng thẻ <img>."
    },
    {
        "title": "Navbar cơ bản",
        "content": "Navbar cơ bản                                       Bạn có thể tạo navbar bằng cách sử dụng class .navbar kết hợp với                     class .navbar-brand và .navbar-nav.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để tạo navbar dọc, xóa class .navbar-expand-*.                                                       Để căn giữa navbar, thêm class .justify-content-center vào thẻ <nav>.                                                       Để đổi màu nền navbar, thay class .bg-light bằng .bg-primary hoặc .bg-dark hoặc .bg-info hoặc .bg-success hoặc .bg-warning hoặc .bg-danger."
    },
    {
        "title": "Navbar với logo (hoặc tên thương hiệu)",
        "content": "Navbar với logo (hoặc tên thương hiệu)                                       Bạn có thể thêm logo hoặc tên thương hiệu vào navbar bằng cách thêm class .navbar-brand vào thẻ <a> nằm bên trong thẻ <div>.                  <nav class=\"navbar navbar-expand-sm navbar-light bg-light\">     <div class=\"container\">         <a class=\"navbar-brand\" href=\"#\">Logo</a>         <ul class=\"navbar-nav\">             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Home</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">About</a>             </li>             <li class=\"nav-item\">                 <a class=\"nav-link\" href=\"#\">Contact</a>             </li>         </ul>     </div> </nav>                                 Để thêm logo, thay văn bản trong thẻ <a> bằng thẻ <img>."
    },
    {
        "title": "bosstrap 5 - carousel/slileshow",
        "content": "bosstrap 5 - carousel/slileshow                                    Carousel cơ bản                                       Bạn có thể tạo carousel bằng cách sử dụng class .carousel kết hợp với                     class .carousel-inner và .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>                         Carousel với caption                                       Bạn có thể thêm caption vào carousel bằng cách thêm thẻ <div> với class .carousel-caption vào thẻ <div> có class .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 1</h3>                 <p>Đây là ảnh 1</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 2</h3>                 <p>Đây là ảnh 2</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 3</h3>                 <p>Đây là ảnh 3</p>             </div>         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>"
    },
    {
        "title": "Carousel cơ bản",
        "content": "Carousel cơ bản                                       Bạn có thể tạo carousel bằng cách sử dụng class .carousel kết hợp với                     class .carousel-inner và .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>"
    },
    {
        "title": "Carousel với caption",
        "content": "Carousel với caption                                       Bạn có thể thêm caption vào carousel bằng cách thêm thẻ <div> với class .carousel-caption vào thẻ <div> có class .carousel-item.                  <!-- Băng chuyền --> <div id=\"demo\" class=\"carousel slide\" data-bs-ride=\"carousel\">      <!-- Chỉ số/những dấu chấm bên dưới băng truyền -->     <div class=\"carousel-indicators\">         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"0\" class=\"active\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"1\"></button>         <button type=\"button\" data-bs-target=\"#demo\" data-bs-slide-to=\"2\"></button>     </div>      <!-- Nội dung băng chuyển -->     <div class=\"carousel-inner\">         <div class=\"carousel-item active\">             <img src=\"hinh_anh.jpg\" alt=\"Ảnh 1\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 1</h3>                 <p>Đây là ảnh 1</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh1.jpg\" alt=\"Ảnh 2\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 2</h3>                 <p>Đây là ảnh 2</p>             </div>         </div>         <div class=\"carousel-item\">             <img src=\"hinh_anh2.jpg\" alt=\"Ảnh 3\" class=\"d-block w-100\">             <div class=\"carousel-caption\">                 <h3>Ảnh 3</h3>                 <p>Đây là ảnh 3</p>             </div>         </div>     </div>      <!-- Nút chuyển qua trái, qua phải -->     <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"prev\">         <span class=\"carousel-control-prev-icon\"></span>     </button>     <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#demo\" data-bs-slide=\"next\">         <span class=\"carousel-control-next-icon\"></span>     </button> </div>"
    },
    {
        "title": "Giới thiệu về javaScript",
        "content": "Giới thiệu về javaScript javaScript là một ngôn ngữ lập trình thông dịch, đa mô hình và độc lập với trình duyệt. Ngôn ngữ này được tạo ra để thêm các chức năng tương tác cho trang web. javaScript là một ngôn ngữ lập trình phía client, nghĩa là chạy trên máy tính của người dùng cuối, không phải chạy trên máy chủ. javaScript được tạo ra bởi Brendan Eich của hãng Netscape vào năm 1995. Ngôn ngữ này được thiết kế để tương tác với các phần tử của trang web thông qua DOM (Document Object Model)."
    },
    {
        "title": "Làm sao để thêm javaScript vào trang web?",
        "content": "Làm sao để thêm javaScript vào trang web?                               Có 3 cách để thêm javaScript vào trang web:                Thêm javaScript vào trang web thông qua thẻ script: Cách này là cách phổ biến nhất để thêm javaScript vào trang web. Bạn có thể thêm javaScript vào trang web thông qua thẻ script ở bất kỳ vị trí nào trong trang web.                   Thêm javaScript vào trang web thông qua file ngoài: Bạn cũng có thể thêm javaScript vào trang web thông qua file ngoài. Điều này giúp tách biệt javaScript ra khỏi HTML, giúp mã nguồn trở nên dễ quản lý hơn.                                         Sử dụng thẻ <script>                       Để thêm javaScript vào trang web thông qua thẻ script, bạn cần sử dụng thẻ <script> và đặt mã javaScript vào bên trong thẻ này.                                       Thẻ <script> thể đặt ở bất kỳ vị trí nào trong trang web. Tuy nhiên, thường thì thẻ <script> được đặt ở cuối trang web, trước thẻ </body>.                                       Nếu đặt thẻ <script> ở đầu trang web, trình duyệt sẽ phải tải hết mã javaScript trước khi hiển thị nội dung của trang web. Điều này có thể làm chậm tốc độ tải trang web.                                         Dùng file bên ngài                                       Để thêm javaScript vào trang web thông qua file ngoài, bạn cần tạo một file javaScript với phần mở rộng là .js và đặt mã javaScript vào file này.                                       Sau đó, bạn cần thêm file javaScript vào trang web thông qua thẻ <script> với thuộc tính src trỏ đến file javaScript.                                       Một vài lợi ích khi sử dụng file javaScript bên ngoài:                       Dễ quản lý: Khi mã javaScript được tách ra thành file riêng, mã nguồn trở nên dễ quản lý hơn.                           Tiết kiệm bộ nhớ: Khi trang web có nhiều trang, việc sử dụng file javaScript bên ngoài giúp tiết kiệm bộ nhớ.                           Cache: File javaScript bên ngoài có thể được cache lại, giúp tăng tốc độ tải trang web."
    },
    {
        "title": "Sử dụng thẻ <script>",
        "content": "Sử dụng thẻ <script>                       Để thêm javaScript vào trang web thông qua thẻ script, bạn cần sử dụng thẻ <script> và đặt mã javaScript vào bên trong thẻ này.                                       Thẻ <script> thể đặt ở bất kỳ vị trí nào trong trang web. Tuy nhiên, thường thì thẻ <script> được đặt ở cuối trang web, trước thẻ </body>.                                       Nếu đặt thẻ <script> ở đầu trang web, trình duyệt sẽ phải tải hết mã javaScript trước khi hiển thị nội dung của trang web. Điều này có thể làm chậm tốc độ tải trang web."
    },
    {
        "title": "Dùng file bên ngài",
        "content": "Dùng file bên ngài                                       Để thêm javaScript vào trang web thông qua file ngoài, bạn cần tạo một file javaScript với phần mở rộng là .js và đặt mã javaScript vào file này.                                       Sau đó, bạn cần thêm file javaScript vào trang web thông qua thẻ <script> với thuộc tính src trỏ đến file javaScript.                                       Một vài lợi ích khi sử dụng file javaScript bên ngoài:                       Dễ quản lý: Khi mã javaScript được tách ra thành file riêng, mã nguồn trở nên dễ quản lý hơn.                           Tiết kiệm bộ nhớ: Khi trang web có nhiều trang, việc sử dụng file javaScript bên ngoài giúp tiết kiệm bộ nhớ.                           Cache: File javaScript bên ngoài có thể được cache lại, giúp tăng tốc độ tải trang web."
    },
    {
        "title": "Đầu ra của javaScript",
        "content": "Đầu ra của javaScript                               Để hiển thị kết quả của javaScript, bạn có thể sử dụng một số phương thức sau:                Hiển thị kết quả trong các phần tử HTML:  Bạn có thể hiển thị kết quả của javaScript trong các phần tử của HTML bằng cách sử dụng phương thức innerHTML.                   Hiển thị kết quả trong HTML:  Bạn có thể hiển thị kết quả của javaScript trong HTML bằng cách sử dụng phương thức document.write().                   Hiển thị kết quả trong cửa sổ alert:  Bạn có thể hiển thị kết quả của javaScript trong cửa sổ alert bằng cách sử dụng phương thức alert().                   Hiển thị kết quả trong console:  Bạn có thể hiển thị kết quả của javaScript trong console bằng cách sử dụng phương thức console.log().                                         Hiển thị kết quả trong các phần tử HTML                                       Để hiển thị kết quả của javaScript trong các phần tử của HTML, bạn có thể sử dụng phương thức innerHTML.                                       Để truy cập đến một phần tử HTML, bạn có thể sử dụng phương thức document.getElementById() hoặc document.querySelector().                  document.getElementById(\"demo\").innerHTML = \"Hello, World!\";                        Thay đổi thuộc tính InsideHTML của phần tử HTML là cách phổ biến để hiển thị dữ liệu trong HTML.                                         Hiển thị kết quả trong HTML                                       Để hiển thị kết quả của javaScript trong HTML, bạn có thể sử dụng phương thức document.write().                  document.write(\"Hello, World!\");                      Phương thức document.write() sẽ ghi nội dung vào tài liệu HTML.                                        Phương thức document.write() sẽ ghi nội dung vào tài liệu HTML. Nếu bạn sử dụng phương thức này sau khi tài liệu đã được tải, nó sẽ ghi đè lên toàn bộ tài liệu HTML.                     <button type=\"button\" onclick=\"document.write('Hello, World!')\">Bấm vào đây để thử</button> Bấm vào đây để thử                         Hiển thị kết quả trong cửa sổ alert                                       Để hiển thị kết quả của javaScript trong cửa sổ alert, bạn có thể sử dụng phương thức alert().                  alert(\"Hello, World!\");                      Cửa sổ alert sẽ hiển thị thông báo cho người dùng.                   <button type=\"button\" onclick=\"alert('Hello, World!')\">Bấm vào đây để thử lại</button> Bấm vào đây để thử lại                        Hiển thị kết quả trong console                                       Để hiển thị kết quả của javaScript trong console, bạn có thể sử dụng phương thức console.log().                  console.log(\"Hello, World!\");                      Console.log() sẽ hiển thị thông báo trong console của trình duyệt.                                        Mở cửa sổ console của trình duyệt để xem kết quả.                     <button type=\"button\" onclick=\"console.log('Hello, World!')\">Bấm vào đây để thử lại</button> Bấm vào đây để thử lại                         JavaScript Print                                       Để in nội dung của một trang web, bạn có thể sử dụng phương thức window.print().                   <button type=\"button\" onclick=\"window.print()\">In trang web</button> In trang web                      Phương thức window.print() sẽ mở cửa sổ in của trình duyệt."
    },
    {
        "title": "Hiển thị kết quả trong các phần tử HTML",
        "content": "Hiển thị kết quả trong các phần tử HTML                                       Để hiển thị kết quả của javaScript trong các phần tử của HTML, bạn có thể sử dụng phương thức innerHTML.                                       Để truy cập đến một phần tử HTML, bạn có thể sử dụng phương thức document.getElementById() hoặc document.querySelector().                  document.getElementById(\"demo\").innerHTML = \"Hello, World!\";                        Thay đổi thuộc tính InsideHTML của phần tử HTML là cách phổ biến để hiển thị dữ liệu trong HTML."
    },
    {
        "title": "Hiển thị kết quả trong HTML",
        "content": "Hiển thị kết quả trong HTML                                       Để hiển thị kết quả của javaScript trong HTML, bạn có thể sử dụng phương thức document.write().                  document.write(\"Hello, World!\");                      Phương thức document.write() sẽ ghi nội dung vào tài liệu HTML.                                        Phương thức document.write() sẽ ghi nội dung vào tài liệu HTML. Nếu bạn sử dụng phương thức này sau khi tài liệu đã được tải, nó sẽ ghi đè lên toàn bộ tài liệu HTML.                     <button type=\"button\" onclick=\"document.write('Hello, World!')\">Bấm vào đây để thử</button> Bấm vào đây để thử"
    },
    {
        "title": "Hiển thị kết quả trong cửa sổ alert",
        "content": "Hiển thị kết quả trong cửa sổ alert                                       Để hiển thị kết quả của javaScript trong cửa sổ alert, bạn có thể sử dụng phương thức alert().                  alert(\"Hello, World!\");                      Cửa sổ alert sẽ hiển thị thông báo cho người dùng.                   <button type=\"button\" onclick=\"alert('Hello, World!')\">Bấm vào đây để thử lại</button> Bấm vào đây để thử lại"
    },
    {
        "title": "Hiển thị kết quả trong console",
        "content": "Hiển thị kết quả trong console                                       Để hiển thị kết quả của javaScript trong console, bạn có thể sử dụng phương thức console.log().                  console.log(\"Hello, World!\");                      Console.log() sẽ hiển thị thông báo trong console của trình duyệt.                                        Mở cửa sổ console của trình duyệt để xem kết quả.                     <button type=\"button\" onclick=\"console.log('Hello, World!')\">Bấm vào đây để thử lại</button> Bấm vào đây để thử lại"
    },
    {
        "title": "JavaScript Print",
        "content": "JavaScript Print                                       Để in nội dung của một trang web, bạn có thể sử dụng phương thức window.print().                   <button type=\"button\" onclick=\"window.print()\">In trang web</button> In trang web                      Phương thức window.print() sẽ mở cửa sổ in của trình duyệt."
    },
    {
        "title": "Các câu lệnh trong javaScript",
        "content": "Các câu lệnh trong javaScript              let x, y, z; x = 13; y = 26; z = x - y;                  các câu lệnh javaScript bao gồm: Giá trị, toán tử, biểu thức, từ khóa, và các lệnh."
    },
    {
        "title": "Chương trình javaScript",
        "content": "Chương trình javaScript                               Chương trình javaScript là tập hợp các câu lệnh javaScript được thực thi theo thứ tự nhất định."
    },
    {
        "title": "Dấu chấm phẩy ;",
        "content": "Dấu chấm phẩy ;                  Trong javaScript, dấu chấm phẩy (;) được sử dụng để phân tách các câu lệnh.              let x = 5; let y = 10; let z = x + y;                  Bạn có thể đưa các câu lệnh javaScript vào cùng một dòng:              let x = 5; let y = 10; let z = x + y;                  Trong javaScript dấu chấm phẩy (;) không bắt buộc, nhưng nên sử dụng để code trở nên dễ đọc hơn.                 (Đối với nhiều câu lệnh trên 1 dòng dấu (;) là bắt buộc)"
    },
    {
        "title": "Khoảng trắng trong javaScript",
        "content": "Khoảng trắng trong javaScript                               Trong javaScript, khoảng trắng không quan trọng. Bạn có thể sử dụng bất kỳ số lượng khoảng trắng nào giữa các từ và dấu phẩy.              let x=5+6;                  Bạn cũng có thể sử dụng dấu cách để làm cho code trở nên dễ đọc hơn:              let x = 5 + 6;"
    },
    {
        "title": "Khối lệnh trong javaScript",
        "content": "Khối lệnh trong javaScript                               Một khối lệnh là một tập hợp các câu lệnh được đặt trong dấu ngoặc nhọn: { }.              {     let x = 5;     let y = 6;     let z = x + y; }                  Khối lệnh được sử dụng để nhóm các câu lệnh lại với nhau. chúng thường dùng trong các hàm, vòng lặp, và các điều kiện."
    },
    {
        "title": "từ khóa trong javaScript",
        "content": "từ khóa trong javaScript                               từ khóa là các từ được đặt riêng biệt trong javaScript. chúng không thể được sử dụng làm tên biến hoặc hàm.              Tham khảo bảng dưới đây về một vài từ khóa thông dụng                                 Từ khóa                                                       Mô tả                            var Định nghĩa biến   let Định nghĩa biến nằm trong một khối lệnh   const Định nghĩa một hằng số   if Định nghĩa một điều kiện   switch Định nghĩa một khối lệnh thực thi tùy thuộc vào case   for Định nghĩa một vòng lặp   function Định nghĩa một hàm   return Trả về giá trị từ một hàm   try Định nghĩa một khối lệnh với xử lý lỗi"
    },
    {
        "title": "Cú pháp trong javaScript",
        "content": "Cú pháp trong javaScript                                    giá trị trong javaScript                                       Có 2 kiểu giá trị trong javaScript: kiểu dữ liệu không đổi và kiểu dữ liệu có thể thay đổi.                                       Kiểu dữ liệu không đổi: số, chuỗi, .... (là những dữ liệu bạn không thể gán lại giá trị mới cho nó)                     ví dụ: let 5 = 6; (là không hợp lệ)                                       Kiểu dữ liệu có thể thay đổi hay còn gọi là biến (là những dữ liệu bạn có thể gán lại giá trị mới cho nó)                     ví dụ: let x = {name: \"???\", age: 20}; let y = \"hello\"; (là hợp lệ)                    Toán tử trong javaScript javaScript sử dụng các toán tử để thực hiện các phép tính.                      Toán tử số học(dùng để tính toán): +, -, *, /,                                       Toán tử gán(dùng để gán giá trị cho biến): =                                         Comment trong javaScript                                       Comment trong javaScript được sử dụng để giải thích code và làm cho code dễ đọc hơn.                                       Comment trong javaScript bắt đầu bằng // hoặc /* và kết thúc bằng */ (tương tự trong java)                                         Đặt tên trong javaScript                                       Khi đặt tên biến trong javaScript, bạn cần tuân thủ một số quy tắc sau:                                            Tên biến có thể chứa chữ cái, số, dấu gạch dưới (_) hoặc dấu $                                               Tên biến không được bắt đầu bằng số                                               Tên biến không được chứa các ký tự đặc biệt như !, @, #, %, ...                                               Tên biến phân biệt chữ hoa và chữ thường                                              Quy tắc lạc đà (camel case)                                       Trong lịch sử, các lập trình viên sử dụng nhiều phương pháp đặt tên biến như:                    Dấu gạch ngang:  first-name, last-name... (được sử dụng trong CSS nhưng không được sử dụng trong javaScript)                       Dấu gạch dưới:  first_name, last_name... (có thể dùng trong javaScript, nhưng không phổ biến; dùng trong python)                       Pascal case:  FirstName, LastName... (được sử dụng trong javaScript, nhưng không phổ biến)                       Camel case:  firstName, lastName... (được sử dụng trong javaScript, phổ biến nhất)"
    },
    {
        "title": "giá trị trong javaScript",
        "content": "giá trị trong javaScript                                       Có 2 kiểu giá trị trong javaScript: kiểu dữ liệu không đổi và kiểu dữ liệu có thể thay đổi.                                       Kiểu dữ liệu không đổi: số, chuỗi, .... (là những dữ liệu bạn không thể gán lại giá trị mới cho nó)                     ví dụ: let 5 = 6; (là không hợp lệ)                                       Kiểu dữ liệu có thể thay đổi hay còn gọi là biến (là những dữ liệu bạn có thể gán lại giá trị mới cho nó)                     ví dụ: let x = {name: \"???\", age: 20}; let y = \"hello\"; (là hợp lệ)"
    },
    {
        "title": "Toán tử trong javaScript",
        "content": "Toán tử trong javaScript javaScript sử dụng các toán tử để thực hiện các phép tính.                      Toán tử số học(dùng để tính toán): +, -, *, /,                                       Toán tử gán(dùng để gán giá trị cho biến): ="
    },
    {
        "title": "Comment trong javaScript",
        "content": "Comment trong javaScript                                       Comment trong javaScript được sử dụng để giải thích code và làm cho code dễ đọc hơn.                                       Comment trong javaScript bắt đầu bằng // hoặc /* và kết thúc bằng */ (tương tự trong java)"
    },
    {
        "title": "Đặt tên trong javaScript",
        "content": "Đặt tên trong javaScript                                       Khi đặt tên biến trong javaScript, bạn cần tuân thủ một số quy tắc sau:                                            Tên biến có thể chứa chữ cái, số, dấu gạch dưới (_) hoặc dấu $                                               Tên biến không được bắt đầu bằng số                                               Tên biến không được chứa các ký tự đặc biệt như !, @, #, %, ...                                               Tên biến phân biệt chữ hoa và chữ thường"
    },
    {
        "title": "Quy tắc lạc đà (camel case)",
        "content": "Quy tắc lạc đà (camel case)                                       Trong lịch sử, các lập trình viên sử dụng nhiều phương pháp đặt tên biến như:                    Dấu gạch ngang:  first-name, last-name... (được sử dụng trong CSS nhưng không được sử dụng trong javaScript)                       Dấu gạch dưới:  first_name, last_name... (có thể dùng trong javaScript, nhưng không phổ biến; dùng trong python)                       Pascal case:  FirstName, LastName... (được sử dụng trong javaScript, nhưng không phổ biến)                       Camel case:  firstName, lastName... (được sử dụng trong javaScript, phổ biến nhất)"
    },
    {
        "title": "Biến trong javaScript",
        "content": "Biến trong javaScript                               Trong javaScript, biến được sử dụng để lưu trữ dữ liệu.                               Để tạo một biến trong javaScript, bạn cần sử dụng từ khóa var, let hoặc const.                               Nên khai báo biến trước khi sử dụng.                               Từ khóa var được dùng nhiều trong những phiên bản cũ.                 Hiện nay nên sử dụng let hoặc const thay thế.                 Chỉ dùng var khi sử dụng trên những phiên bản cũ.               Khi dùng var, let và const  Luôn khai báo biến                          Dùng const khi biết rằng giá trị của biến sẽ không thay đổi                                                Dùng const cho kiểu dữ liệu không đổi (chuỗi hoặc đối tượng)                                               Dùng let khi không thể dùng const                           Dùng var khi bạn PHẢI hỗ trợ trình duyệt cũ"
    },
    {
        "title": "kiểu dữ liệu trong javaScript",
        "content": "kiểu dữ liệu trong javaScript                               Trong javaScript, có 8 kiểu dữ liệu:                String:  kiểu dữ liệu chuỗi                   Number:  kiểu dữ liệu số                   Bigint:  kiểu dữ liệu số lớn                   Boolean:  kiểu dữ liệu logic                   undefined:  kiểu dữ liệu không xác định                   null:  kiểu dữ liệu rỗng                   Symbol:  kiểu dữ liệu ký hiệu                   Object:  kiểu dữ liệu đối tượng                                    Kiểu dữ liệu Object có 2 loại: built-in object và user-defined object.                               Built-in object: là các đối tượng được xây dựng sẵn trong javaScript như: String, Number, Boolean, Array, Object, Function, Date, Math, RegExp, ...              Ví dụ // kiểu dữ liệu Số let length = 5; let weight = 10.5;  // kiểu dữ liệu Chuỗi let name = \"John\"; let address = '123 ABC';  // kiểu dữ liệu Logic let isStudent = true; let isTeacher = false;  // kiểu dữ liệu Object let person = {name: \"John\", age: 20};  // array object let fruits = [\"Apple\", \"Banana\", \"Orange\"];  //date object let today = new Date(\"2022-01-01\");                   Biến trong javaScript có thể lưu trữ bất kỳ kiểu dữ liệu nào. Bạn không cần khai báo kiểu dữ liệu cho biến.                               Dữ liệu trong javaScript có thể thay đổi kiểu dữ liệu.              let x = 5; // x là số x = \"Hello\"; // x là chuỗi                  Tất cả các số trong javaScript đều là kiểu dữ liệu Number, bao gồm cả số nguyên và số thực.                               kí hiệu exponent (mũ) trong javaScript              let x = 123e5; // 12300000 let y = 123e-5; // 0.00123                      Empty Value là dữ liệu không chứa nội dung, vẫn có thể xác định kiểu dữ liệu.                                        undefined là kiểu dữ liệu không xác định, khi khai báo biến mà không gán giá trị.                                       Để biết kiểu dữ liệu của một biến, bạn có thể sử dụng phương thức typeof.                  let x = 5; let y = \"Hello\"; let z = null; console.log(typeof x); // number"
    },
    {
        "title": "Function trong javaScript",
        "content": "Function trong javaScript                               Function trong javaScript là một khối lệnh được thiết kế để thực hiện một nhiệm vụ cụ thể.              Cú pháp function functionName(parameter1, parameter2, parameter3...) {     // các câu lệnh xử lý     return result; }"
    },
    {
        "title": "Object trong javaScript",
        "content": "Object trong javaScript                               object là một biến chứa nhiều giá trị giúp lưu trữ và quản lý đối tượng.                               object trong javaScript được tạo ra bằng cách sử dụng cặp dấu ngoặc nhọn: { }.                               Object nên được khai báo bằng từ khóa const.              Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };                  Bạn cũng có thể tạo mới một object bằng từ khóa new.              Ví dụ const person = new Object(); person.name = \"John\"; person.age = 20; person.isStudent = true;                  Object trong javaScript tương tự như: dictionary trong python, hash trong ruby, hash table trong C++, hash map trong Java...                               Truy cập đến các thuộc tính của object bằng cách sử dụng dấu chấm (.) hoặc dấu ngoặc vuông [ ].                               Method trong object là một thuộc tính chứa một hàm.              Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true,     toString: function() {         return this.name + \" is \" + this.age + \" years old.\";     } };                  Trong method, từ khóa this tham chiếu đến object hiện tại.                               TRONG JavaScript OBJECT LÀ KING                               Trong javaScript, mọi thứ đều là object.                                    Object là object                                       Maths là object                                       Function là object                                       Array là object                                       Date là object                                       String là object                                       Sets là object                                       Maps là object                                    Tất cả các dữ liệu trong javaScript ngoại trừ kiểu dữ liệu nguyên thủy (primitive data types) đều là object.              Kiểu dữ liệu nguyên thủy                       String                                       Number                                       Boolean                                       Undefined                                       Null                                       Symbol                                       BigInt                   Kiểu dữ liệu nguyên thủy là bất biến. Điều này có nghĩa là chúng không thể thêm thuộc tính hoặc phương thức mới.                  Khi khai báo biến bằng giá trị nguyên thủy, biến sẽ lưu trữ giá trị thực sự của nó. Bạn có thể thay đổi giá trị của biến nhưng không thể thay đổi giá trị nguyên thủy.                 Tức là khi bạn khai báo let x = 15; khi bạn thay đổi x = 20; thì x sẽ copy giá trị 20 chứ không thể làm 15 đổi thành 20.              Với kiểu dữ liệu object, khi bạn thay đổi giá trị của biến gán với object, thì object đó sẽ thay đổi giá trị."
    },
    {
        "title": "thuộc tính của object",
        "content": "thuộc tính của object                               Trong javaScript, object có thể chứa nhiều thuộc tính.                               Mỗi thuộc tính của object được định nghĩa bằng cặp key-value.                               Key là tên của thuộc tính, value là giá trị của thuộc tính.                                    Truy cập đến thuộc tính của object                                       Để truy cập đến thuộc tính của object, bạn có thể sử dụng dấu chấm (.) hoặc dấu ngoặc vuông [ ].                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  console.log(person.name); // John console.log(person[\"age\"]); // 20                        Thêm mới một thuộc tính                                       Bạn có thể thêm mới một thuộc tính vào object bằng cách gán giá trị cho thuộc tính đó.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  person.address = \"123 ABC\"; console.log(person.address); // 123 ABC                      Bạn cũng có thể thêm mới một thuộc tính vào object bằng cách sử dụng dấu chấm (.) hoặc dấu ngoặc vuông [ ].                     person[\"address\"] = \"123 ABC\";                     Nếu thuộc tính đã tồn tại, giá trị của thuộc tính sẽ được thay đổi.                                         Xóa một thuộc tính                                       Bạn có thể xóa một thuộc tính của object bằng cách sử dụng từ khóa delete.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  delete person.age; console.log(person.age); // undefined                        Object lồng nhau                                       Trong javaScript, object có thể chứa object khác.                  Ví dụ const person = {     name: \"John\",     age: 20,     address: {         street: \"123 ABC\",         city: \"New York\"     } };  console.log(person.address.city); // New York"
    },
    {
        "title": "Truy cập đến thuộc tính của object",
        "content": "Truy cập đến thuộc tính của object                                       Để truy cập đến thuộc tính của object, bạn có thể sử dụng dấu chấm (.) hoặc dấu ngoặc vuông [ ].                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  console.log(person.name); // John console.log(person[\"age\"]); // 20"
    },
    {
        "title": "Thêm mới một thuộc tính",
        "content": "Thêm mới một thuộc tính                                       Bạn có thể thêm mới một thuộc tính vào object bằng cách gán giá trị cho thuộc tính đó.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  person.address = \"123 ABC\"; console.log(person.address); // 123 ABC                      Bạn cũng có thể thêm mới một thuộc tính vào object bằng cách sử dụng dấu chấm (.) hoặc dấu ngoặc vuông [ ].                     person[\"address\"] = \"123 ABC\";                     Nếu thuộc tính đã tồn tại, giá trị của thuộc tính sẽ được thay đổi."
    },
    {
        "title": "Xóa một thuộc tính",
        "content": "Xóa một thuộc tính                                       Bạn có thể xóa một thuộc tính của object bằng cách sử dụng từ khóa delete.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  delete person.age; console.log(person.age); // undefined"
    },
    {
        "title": "Object lồng nhau",
        "content": "Object lồng nhau                                       Trong javaScript, object có thể chứa object khác.                  Ví dụ const person = {     name: \"John\",     age: 20,     address: {         street: \"123 ABC\",         city: \"New York\"     } };  console.log(person.address.city); // New York"
    },
    {
        "title": "Object method",
        "content": "Object method                               Trong javaScript, method là một thuộc tính của object chứa một hàm.                               Method trong object được sử dụng để thực hiện một hành động cụ thể.              Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true,     fullName: function() {         return this.name + \" Doe\";     } };  console.log(person.fullName()); // John Doe                  Trong method, từ khóa this tham chiếu đến object hiện tại.                               Để truy cập đến method của object, bạn cần sử dụng dấu chấm (.)                 Ví dụ: person.fullName();                   Nếu bạn sử dụng dấu ngoặc đơn () sau tên method, method sẽ được gọi và trả về giá trị của nó.                 Ví dụ: person.fullName; sẽ trả về hàm fullName.                                    Thêm mới một method                                       Bạn có thể thêm mới một method vào object bằng cách gán một hàm cho thuộc tính đó.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  person.fullName = function() {     return this.name + \" Doe\"; };  console.log(person.fullName()); // John Doe                        Hiển thị tất cả các thuộc tính và method của object                                       Nếu bạn dùng document.getElementById(\"demo\").innerHTML = person; để hiển thị object, bạn sẽ nhận được kết quả là [object Object].                                       Để hiển thị object có thể dùng các cách sau:                                            Truy cập từng thuộc tính của object và hiển thị nó.                                               Sử dụng vòng lặp for...in để hiển thị tất cả các thuộc tính của object.                                               Sử dụng Object.values() để hiển thị tất cả các giá trị của object.                                               Sử dụng Object.entries() để hiển thị tất cả các giá trị của object.                                               Sử dụng JSON.stringify() để hiển thị object dưới dạng chuỗi JSON.                       Truy cập từng thuộc tính của object và hiển thị nó. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo2\").innerHTML = person.name + \" is \" + person.age + \" years old.\";   Sử dụng vòng lặp for...in để hiển thị tất cả các thuộc tính của object. const person = {     name: \"John\",     age: 20,     isStudent: true };  let text = \"\"; for (let x in person) {     text += person[x] + \" \"; }  document.getElementById(\"demo3\").innerHTML = text;   Sử dụng Object.values() để hiển thị tất cả các giá trị của object. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo4\").innerHTML = Object.values(person);                        Sử dụng Object.entries() để hiển thị tất cả các giá trị của object.                  const person = {     name: \"John\",     age: 20,     isStudent: true };  let text = \"\"; for (let [key, value] of Object.entries(person)) {     text += key + \": \" + value + \"<br>\"; }  document.getElementById(\"demo5\").innerHTML = text;   Sử dụng JSON.stringify() để hiển thị object dưới dạng chuỗi JSON. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo6\").innerHTML = JSON.stringify(person);"
    },
    {
        "title": "Thêm mới một method",
        "content": "Thêm mới một method                                       Bạn có thể thêm mới một method vào object bằng cách gán một hàm cho thuộc tính đó.                  Ví dụ const person = {     name: \"John\",     age: 20,     isStudent: true };  person.fullName = function() {     return this.name + \" Doe\"; };  console.log(person.fullName()); // John Doe"
    },
    {
        "title": "Hiển thị tất cả các thuộc tính và method của object",
        "content": "Hiển thị tất cả các thuộc tính và method của object                                       Nếu bạn dùng document.getElementById(\"demo\").innerHTML = person; để hiển thị object, bạn sẽ nhận được kết quả là [object Object].                                       Để hiển thị object có thể dùng các cách sau:                                            Truy cập từng thuộc tính của object và hiển thị nó.                                               Sử dụng vòng lặp for...in để hiển thị tất cả các thuộc tính của object.                                               Sử dụng Object.values() để hiển thị tất cả các giá trị của object.                                               Sử dụng Object.entries() để hiển thị tất cả các giá trị của object.                                               Sử dụng JSON.stringify() để hiển thị object dưới dạng chuỗi JSON.                       Truy cập từng thuộc tính của object và hiển thị nó. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo2\").innerHTML = person.name + \" is \" + person.age + \" years old.\";   Sử dụng vòng lặp for...in để hiển thị tất cả các thuộc tính của object. const person = {     name: \"John\",     age: 20,     isStudent: true };  let text = \"\"; for (let x in person) {     text += person[x] + \" \"; }  document.getElementById(\"demo3\").innerHTML = text;   Sử dụng Object.values() để hiển thị tất cả các giá trị của object. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo4\").innerHTML = Object.values(person);                        Sử dụng Object.entries() để hiển thị tất cả các giá trị của object.                  const person = {     name: \"John\",     age: 20,     isStudent: true };  let text = \"\"; for (let [key, value] of Object.entries(person)) {     text += key + \": \" + value + \"<br>\"; }  document.getElementById(\"demo5\").innerHTML = text;   Sử dụng JSON.stringify() để hiển thị object dưới dạng chuỗi JSON. const person = {     name: \"John\",     age: 20,     isStudent: true };  document.getElementById(\"demo6\").innerHTML = JSON.stringify(person);"
    },
    {
        "title": "Contructor trong object",
        "content": "Contructor trong object                               Trong javaScript, constructor là một hàm được sử dụng để tạo ra một object.                               Constructor trong javaScript giống như hàm khởi tạo trong các ngôn ngữ lập trình khác.                               Constructor trong javaScript được gọi khi bạn tạo một object mới từ một class.                               Cú pháp:              function ClassName(parameter1, parameter2, parameter3...) {     this.property1 = parameter1;     this.property2 = parameter2;     this.property3 = parameter3;     ... }                  Trong constructor, từ khóa this tham chiếu đến object hiện tại.                               Để tạo một object từ constructor, bạn cần sử dụng từ khóa new.              Ví dụ function Person(name, age, isStudent) {     this.name = name;     this.age = age;     this.isStudent = isStudent; }  const person1 = new Person(\"John\", 20, true); const person2 = new Person(\"Jane\", 22, false);                  Trong ví dụ trên, Person là constructor, person1 và person2 là các object được tạo ra từ constructor Person.                                    Giá trị mặc định trong constructor                                       Bạn có thể đặt giá trị mặc định cho các thuộc tính trong constructor.                  Ví dụ function Person(name, age, isStudent) {     this.name = name;     this.age = age;     this.isStudent = isStudent;     this.other = \"Other\"; }                        Thêm thuộc tính vào constructor                                       Bạn có thể thêm mới một thuộc tính vào constructor bằng cách truy cập đến prototype của constructor.                  Ví dụ function Person(name, age, isStudent) {     this.name = name;     this.age = age;     this.isStudent = isStudent; }  Person.prototype.address = \"123 ABC\";  const person1 = new Person(\"John\", 20, true); const person2 = new Person(\"Jane\", 22, false);  console.log(person1.address); // 123 ABC console.log(person2.address); // 123 ABC                      Bạn cũng có thể thêm mới một method vào constructor bằng cách truy cập đến prototype của constructor.                                         Một số constructor built-in                                       Trong javaScript, có một số constructor built-in được sử dụng để tạo ra các object.                    new String():  tạo ra một object chuỗi                       new Number():  tạo ra một object số                       new Boolean():  tạo ra một object logic                       new Array():  tạo ra một object mảng                       new Date():  tạo ra một object ngày tháng                       new RegExp():  tạo ra một object biểu thức chính quy                       new Function():  tạo ra một object hàm                       new Object():  tạo ra một object                       new Map():  tạo ra một object map                        new Set():  tạo ra một object set                        Chú ý: Math() không có trong danh sách vì Math là một object toàn cục. new không cần thiết."
    },
    {
        "title": "Giá trị mặc định trong constructor",
        "content": "Giá trị mặc định trong constructor                                       Bạn có thể đặt giá trị mặc định cho các thuộc tính trong constructor.                  Ví dụ function Person(name, age, isStudent) {     this.name = name;     this.age = age;     this.isStudent = isStudent;     this.other = \"Other\"; }"
    },
    {
        "title": "Thêm thuộc tính vào constructor",
        "content": "Thêm thuộc tính vào constructor                                       Bạn có thể thêm mới một thuộc tính vào constructor bằng cách truy cập đến prototype của constructor.                  Ví dụ function Person(name, age, isStudent) {     this.name = name;     this.age = age;     this.isStudent = isStudent; }  Person.prototype.address = \"123 ABC\";  const person1 = new Person(\"John\", 20, true); const person2 = new Person(\"Jane\", 22, false);  console.log(person1.address); // 123 ABC console.log(person2.address); // 123 ABC                      Bạn cũng có thể thêm mới một method vào constructor bằng cách truy cập đến prototype của constructor."
    },
    {
        "title": "Một số constructor built-in",
        "content": "Một số constructor built-in                                       Trong javaScript, có một số constructor built-in được sử dụng để tạo ra các object.                    new String():  tạo ra một object chuỗi                       new Number():  tạo ra một object số                       new Boolean():  tạo ra một object logic                       new Array():  tạo ra một object mảng                       new Date():  tạo ra một object ngày tháng                       new RegExp():  tạo ra một object biểu thức chính quy                       new Function():  tạo ra một object hàm                       new Object():  tạo ra một object                       new Map():  tạo ra một object map                        new Set():  tạo ra một object set                        Chú ý: Math() không có trong danh sách vì Math là một object toàn cục. new không cần thiết."
    },
    {
        "title": "Event trong javaScript",
        "content": "Event trong javaScript                               Trong javaScript, event là một hành động mà trình duyệt thực hiện khi một hành động nào đó xảy ra.              Một số sự kiện có thể sảy ra như                       Trang web đã được tải hoàn toàn                                       Người dùng click vào một nút                                       Người dùng nhập dữ liệu vào một trường input                   HTML cho phép thêm các thuộc tính xử lý sự kiện với mã javaScript nằm trong đó Cú pháp <element event='javaScript code'> Ví dụ <button onclick=\"document.getElementById('demo7').innerHTML = Date()\">Click me!</button> Click me!                   Trong ví dụ trên, khi người dùng click vào nút, hàm document.getElementById('demo7').innerHTML = Date() sẽ được thực thi.              Bạn có thể thay đổi nội dung của chính nó với `this` Ví dụ <button onclick=\"this.innerHTML = Date()\">Click me!</button> Click me!                  Với mã javaScript dài, bạn nên tạo một hàm riêng và gọi hàm đó trong thuộc tính xử lý sự kiện.              Ví dụ <button onclick=\"displayDate()\">Click me!</button> function displayDate() {     document.getElementById('demo8').innerHTML = Date(); } Click me!                    Các sự kiện trong javaScript thường dùng                 Sự kiện Đối tượng sử dụng Mô tả   onchange Input, Select, Textarea Sự kiện xảy ra khi giá trị của một phần tử thay đổi   onclick Button, Checkbox, Radio Sự kiện xảy ra khi người dùng click vào một phần tử   onmouseover Element Sự kiện xảy ra khi con trỏ chuột di chuyển vào phần tử   onmouseout Element Sự kiện xảy ra khi con trỏ chuột di chuyển ra khỏi phần tử   onkeydown Input, Textarea Sự kiện xảy ra khi người dùng nhấn phím   onload Body Sự kiện xảy ra khi trang web đã được tải hoàn toàn"
    },
    {
        "title": "String trong javaScript",
        "content": "String trong javaScript                               Trong javaScript, chuỗi là một kiểu dữ liệu dùng để lưu trữ văn bản.                               Chuỗi trong javaScript được đặt trong dấu nháy đơn (' '), dấu nháy kép (\" \") hoặc dấu backtick (` `).                               Dấu nháy đơn và dấu nháy kép đều giống nhau, bạn có thể sử dụng bất kỳ dấu nào.                               Dấu backtick (` `) được sử dụng để tạo template string.                               String có thể được tạo trực tiếp hoặc thông qua constructor new String().              Ví dụ let name = \"John\"; let newString = new String(\"John\"); let address = '123 ABC'; let text = `Hello ${name}`;                   Trong ví dụ trên, name, newString và address là chuỗi, text là template string.                               Trong template string, bạn có thể sử dụng biến bằng cách sử dụng dấu ${ }.                               Trong mã trên, khi so sánh name === newString sẽ trả về false vì name là kiểu dữ liệu chuỗi, newString là kiểu dữ liệu object.                 Trong javaScript việc so sánh (===) dữ liệu object với dữ liệu nguyên thủy hoặc các object với nhau luôn trả về false."
    },
    {
        "title": "String method",
        "content": "String method                               Trong javaScript, chuỗi có nhiều method giúp xử lý chuỗi dễ dàng hơn.                 Phương thức Mô tả Ví dụ Kết quả   length Trả về độ dài của chuỗi  let str = \"Hello\"; console.log(str.length) 5   CharAt() Trả về ký tự tại vị trí chỉ định trong chuỗi (nếu ko thấy trả về chuỗi rỗng) let str = \"Hello\"; console.log(str.charAt(0)) H   CharCodeAt() Trả về mã Unicode của ký tự tại vị trí chỉ định trong chuỗi let str = \"Hello\"; console.log(str.charCodeAt(0)) 72   [] Trả về ký tự tại vị trí chỉ định trong chuỗi (nếu không tìm thấy trả về undefined) let str = \"Hello\"; console.log(str[0]) H   slice(start, end) Trả về một phần của chuỗi từ vị trí start đến vị trí end - 1 let str = \"Hello\"; console.log(str.slice(0, 3)) Hel   substring() Trả về một phần của chuỗi từ vị trí start đến vị trí end - 1 let str = \"Hello\"; console.log(str.substring(0, 3)) Hel   substr() Trả về một phần của chuỗi từ vị trí start với độ dài chỉ định let str = \"Hello\"; console.log(str.substr(0, 3)) Hel   toUpperCase Chuyển đổi chuỗi thành chữ in hoa let str = \"Hello\"; console.log(str.toUpperCase()) HELLO   toLowerCase Chuyển đổi chuỗi thành chữ in thường let str = \"Hello\"; console.log(str.toLowerCase()) hello   concat() Nối chuỗi let str1 = \"Hello\"; let str2 = \"World\"; console.log(str1.concat(\" \", str2)) Hello World   trim() Loại bỏ khoảng trắng ở đầu và cuối chuỗi let str = \" Hello \"; console.log(str.trim()) Hello   trimStart() Loại bỏ khoảng trắng ở đầu chuỗi let str = \" Hello \"; console.log(str.trimStart()) Hello    trimEnd() Loại bỏ khoảng trắng ở cuối chuỗi let str = \" Hello \"; console.log(str.trimEnd())  Hello   padStart() Thêm ký tự vào đầu chuỗi cho đến khi đạt độ dài chỉ định let str = \"Hello\"; console.log(str.padStart(10, \".\")) .....Hello   padEnd() Thêm ký tự vào cuối chuỗi cho đến khi đạt độ dài chỉ định let str = \"Hello\"; console.log(str.padEnd(10, \".\")) Hello.....   repeat() Lặp lại chuỗi let str = \"Hello\"; console.log(str.repeat(3)) HelloHelloHello   replace() Thay thế chuỗi con trong chuỗi let str = \"Hello\"; console.log(str.replace(\"He\", \"Hi\")) Hillo   replaceAll() Thay thế tất cả chuỗi con trong chuỗi let str = \"Hello\"; console.log(str.replaceAll(\"l\", \"L\")) HeLLo   split() Tách chuỗi thành mảng let str = \"Hello\"; console.log(str.split(\"\")) [\"H\", \"e\", \"l\", \"l\", \"o\"]"
    },
    {
        "title": "String search",
        "content": "String search                               Có khá nhiều phương thức giúp bạn tìm kiếm chuỗi con trong chuỗi.                 Phương thức Mô tả Ví dụ Kết quả   indexOf() Tìm kiếm chuỗi con trong chuỗi và trả về vị trí đầu tiên của chuỗi con đó (nếu không tìm thấy trả về -1) let str = \"Hello\"; console.log(str.indexOf(\"l\")) 2   lastIndexOf() Tìm kiếm chuỗi con trong chuỗi và trả về vị trí cuối cùng của chuỗi con đó (nếu không tìm thấy trả về -1) let str = \"Hello\"; console.log(str.lastIndexOf(\"l\")) 3   includes() Trả về true nếu chuỗi chứa chuỗi con, ngược lại trả về false let str = \"Hello\"; console.log(str.includes(\"l\")) true   startsWith() Trả về true nếu chuỗi bắt đầu bằng chuỗi con, ngược lại trả về false let str = \"Hello\"; console.log(str.startsWith(\"H\")) true   endsWith() Trả về true nếu chuỗi kết thúc bằng chuỗi con, ngược lại trả về false let str = \"Hello\"; console.log(str.endsWith(\"o\")) true   match() Tìm kiếm chuỗi con trong chuỗi và trả về mảng chứa chuỗi con đó (nếu không tìm thấy trả về null) let str = \"Hello\"; console.log(str.match(\"l\")) [\"l\"]   search() Tìm kiếm chuỗi con trong chuỗi và trả về vị trí đầu tiên của chuỗi con đó (nếu không tìm thấy trả về -1) let str = \"Hello\"; console.log(str.search(\"l\")) 2   matchAll() Tìm kiếm chuỗi con trong chuỗi và trả về mảng chứa tất cả chuỗi con đó (nếu không tìm thấy trả về null) let str = \"Hello World! Hello World!\";  console.log(str.matchAll(\"Hello\")) [\"Hello\", \"Hello\"]"
    },
    {
        "title": "Mảng trong javaScript",
        "content": "Mảng trong javaScript                               Trong javaScript, mảng là một kiểu dữ liệu dùng để lưu trữ nhiều giá trị trong một biến.                               Mảng trong javaScript được đặt trong dấu ngoặc vuông [ ].                               Mảng trong javaScript có thể chứa nhiều kiểu dữ liệu khác nhau.              Khai báo mảng const tên_mảng = [\"phần_tử_1\", \"phần_tử_2\", \"phần_tử_3\"...]; Ví dụ const fruits = [\"Apple\", \"Banana\", \"Orange\"];                  Trong ví dụ trên, fruits là mảng chứa các loại trái cây.                               Bạn cũng có thể khai báo mảng rỗng. Ví dụ: const fruits = []; Sau đó thêm các phần tử vào mảng:                 fruits[0] = \"Apple\"; fruits[1] = \"Banana\"; fruits[2] = \"Orange\";                   Để truy cập đến một phần tử trong mảng, bạn cần sử dụng chỉ số của phần tử đó.                 Ví dụ: fruits[0] sẽ trả về \"Apple\".                               Để thay đổi giá trị của một phần tử trong mảng, bạn cần truy cập đến phần tử đó và gán giá trị mới cho nó.                 Ví dụ: fruits[0] = \"Mango\";                   Để chuyển từ mảng thành chuỗi dùng phương thức toString().                               Thêm phần tử mới vào mảng dùng phương thức push().                 Ví dụ: fruits.push(\"Mango\"); Hoặc dùng chỉ số của phần tử cuối cùng + 1: fruits[fruits.length] = \"Mango\";                        Thêm phần tử bằng chỉ số có thể tạo ra lỗ hổng trong mảng."
    },
    {
        "title": "Các phương thức của mảng",
        "content": "Các phương thức của mảng                 Phương thức Mô tả Ví dụ Kết quả   length Trả về độ dài của mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let length = fruits.length; console.log(length); 3   push() Thêm phần tử vào cuối mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.push(\"Mango\"); console.log(fruits); [\"Apple\", \"Banana\", \"Orange\", \"Mango\"]   pop() Xóa phần tử cuối cùng của mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.pop(); console.log(fruits); [\"Apple\", \"Banana\"]   shift() Xóa phần tử đầu tiên của mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.shift(); console.log(fruits); [\"Banana\", \"Orange\"]   unshift() Thêm phần tử vào đầu mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.unshift(\"Mango\"); console.log(fruits); [\"Mango\", \"Apple\", \"Banana\", \"Orange\"]   spliced() - Thêm phần tử Thêm phần tử vào vị trí chỉ định trong mảng với giá trị lần lượt là `vị trí cần chèn`, `số phần tử xóa đi`, `danh sách các phần tử` const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.splice(1, 0, \"Mango\"); console.log(fruits); [\"Apple\", \"Mango\", \"Banana\", \"Orange\"]   spliced() - Xóa phần tử Xóa phần tử từ vị trí chỉ định trong mảng với giá trị lần lượt là `vị trí cần xóa`, `số phần tử cần xóa` const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.splice(1, 1); console.log(fruits); [\"Apple\", \"Orange\"]   slice() Trả về một phần của mảng từ vị trí start đến vị trí end - 1 const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let newFruits = fruits.slice(1, 2); console.log(newFruits); [\"Banana\"]   concat() Nối mảng const fruits1 = [\"Apple\", \"Banana\"]; const fruits2 = [\"Orange\", \"Mango\"]; let newFruits = fruits1.concat(fruits2); console.log(newFruits); [\"Apple\", \"Banana\", \"Orange\", \"Mango\"]   reverse() Đảo ngược mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.reverse(); console.log(fruits); [\"Orange\", \"Banana\", \"Apple\"]   sort() Sắp xếp mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.sort(); console.log(fruits); [\"Apple\", \"Banana\", \"Orange\"]   join() Chuyển mảng thành chuỗi const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let str = fruits.join(\", \"); console.log(str); Apple, Banana, Orange   toString() Chuyển mảng thành chuỗi const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let str = fruits.toString(); console.log(str); Apple, Banana, Orange   indexOf() Tìm kiếm phần tử trong mảng và trả về vị trí đầu tiên của phần tử đó (nếu không tìm thấy trả về -1) const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let index = fruits.indexOf(\"Banana\"); console.log(index); 1   lastIndexOf() Tìm kiếm phần tử trong mảng và trả về vị trí cuối cùng của phần tử đó (nếu không tìm thấy trả về -1) const fruits = [\"Apple\", \"Banana\", \"Orange\", \"Banana\"]; let index = fruits.lastIndexOf(\"Banana\"); console.log(index); 3   includes() Trả về true nếu mảng chứa phần tử, ngược lại trả về false const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let isExist = fruits.includes(\"Banana\"); console.log(isExist); true   forEach() Thực thi một hàm cho mỗi phần tử trong mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; fruits.forEach(function(fruit) {     console.log(fruit); }); Apple                             Banana                             Orange   map() Tạo một mảng mới từ kết quả của việc thực thi một hàm cho mỗi phần tử trong mảng const fruits = [\"Apple\", \"Banana\", \"Orange\"]; let newFruits = fruits.map(function(fruit) {     return fruit + \"!\"; }); console.log(newFruits); [\"Apple!\", \"Banana!\", \"Orange!\"]   filter() Tạo một mảng mới từ các phần tử thỏa mãn điều kiện của hàm const numbers = [1, 2, 3, 4, 5]; let newNumbers = numbers.filter(function(number) {     return number > 3; }); console.log(newNumbers); [4, 5]   reduce() Thực thi một hàm trên từng phần tử của mảng để tạo ra một giá trị duy nhất const numbers = [1, 2, 3, 4, 5]; let sum = numbers.reduce(function(total, number) {     return total + number; }); console.log(sum); 15   every() Trả về true nếu tất cả phần tử trong mảng thỏa mãn điều kiện của hàm, ngược lại trả về false const numbers = [1, 2, 3, 4, 5]; let isAll = numbers.every(function(number) {     return number > 0; }); console.log(isAll); true   some() Trả về true nếu một phần tử trong mảng thỏa mãn điều kiện của hàm, ngược lại trả về false const numbers = [1, 2, 3, 4, 5]; let isSome = numbers.some(function(number) {     return number > 3; }); console.log(isSome); true   find() Trả về giá trị của phần tử đầu tiên trong mảng thỏa mãn điều kiện của hàm (nếu không tìm thấy trả về undefined) const numbers = [1, 2, 3, 4, 5]; let number = numbers.find(function(number) {     return number > 3; }); console.log(number); 4   findIndex() Trả về vị trí của phần tử đầu tiên trong mảng thỏa mãn điều kiện của hàm (nếu không tìm thấy trả về -1) const numbers = [1, 2, 3, 4, 5]; let index = numbers.findIndex(function(number) {     return number > 3; }); console.log(index); 3"
    },
    {
        "title": "Date trong javaScript",
        "content": "Date trong javaScript                               Trong javaScript, đối tượng Date được sử dụng để làm việc với ngày tháng.                               Để tạo một đối tượng Date, bạn có thể sử dụng constructor new Date().                               Đối tượng Date sẽ lấy thời gian hiện tại của máy tính.                               Đối tượng Date cũng có thể lấy thời gian từ một chuỗi ngày tháng hoặc từ các tham số ngày tháng.                               Đối tượng Date lưu trữ thời gian dưới dạng số mili giây kể từ 1/1/1970.                               Để lấy thời gian hiện tại, bạn có thể sử dụng phương thức Date().              Ví dụ let date = new Date(); console.log(date);                  Trong ví dụ trên, date là một đối tượng Date chứa thời gian hiện tại.                               Để lấy thời gian từ một chuỗi ngày tháng, bạn cần truyền chuỗi ngày tháng đó vào constructor new Date().              Ví dụ let date = new Date(\"2021-01-01\"); console.log(date);                  Trong ví dụ trên, date là một đối tượng Date chứa thời gian từ chuỗi \"2021-01-01\".                               Để lấy thời gian từ các tham số ngày tháng, bạn cần truyền các tham số ngày, tháng, năm vào constructor new Date().              Ví dụ let date = new Date(2021, 0, 1); console.log(date);                  Trong ví dụ trên, date là một đối tượng Date chứa thời gian từ các tham số ngày 1, tháng 0 (tháng 1), năm 2021."
    },
    {
        "title": "Date format",
        "content": "Date format                               ISO Date                               ISO Date là một chuẩn quốc tế để hiển thị ngày tháng.                               ISO Date có định dạng: YYYY-MM-DDTHH:MM:SSZ.                               Trong đó:                 YYYY: Năm (4 chữ số)                 MM: Tháng (2 chữ số)                 DD: Ngày (2 chữ số)                 T: Ký tự \"T\" phân tách ngày và giờ                 HH: Giờ (2 chữ số)                 MM: Phút (2 chữ số)                 SS: Giây (2 chữ số)                 Z: Ký tự \"Z\" (giờ UTC)                               Ví dụ: 2021-01-01T12:00:00Z                               Short Date                               Short Date có định dạng: MM/DD/YYYY.                               Ví dụ: 01/01/2021                               Long Date                               Long Date có định dạng: MMM DD YYYY.                               Ví dụ: Jan 01 2021"
    },
    {
        "title": "Các phương thức của Date",
        "content": "Các phương thức của Date                 Phương thức Mô tả Ví dụ Kết quả   getFullYear() Trả về năm let date = new Date(); let year = date.getFullYear(); console.log(year); 2024   getMonth() Trả về tháng (0-11) let date = new Date(); let month = date.getMonth(); console.log(month); 0   getDate() Trả về ngày let date = new Date(); let day = date.getDate(); console.log(day); 1   getDay() Trả về ngày trong tuần (0-6) let date = new Date(); let day = date.getDay(); console.log(day); 5   getHours() Trả về giờ let date = new Date(); let hours = date.getHours(); console.log(hours); 12   getMinutes() Trả về phút let date = new Date(); let minutes = date.getMinutes(); console.log(minutes); 0   getSeconds() Trả về giây let date = new Date(); let seconds = date.getSeconds(); console.log(seconds); 0   getMilliseconds() Trả về mili giây let date = new Date(); let milliseconds = date.getMilliseconds(); console.log(milliseconds); 0   getTime() Trả về thời gian dưới dạng số mili giây kể từ 1/1/1970 let date = new Date(); let time = date.getTime(); console.log(time); 1640995200000   setFullYear() Đặt năm let date = new Date(); date.setFullYear(2024); console.log(date); Thu Jan 01 2024 12:00:00 GMT+0700 (Indochina Time)   setMonth() Đặt tháng let date = new Date(); date.setMonth(0); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   setDate() Đặt ngày let date = new Date(); date.setDate(1); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   setHours() Đặt giờ let date = new Date(); date.setHours(12); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   setMinutes() Đặt phút let date = new Date(); date.setMinutes(0); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   setSeconds() Đặt giây let date = new Date(); date.setSeconds(0); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   setMilliseconds() Đặt mili giây let date = new Date(); date.setMilliseconds(0); console.log(date); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   toString() Chuyển đối tượng Date thành chuỗi let date = new Date(); let str = date.toString(); console.log(str); Wed Jan 01 2020 12:00:00 GMT+0700 (Indochina Time)   toDateString() Chuyển đối tượng Date thành chuỗi ngày tháng let date = new Date(); let str = date.toDateString(); console.log(str); Wed Jan 01 2020   toTimeString() Chuyển đối tượng Date thành chuỗi giờ phút giây let date = new Date(); let str = date.toTimeString(); console.log(str); 12:00:00 GMT+0700 (Indochina Time)   toISOString() Chuyển đối tượng Date thành chuỗi ISO let date = new Date(); let str = date.toISOString(); console.log(str); 2020-01-01T05:00:00.000Z   toLocaleString() Chuyển đối tượng Date thành chuỗi ngày tháng giờ phút giây let date = new Date(); let str = date.toLocaleString(); console.log(str); 1/1/2020, 12:00:00 PM   toLocaleDateString() Chuyển đối tượng Date thành chuỗi ngày tháng let date = new Date(); let str = date.toLocaleDateString(); console.log(str); 1/1/2020   toLocaleTimeString() Chuyển đối tượng Date thành chuỗi giờ phút giây let date = new Date(); let str = date.toLocaleTimeString(); console.log(str); 12:00:00 PM   UTC() Trả về thời gian theo múi giờ UTC let date = new Date(); let utc = date.toUTCString(); console.log(utc); Wed, 01 Jan 2020 05:00:00 GMT   valueOf() Trả về thời gian dưới dạng số mili giây kể từ 1/1/1970 let date = new Date(); let value = date.valueOf(); console.log(value); 1577851200000"
    },
    {
        "title": "Math trong javaScript",
        "content": "Math trong javaScript                                    Math properties                     Thuộc tính Giá trị Mô tả   Math.E 2.718281828459045 Định nghĩa số e   Math.PI 3.141592653589793 Định nghĩa số pi   Math.SQRT2 1.4142135623730951 Định nghĩa căn bậc 2 của 2   Math.SQRT1_2 0.7071067811865476 Định nghĩa căn bậc 2 của 1/2   Math.LN2 0.6931471805599453 Định nghĩa logarit tự nhiên của 2   Math.LN10 2.302585092994046 Định nghĩa logarit tự nhiên của 10   Math.LOG2E 1.4426950408889634 Định nghĩa logarit cơ số 2 của e   Math.LOG10E 0.4342944819032518 Định nghĩa logarit cơ số 10 của e                           Math methods                     Phương thức Mô tả Ví dụ Kết quả   Math.abs() Trả về giá trị tuyệt đối let abs = Math.abs(-5); console.log(abs); 5   Math.ceil() Làm tròn lên let ceil = Math.ceil(4.2); console.log(ceil); 5   Math.floor() Làm tròn xuống let floor = Math.floor(4.7); console.log(floor); 4   Math.round() Làm tròn let round = Math.round(4.5); console.log(round); 5   Math.max() Trả về giá trị lớn nhất let max = Math.max(1, 2, 3, 4, 5); console.log(max); 5   Math.min() Trả về giá trị nhỏ nhất let min = Math.min(1, 2, 3, 4, 5); console.log(min); 1   Math.pow() Trả về giá trị của số mũ let pow = Math.pow(2, 3); console.log(pow); 8   Math.sqrt() Trả về căn bậc 2 let sqrt = Math.sqrt(9); console.log(sqrt); 3   Math.cbrt() Trả về căn bậc 3 let cbrt = Math.cbrt(27); console.log(cbrt); 3   Math.exp() Trả về giá trị của e mũ let exp = Math.exp(1); console.log(exp); 2.718281828459045   Math.log() Trả về logarit tự nhiên let log = Math.log(2); console.log(log); 0.6931471805599453   Math.log10() Trả về logarit cơ số 10 let log10 = Math.log10(10); console.log(log10); 1   Math.log2() Trả về logarit cơ số 2 let log2 = Math.log2(2); console.log(log2); 1   Math.sin() Trả về sin let sin = Math.sin(Math.PI / 2); console.log(sin); 1   Math.cos() Trả về cos let cos = Math.cos(0); console.log(cos); 1   Math.tan() Trả về tan let tan = Math.tan(0); console.log(tan); 0   Math.asin() Trả về arcsin let asin = Math.asin(1); console.log(asin); 1.5707963267948966   Math.acos() Trả về arccos let acos = Math.acos(1); console.log(acos); 0   Math.atan() Trả về arctan let atan = Math.atan(0); console.log(atan); 0   Math.atan2() Trả về arctan của hai số let atan2 = Math.atan2(0, 1); console.log(atan2); 0   Math.sinh() Trả về sinh let sinh = Math.sinh(0); console.log(sinh); 0   Math.cosh() Trả về cosh let cosh = Math.cosh(0); console.log(cosh); 1   Math.tanh() Trả về tanh let tanh = Math.tanh(0); console.log(tanh); 0   Math.asinh() Trả về arsinh let asinh = Math.asinh(0); console.log(asinh); 0   Math.acosh() Trả về arcosh let acosh = Math.acosh(1); console.log(acosh); 0   Math.atanh() Trả về artanh let atanh = Math.atanh(0); console.log(atanh); 0   Math.random() Trả về số ngẫu nhiên từ 0 đến 1 let random = Math.random(); console.log(random); 0.123456789                           Ứng dụng của Math.random()                                       Phương thức Math.random() được sử dụng để tạo số ngẫu nhiên từ 0 đến 1.                                       Để tạo số ngẫu nhiên trong một khoảng cụ thể, bạn có thể sử dụng công thức sau:                  let random = Math.floor(Math.random() * (max - min + 1)) + min;4                                      Trong đó:                     max: Giá trị lớn nhất                     min: Giá trị nhỏ nhất"
    },
    {
        "title": "Math properties",
        "content": "Math properties                     Thuộc tính Giá trị Mô tả   Math.E 2.718281828459045 Định nghĩa số e   Math.PI 3.141592653589793 Định nghĩa số pi   Math.SQRT2 1.4142135623730951 Định nghĩa căn bậc 2 của 2   Math.SQRT1_2 0.7071067811865476 Định nghĩa căn bậc 2 của 1/2   Math.LN2 0.6931471805599453 Định nghĩa logarit tự nhiên của 2   Math.LN10 2.302585092994046 Định nghĩa logarit tự nhiên của 10   Math.LOG2E 1.4426950408889634 Định nghĩa logarit cơ số 2 của e   Math.LOG10E 0.4342944819032518 Định nghĩa logarit cơ số 10 của e"
    },
    {
        "title": "Math methods",
        "content": "Math methods                     Phương thức Mô tả Ví dụ Kết quả   Math.abs() Trả về giá trị tuyệt đối let abs = Math.abs(-5); console.log(abs); 5   Math.ceil() Làm tròn lên let ceil = Math.ceil(4.2); console.log(ceil); 5   Math.floor() Làm tròn xuống let floor = Math.floor(4.7); console.log(floor); 4   Math.round() Làm tròn let round = Math.round(4.5); console.log(round); 5   Math.max() Trả về giá trị lớn nhất let max = Math.max(1, 2, 3, 4, 5); console.log(max); 5   Math.min() Trả về giá trị nhỏ nhất let min = Math.min(1, 2, 3, 4, 5); console.log(min); 1   Math.pow() Trả về giá trị của số mũ let pow = Math.pow(2, 3); console.log(pow); 8   Math.sqrt() Trả về căn bậc 2 let sqrt = Math.sqrt(9); console.log(sqrt); 3   Math.cbrt() Trả về căn bậc 3 let cbrt = Math.cbrt(27); console.log(cbrt); 3   Math.exp() Trả về giá trị của e mũ let exp = Math.exp(1); console.log(exp); 2.718281828459045   Math.log() Trả về logarit tự nhiên let log = Math.log(2); console.log(log); 0.6931471805599453   Math.log10() Trả về logarit cơ số 10 let log10 = Math.log10(10); console.log(log10); 1   Math.log2() Trả về logarit cơ số 2 let log2 = Math.log2(2); console.log(log2); 1   Math.sin() Trả về sin let sin = Math.sin(Math.PI / 2); console.log(sin); 1   Math.cos() Trả về cos let cos = Math.cos(0); console.log(cos); 1   Math.tan() Trả về tan let tan = Math.tan(0); console.log(tan); 0   Math.asin() Trả về arcsin let asin = Math.asin(1); console.log(asin); 1.5707963267948966   Math.acos() Trả về arccos let acos = Math.acos(1); console.log(acos); 0   Math.atan() Trả về arctan let atan = Math.atan(0); console.log(atan); 0   Math.atan2() Trả về arctan của hai số let atan2 = Math.atan2(0, 1); console.log(atan2); 0   Math.sinh() Trả về sinh let sinh = Math.sinh(0); console.log(sinh); 0   Math.cosh() Trả về cosh let cosh = Math.cosh(0); console.log(cosh); 1   Math.tanh() Trả về tanh let tanh = Math.tanh(0); console.log(tanh); 0   Math.asinh() Trả về arsinh let asinh = Math.asinh(0); console.log(asinh); 0   Math.acosh() Trả về arcosh let acosh = Math.acosh(1); console.log(acosh); 0   Math.atanh() Trả về artanh let atanh = Math.atanh(0); console.log(atanh); 0   Math.random() Trả về số ngẫu nhiên từ 0 đến 1 let random = Math.random(); console.log(random); 0.123456789"
    },
    {
        "title": "Ứng dụng của Math.random()",
        "content": "Ứng dụng của Math.random()                                       Phương thức Math.random() được sử dụng để tạo số ngẫu nhiên từ 0 đến 1.                                       Để tạo số ngẫu nhiên trong một khoảng cụ thể, bạn có thể sử dụng công thức sau:                  let random = Math.floor(Math.random() * (max - min + 1)) + min;4                                      Trong đó:                     max: Giá trị lớn nhất                     min: Giá trị nhỏ nhất"
    },
    {
        "title": "if - else và else if trong javaScript",
        "content": "if - else và else if trong javaScript                               Trong javaScript, câu lệnh if được sử dụng để kiểm tra một điều kiện.                               Nếu điều kiện đúng, câu lệnh bên trong if sẽ được thực thi.                               Nếu điều kiện sai, câu lệnh bên trong else sẽ được thực thi.              Cú pháp if (condition) {     // code } else {     // code }                  Trong trường hợp có nhiều điều kiện, bạn có thể sử dụng câu lệnh else if.              Cú pháp if (condition1) {     // code } else if (condition2) {     // code } else {     // code }                  Trong trường hợp có nhiều điều kiện, chỉ có một điều kiện được thực thi.                               Nếu điều kiện đầu tiên đúng, câu lệnh bên trong if sẽ được thực thi.                               Nếu điều kiện thứ hai đúng, câu lệnh bên trong else if sẽ được thực thi.                               Nếu cả hai điều kiện đều sai, câu lệnh bên trong else sẽ được thực thi."
    },
    {
        "title": "switch case trong javaScript",
        "content": "switch case trong javaScript                               Trong javaScript, câu lệnh switch được sử dụng để kiểm tra một biến hoặc một biểu thức.                               Câu lệnh switch sẽ kiểm tra giá trị của biến hoặc biểu thức với các trường hợp (case) đã được xác định.                               Nếu giá trị của biến hoặc biểu thức trùng với một trường hợp, câu lệnh bên trong trường hợp đó sẽ được thực thi.                               Nếu không trùng với bất kỳ trường hợp nào, câu lệnh bên trong trường hợp mặc định (default) sẽ được thực thi.              Cú pháp switch (expression) {     case value1:         // code         break;     case value2:         // code         break;     default:         // code }                  Trong trường hợp giá trị của biến hoặc biểu thức trùng với một trường hợp, câu lệnh bên trong trường hợp đó sẽ được thực thi.                               Để kết thúc một trường hợp, bạn cần sử dụng câu lệnh break.                               Nếu không sử dụng câu lệnh break, các trường hợp phía sau trường hợp đó cũng sẽ được thực thi.                               Trường hợp mặc định (default) không bắt buộc."
    },
    {
        "title": "Vòng lặp trong javaScript",
        "content": "Vòng lặp trong javaScript                                    For loop                                       Vòng lặp for được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp for (initialization; condition; increment) {     // code }                      Trong đó:                     initialization: Khởi tạo giá trị ban đầu                     condition: Điều kiện lặp                     increment: Tăng giá trị                                       Ví dụ                  for (let i = 0; i < 5; i++) {     console.log(i); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4.                                         for in loop                                       Vòng lặp for in được sử dụng để lặp qua các thuộc tính của một đối tượng.                  Cú pháp for (variable in object) {     // code }                      Trong đó:                     variable: Tên biến                     object: Đối tượng                                       Ví dụ                  let person = {     name: 'John',     age: 30 };  for (let key in person) {     console.log(key + ': ' + person[key]); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các thuộc tính của đối tượng person.                                       Lưu ý: Vòng lặp for in không nên được sử dụng để lặp qua mảng.                      Để lặp qua mảng có thể dùng .forEach hoặc for of.                                         for of loop                                       Vòng lặp for of được sử dụng để lặp qua các phần tử của một mảng.                  Cú pháp for (variable of array) {     // code }                      Trong đó:                     variable: Tên biến                     array: Mảng                                       Ví dụ                  let fruits = ['apple', 'banana', 'cherry']; for (let fruit of fruits) {     console.log(fruit); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các phần tử của mảng fruits.                                       Bạn có thể dùng vòng lặp for of để lặp qua các phần tử của một chuỗi, Maps, Sets, NodeList, ...                                         while loop                                       Vòng lặp while được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp while (condition) {     // code }                      Trong đó:                     condition: Điều kiện lặp                                       Ví dụ                  let i = 0; while (i < 5) {     console.log(i);     i++; }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4.                                         do while loop                                       Vòng lặp do while được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp do {     // code } while (condition);                      Trong đó:                     condition: Điều kiện lặp                                       Ví dụ                  let i = 0; do {     console.log(i);     i++; } while (i < 5);                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4."
    },
    {
        "title": "For loop",
        "content": "For loop                                       Vòng lặp for được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp for (initialization; condition; increment) {     // code }                      Trong đó:                     initialization: Khởi tạo giá trị ban đầu                     condition: Điều kiện lặp                     increment: Tăng giá trị                                       Ví dụ                  for (let i = 0; i < 5; i++) {     console.log(i); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4."
    },
    {
        "title": "for in loop",
        "content": "for in loop                                       Vòng lặp for in được sử dụng để lặp qua các thuộc tính của một đối tượng.                  Cú pháp for (variable in object) {     // code }                      Trong đó:                     variable: Tên biến                     object: Đối tượng                                       Ví dụ                  let person = {     name: 'John',     age: 30 };  for (let key in person) {     console.log(key + ': ' + person[key]); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các thuộc tính của đối tượng person.                                       Lưu ý: Vòng lặp for in không nên được sử dụng để lặp qua mảng.                      Để lặp qua mảng có thể dùng .forEach hoặc for of."
    },
    {
        "title": "for of loop",
        "content": "for of loop                                       Vòng lặp for of được sử dụng để lặp qua các phần tử của một mảng.                  Cú pháp for (variable of array) {     // code }                      Trong đó:                     variable: Tên biến                     array: Mảng                                       Ví dụ                  let fruits = ['apple', 'banana', 'cherry']; for (let fruit of fruits) {     console.log(fruit); }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các phần tử của mảng fruits.                                       Bạn có thể dùng vòng lặp for of để lặp qua các phần tử của một chuỗi, Maps, Sets, NodeList, ..."
    },
    {
        "title": "while loop",
        "content": "while loop                                       Vòng lặp while được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp while (condition) {     // code }                      Trong đó:                     condition: Điều kiện lặp                                       Ví dụ                  let i = 0; while (i < 5) {     console.log(i);     i++; }                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4."
    },
    {
        "title": "do while loop",
        "content": "do while loop                                       Vòng lặp do while được sử dụng để lặp qua một chuỗi giá trị.                  Cú pháp do {     // code } while (condition);                      Trong đó:                     condition: Điều kiện lặp                                       Ví dụ                  let i = 0; do {     console.log(i);     i++; } while (i < 5);                      Trong ví dụ trên, vòng lặp sẽ lặp qua các giá trị từ 0 đến 4."
    },
    {
        "title": "Xử lý lỗi trong javaScript",
        "content": "Xử lý lỗi trong javaScript                               Trong javaScript, bạn có thể sử dụng câu lệnh try để thử một khối mã.                               Nếu có lỗi xảy ra, câu lệnh catch sẽ được thực thi.                               Nếu không có lỗi xảy ra, câu lệnh finally sẽ được thực thi.              Cú pháp try {     // code } catch (error) {     // code } finally {     // code }                  Trong đó:                 error: Lỗi                               Ví dụ              try {     let x = y; } catch (error) {     console.log(error); } finally {     console.log('Done'); }                  Trong ví dụ trên, biến y không được xác định, nên sẽ có lỗi xảy ra.                               Câu lệnh catch sẽ được thực thi và in ra lỗi.                               Câu lệnh finally sẽ được thực thi và in ra 'Done'.                                    Câu lệnh throw                                       Trong javaScript, câu lệnh throw được sử dụng để tạo ra một lỗi.                                       Bạn có thể sử dụng câu lệnh throw để tạo ra một lỗi trong một hàm.                                       Nếu có lỗi xảy ra, câu lệnh catch sẽ được thực thi.                                       Nếu không có lỗi xảy ra, câu lệnh finally sẽ được thực thi.                  Cú pháp try {     throw 'Error'; } catch (error) {     console.log(error); } finally {     console.log('Done'); }                      Trong ví dụ trên, câu lệnh throw sẽ tạo ra một lỗi.                                       Câu lệnh catch sẽ được thực thi và in ra lỗi.                                       Câu lệnh finally sẽ được thực thi và in ra 'Done'.                                         Ứng dụng trong kiểm tra giá trị người dùng nhập vào                   <input type=\"text\" id=\"inputNumber\" placeholder=\"Nhập số từ 1 - 100\"> <button onclick=\"checkNumber()\">Kiểm tra</button> <p id=\"result\"></p> function checkNumber() {     let number = document.getElementById('inputNumber').value;     try {         if (number === '') throw 'Vui lòng nhập số';         if (isNaN(number)) throw 'Vui lòng nhập số';         if (number < 1 || number > 100) throw 'Vui lòng nhập số từ 1 - 100';         document.getElementById('result').innerHTML = 'Số bạn vừa nhập là: ' + number;     } catch (error) {         document.getElementById('result').innerHTML = error;     } }                      Trong ví dụ trên, hàm checkNumber() sẽ kiểm tra giá trị người dùng nhập vào.                                       Nếu giá trị người dùng nhập vào không phải là số hoặc không nằm trong khoảng từ 1 - 100, sẽ có lỗi xảy ra.                                       Câu lệnh catch sẽ được thực thi và in ra lỗi.                   Kiểm tra"
    },
    {
        "title": "Câu lệnh throw",
        "content": "Câu lệnh throw                                       Trong javaScript, câu lệnh throw được sử dụng để tạo ra một lỗi.                                       Bạn có thể sử dụng câu lệnh throw để tạo ra một lỗi trong một hàm.                                       Nếu có lỗi xảy ra, câu lệnh catch sẽ được thực thi.                                       Nếu không có lỗi xảy ra, câu lệnh finally sẽ được thực thi.                  Cú pháp try {     throw 'Error'; } catch (error) {     console.log(error); } finally {     console.log('Done'); }                      Trong ví dụ trên, câu lệnh throw sẽ tạo ra một lỗi.                                       Câu lệnh catch sẽ được thực thi và in ra lỗi.                                       Câu lệnh finally sẽ được thực thi và in ra 'Done'."
    },
    {
        "title": "Ứng dụng trong kiểm tra giá trị người dùng nhập vào",
        "content": "Ứng dụng trong kiểm tra giá trị người dùng nhập vào                   <input type=\"text\" id=\"inputNumber\" placeholder=\"Nhập số từ 1 - 100\"> <button onclick=\"checkNumber()\">Kiểm tra</button> <p id=\"result\"></p> function checkNumber() {     let number = document.getElementById('inputNumber').value;     try {         if (number === '') throw 'Vui lòng nhập số';         if (isNaN(number)) throw 'Vui lòng nhập số';         if (number < 1 || number > 100) throw 'Vui lòng nhập số từ 1 - 100';         document.getElementById('result').innerHTML = 'Số bạn vừa nhập là: ' + number;     } catch (error) {         document.getElementById('result').innerHTML = error;     } }                      Trong ví dụ trên, hàm checkNumber() sẽ kiểm tra giá trị người dùng nhập vào.                                       Nếu giá trị người dùng nhập vào không phải là số hoặc không nằm trong khoảng từ 1 - 100, sẽ có lỗi xảy ra.                                       Câu lệnh catch sẽ được thực thi và in ra lỗi.                   Kiểm tra"
    },
    {
        "title": "JavaScript Hoisting",
        "content": "JavaScript Hoisting                               Trong javaScript, biến có thể được sử dụng trước khi nó được khai báo.                               Điều này được gọi là hoisting.                               Hoisting là quá trình di chuyển các khai báo lên trên cùng của phạm vi.                               Trong javaScript, biến có thể được sử dụng trước khi nó được khai báo.                               Tuy nhiên, chỉ khai báo được di chuyển lên trên cùng, giá trị của biến không thể."
    },
    {
        "title": "\"use strict\" trong javaScript",
        "content": "\"use strict\" trong javaScript                               \"use strict\" là một cách để khai báo rằng mã hoặc chương trình phải được xử lý theo một tập hợp nghiêm ngặt các quy tắc.                               \"use strict\" không phải là một câu lệnh, mà là một biểu thức.                               \"use strict\" được thêm vào đầu của một chương trình hoặc một hàm.                               Khi \"use strict\" được sử dụng, chương trình sẽ chạy ở chế độ nghiêm ngặt.                               Một số lợi ích khi sử dụng \"use strict\":                                           Không thể sử dụng biến mà không khai báo                                               Không thể khai báo biến hai lần                                               Không thể xóa biến                                               Không thể sử dụng từ khóa dành riêng                                               Không thể sử dụng \"this\" ở ngoài hàm                                         Ví dụ              \"use strict\"; x = 10; console.log(x);                  Trong ví dụ trên, biến x không được khai báo, nên sẽ có lỗi xảy ra.                               Lưu ý: \"use strict\" không cho phép đặt tên biến bằng những từ khóa có khả năng xuất hiện trong tương lai.                                           implements                                               interface                                               let                                               package                                               private                                               protected                                               public                                               static                                               yield"
    },
    {
        "title": "Arrow function trong javaScript",
        "content": "Arrow function trong javaScript                               Arrow function là một cách viết hàm ngắn gọn hơn so với hàm thông thường.                               Arrow function không có từ khóa function.                               Arrow function không có this, arguments, super, new.target.                               Arrow function không thể sử dụng new để tạo đối tượng.                               Arrow function không thể sử dụng yield trong hàm generator.                               Arrow function không thể sử dụng call(), apply(), bind().              Cú pháp let functionName = (parameters) => {     // code }                  Ví dụ              let sum = (a, b) => {     return a + b; } console.log(sum(5, 10));                  Trong ví dụ trên, hàm sum sẽ trả về tổng của hai số.                               Bạn cũng có thể viết hàm ngắn gọn hơn như sau:              let sum = (a, b) => a + b; console.log(sum(5, 10));"
    },
    {
        "title": "Class trong javaScript",
        "content": "Class trong javaScript                               Trong javaScript, class là một cách để tạo đối tượng.                               Class giống như một bản thiết kế để tạo ra các đối tượng.                               Class được khai báo bằng từ khóa class.                               Class có thể chứa các thuộc tính và phương thức.                               Phương thức trong class không cần từ khóa function.                               Để tạo một đối tượng từ class, bạn cần sử dụng từ khóa new.              Cú pháp class className {     constructor(parameters) {         // code     }     methodName() {         // code     } }                  Ví dụ              class Person {     constructor(name, age) {         this.name = name;         this.age = age;     }     greeting() {         return 'Hello, my name is ' + this.name + ' and I am ' + this.age + ' years old.';     } }  let person = new Person('John', 30);  console.log(person.greeting());                  Trong ví dụ trên, class Person có hai thuộc tính là name và age.                               Class Person cũng có một phương thức là greeting()."
    },
    {
        "title": "Module trong javaScript",
        "content": "Module trong javaScript                               Trong javaScript, module là một cách để chia nhỏ mã thành các phần nhỏ.                               Module giúp mã trở nên dễ quản lý hơn.              Cú pháp // file1.js export function functionName() {     // code }  // file2.js import { functionName } from './file1.js';                  Trong đó:                 export: Dùng để xuất một hàm hoặc một biến                 import: Dùng để nhập một hàm hoặc một biến                               Ví dụ              // file1.js export function sum(a, b) {     return a + b; }  // file2.js import { sum } from './file1.js'; console.log(sum(5, 10));                  Trong ví dụ trên, hàm sum được xuất từ file1.js và được nhập vào file2.js."
    },
    {
        "title": "Tip viết code trong javaScript",
        "content": "Tip viết code trong javaScript                               Dưới đây là một số tip giúp bạn viết code hiệu quả hơn trong javaScript.                                    Tránh tạo những biến toàn cục (global variables)                                            Giảm thiểu việc sử dụng biến toàn cục                                               Các biến toàn cục có thể bị ghi đè bởi các biến khác                                               Sử dụng biến cục bộ (local variables) thay vì biến toàn cục                                              Luôn luôn khai báo biến                                            Tất cả biến dùng trong hàm phải được khai báo là biến cục bộ                                               nếu không khai báo biến, biến đó sẽ trở thành biến toàn cục                                              khai báo biến ở trên cùng                                            Khai báo tất cả biến ở đầu hàm hoặc đầu phạm vi                                               Giúp dễ dàng quản lý biến                                              Khởi tạo biến với giá trị mặc định                                            Khởi tạo biến với giá trị mặc định                                               Giúp tránh lỗi khi sử dụng biến                                               Khởi tạo array và object bằng const                                              Đừng dùng new Object khi không cần thiết                                            Dùng \"\" thay vì new String()                                               Dùng 0 thay vì new Number()                                               Dùng false thay vì new Boolean()                                               Dùng [] thay vì new Array()                                               Dùng {} thay vì new Object()                                               dùng /()/ thay vì new RegExp()                                               Dùng function(){} thay vì new Function()                                              Dùng === thay vì ==                                            Dùng === để so sánh giá trị và kiểu dữ liệu                                               Dùng == để so sánh giá trị                                              Kết thúc switch bằng default                                            Kết thúc switch bằng default                                               Tránh trường hợp không xác định"
    },
    {
        "title": "Tránh tạo những biến toàn cục (global variables)",
        "content": "Tránh tạo những biến toàn cục (global variables)                                            Giảm thiểu việc sử dụng biến toàn cục                                               Các biến toàn cục có thể bị ghi đè bởi các biến khác                                               Sử dụng biến cục bộ (local variables) thay vì biến toàn cục"
    },
    {
        "title": "Luôn luôn khai báo biến",
        "content": "Luôn luôn khai báo biến                                            Tất cả biến dùng trong hàm phải được khai báo là biến cục bộ                                               nếu không khai báo biến, biến đó sẽ trở thành biến toàn cục"
    },
    {
        "title": "khai báo biến ở trên cùng",
        "content": "khai báo biến ở trên cùng                                            Khai báo tất cả biến ở đầu hàm hoặc đầu phạm vi                                               Giúp dễ dàng quản lý biến"
    },
    {
        "title": "Khởi tạo biến với giá trị mặc định",
        "content": "Khởi tạo biến với giá trị mặc định                                            Khởi tạo biến với giá trị mặc định                                               Giúp tránh lỗi khi sử dụng biến                                               Khởi tạo array và object bằng const"
    },
    {
        "title": "Đừng dùng new Object khi không cần thiết",
        "content": "Đừng dùng new Object khi không cần thiết                                            Dùng \"\" thay vì new String()                                               Dùng 0 thay vì new Number()                                               Dùng false thay vì new Boolean()                                               Dùng [] thay vì new Array()                                               Dùng {} thay vì new Object()                                               dùng /()/ thay vì new RegExp()                                               Dùng function(){} thay vì new Function()"
    },
    {
        "title": "Dùng === thay vì ==",
        "content": "Dùng === thay vì ==                                            Dùng === để so sánh giá trị và kiểu dữ liệu                                               Dùng == để so sánh giá trị"
    },
    {
        "title": "Kết thúc switch bằng default",
        "content": "Kết thúc switch bằng default                                            Kết thúc switch bằng default                                               Tránh trường hợp không xác định"
    },
    {
        "title": "javaScript HTML DOM",
        "content": "javaScript HTML DOM                               Trong javaScript, DOM (Document Object Model) là một cách để truy cập, thay đổi, thêm hoặc xóa các phần tử HTML.                               DOM là một biểu diễn của trang web dưới dạng một cây.                               Mỗi phần tử HTML được coi là một đối tượng trong DOM.                               Để truy cập một phần tử HTML, bạn cần sử dụng các phương thức sau:                   document.getElementById(id): Trả về một phần tử theo id                       document.getElementsByTagName(name): Trả về một mảng các phần tử theo tên thẻ                       document.getElementsByClassName(name): Trả về một mảng các phần tử theo tên class                       document.querySelector(selector): Trả về phần tử đầu tiên theo selector                       document.querySelectorAll(selector): Trả về một mảng các phần tử theo selector"
    },
    {
        "title": "DOM method",
        "content": "DOM method                                    innerHTML                                       Phương thức innerHTML được sử dụng để lấy hoặc thay đổi nội dung của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.innerHTML = 'Hello, world!';                      Trong ví dụ trên, nội dung của phần tử có id là demo sẽ được thay đổi thành 'Hello, world!'.                                         innerText                                       Phương thức innerText được sử dụng để lấy hoặc thay đổi nội dung văn bản của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.innerText = 'Hello, world!';                      Trong ví dụ trên, nội dung văn bản của phần tử có id là demo sẽ được thay đổi thành 'Hello, world!'.                                         setAttribute                                       Phương thức setAttribute được sử dụng để thêm một thuộc tính mới hoặc thay đổi giá trị của một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.setAttribute('class', 'new-class');                      Trong ví dụ trên, một thuộc tính mới có tên là class và giá trị là new-class sẽ được thêm vào phần tử có id là demo.                                         getAttribute                                       Phương thức getAttribute được sử dụng để lấy giá trị của một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); let value = element.getAttribute('class'); console.log(value);                      Trong ví dụ trên, giá trị của thuộc tính class của phần tử có id là demo sẽ được lấy ra và in ra màn hình.                                         removeAttribute                                       Phương thức removeAttribute được sử dụng để xóa một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.removeAttribute('class');                      Trong ví dụ trên, thuộc tính class của phần tử có id là demo sẽ bị xóa.                                         style                                       Thuộc tính style được sử dụng để thay đổi kiểu CSS của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.style.color = 'red';                        classList                                       Thuộc tính classList được sử dụng để thêm, xóa hoặc kiểm tra một class của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.classList.add('new-class'); element.classList.remove('old-class'); element.classList.toggle('active'); element.classList.contains('new-class');                        addEventListener                                       Phương thức addEventListener được sử dụng để thêm một sự kiện cho một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', function() {     alert('Hello, world!'); });"
    },
    {
        "title": "innerHTML",
        "content": "innerHTML                                       Phương thức innerHTML được sử dụng để lấy hoặc thay đổi nội dung của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.innerHTML = 'Hello, world!';                      Trong ví dụ trên, nội dung của phần tử có id là demo sẽ được thay đổi thành 'Hello, world!'."
    },
    {
        "title": "innerText",
        "content": "innerText                                       Phương thức innerText được sử dụng để lấy hoặc thay đổi nội dung văn bản của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.innerText = 'Hello, world!';                      Trong ví dụ trên, nội dung văn bản của phần tử có id là demo sẽ được thay đổi thành 'Hello, world!'."
    },
    {
        "title": "setAttribute",
        "content": "setAttribute                                       Phương thức setAttribute được sử dụng để thêm một thuộc tính mới hoặc thay đổi giá trị của một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.setAttribute('class', 'new-class');                      Trong ví dụ trên, một thuộc tính mới có tên là class và giá trị là new-class sẽ được thêm vào phần tử có id là demo."
    },
    {
        "title": "getAttribute",
        "content": "getAttribute                                       Phương thức getAttribute được sử dụng để lấy giá trị của một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); let value = element.getAttribute('class'); console.log(value);                      Trong ví dụ trên, giá trị của thuộc tính class của phần tử có id là demo sẽ được lấy ra và in ra màn hình."
    },
    {
        "title": "removeAttribute",
        "content": "removeAttribute                                       Phương thức removeAttribute được sử dụng để xóa một thuộc tính của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.removeAttribute('class');                      Trong ví dụ trên, thuộc tính class của phần tử có id là demo sẽ bị xóa."
    },
    {
        "title": "style",
        "content": "style                                       Thuộc tính style được sử dụng để thay đổi kiểu CSS của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.style.color = 'red';"
    },
    {
        "title": "classList",
        "content": "classList                                       Thuộc tính classList được sử dụng để thêm, xóa hoặc kiểm tra một class của một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.classList.add('new-class'); element.classList.remove('old-class'); element.classList.toggle('active'); element.classList.contains('new-class');"
    },
    {
        "title": "addEventListener",
        "content": "addEventListener                                       Phương thức addEventListener được sử dụng để thêm một sự kiện cho một phần tử HTML.                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', function() {     alert('Hello, world!'); });"
    },
    {
        "title": "Thêm và xóa phần tử trong javaScript",
        "content": "Thêm và xóa phần tử trong javaScript                                    Thêm phần tử                                       Để thêm một phần tử vào một phần tử khác, bạn có thể sử dụng các phương thức sau:                       appendChild(): Thêm một phần tử vào cuối một phần tử                           insertBefore(): Thêm một phần tử vào trước một phần tử                           innerHTML: Thêm nội dung vào một phần tử                                                 Ví dụ                  let element = document.createElement('div'); element.innerHTML = 'Hello, world!'; document.body.appendChild(element);                      Trong ví dụ trên, một phần tử div sẽ được tạo ra và thêm vào cuối phần tử body.                                         Xóa phần tử                                       Để xóa một phần tử, bạn có thể sử dụng phương thức removeChild().                                       Ví dụ                  let element = document.getElementById('demo'); element.parentNode.removeChild(element);                      Trong ví dụ trên, phần tử có id là demo sẽ bị xóa.                                         Thay thế phần tử                                       Để thay thế một phần tử, bạn có thể sử dụng phương thức replaceChild().                                       Ví dụ                  let element = document.createElement('div'); element.innerHTML = 'Hello, world!'; document.body.replaceChild(element, document.getElementById('demo'));                      Trong ví dụ trên, phần tử có id là demo sẽ bị thay thế bằng phần tử div mới."
    },
    {
        "title": "Thêm phần tử",
        "content": "Thêm phần tử                                       Để thêm một phần tử vào một phần tử khác, bạn có thể sử dụng các phương thức sau:                       appendChild(): Thêm một phần tử vào cuối một phần tử                           insertBefore(): Thêm một phần tử vào trước một phần tử                           innerHTML: Thêm nội dung vào một phần tử                                                 Ví dụ                  let element = document.createElement('div'); element.innerHTML = 'Hello, world!'; document.body.appendChild(element);                      Trong ví dụ trên, một phần tử div sẽ được tạo ra và thêm vào cuối phần tử body."
    },
    {
        "title": "Xóa phần tử",
        "content": "Xóa phần tử                                       Để xóa một phần tử, bạn có thể sử dụng phương thức removeChild().                                       Ví dụ                  let element = document.getElementById('demo'); element.parentNode.removeChild(element);                      Trong ví dụ trên, phần tử có id là demo sẽ bị xóa."
    },
    {
        "title": "Thay thế phần tử",
        "content": "Thay thế phần tử                                       Để thay thế một phần tử, bạn có thể sử dụng phương thức replaceChild().                                       Ví dụ                  let element = document.createElement('div'); element.innerHTML = 'Hello, world!'; document.body.replaceChild(element, document.getElementById('demo'));                      Trong ví dụ trên, phần tử có id là demo sẽ bị thay thế bằng phần tử div mới."
    },
    {
        "title": "Tìm objects HTML trong javaScript",
        "content": "Tìm objects HTML trong javaScript                                              Phương thức                                                       Mô tả                                                         document.anchors                                                       Trả về một mảng các phần tử <a> có thuộc tính name                                 document.body                                                       Trả về phần tử body                                 document.baseURL                                                       Trả về URL cơ sở của trang                                                         document.cookie                                                       Trả về tất cả cookie của trang                                                         document.doctype                                                       Trả về loại tài liệu của trang                                                         document.documentElement                                                       Trả về phần tử html                                 document.documentMode                                                       Trả về chế độ tài liệu của trang                                                         document.documentURI                                                       Trả về URI của tài liệu                                                         document.domain                                                       Trả về tên miền của tài liệu                                                         document.forms                                                       Trả về mảng các phần tử <form>                                 document.head                                                       Trả về phần tử head                                 document.images                                                       Trả về mảng các phần tử <img>                                 document.links                                                       Trả về mảng các phần tử <a> có thuộc tính href                                 document.readyState                                                       Trả về trạng thái tải của tài liệu                                                         document.referrer                                                       Trả về URL của trang web mà đã chuyển hướng đến trang hiện tại                                                         document.scripts                                                       Trả về mảng các phần tử <script>                                 document.title                                                       Trả về tiêu đề của tài liệu                                                         document.URL                                                       Trả về URL của tài liệu"
    },
    {
        "title": "JavaScript - form",
        "content": "JavaScript - form                               Trong javaScript, form là một cách để lấy dữ liệu từ người dùng.                               Để lấy dữ liệu từ form, bạn có thể sử dụng các phương thức sau:                   document.forms: Trả về mảng các form trong trang                       document.forms[index]: Trả về form theo index                       document.forms[name]: Trả về form theo name                       document.forms.id: Trả về form theo id                       document.forms[index].elements: Trả về mảng các phần tử trong form                       document.forms[index].elements[index]: Trả về phần tử trong form theo index                       document.forms[index].elements[name]: Trả về phần tử trong form theo name                       document.forms[index].elements.id: Trả về phần tử trong form theo id                       document.forms[index].elements[index].value: Trả về giá trị của phần tử trong form theo index                       document.forms[index].elements[name].value: Trả về giá trị của phần tử trong form theo name                       document.forms[index].elements.id.value: Trả về giá trị của phần tử trong form theo id                                              javascript form validation                                       Trong javaScript, form validation là một cách để kiểm tra dữ liệu người dùng nhập vào form.                                       Ví dụ                      <form id=\"myForm\" onsubmit=\"return validateForm()\">     <input type=\"text\" id=\"name\" placeholder=\"Nhập tên\">     <input type=\"email\" id=\"email\" placeholder=\"Nhập email\">     <button type=\"submit\">Gửi</button> </form> <p id=\"result\"></p> function validateForm() {     let name = document.getElementById('name').value;     let email = document.getElementById('email').value;     if (name === '') {         alert('Vui lòng nhập tên');         return false;     }     if (email === '') {         alert('Vui lòng nhập email');         return false;     }     return true; }                      Trong ví dụ trên, hàm validateForm() sẽ kiểm tra xem người dùng đã nhập đủ thông tin hay chưa.                                       Nếu người dùng không nhập đủ thông tin, sẽ có thông báo lỗi xuất hiện.                                       Nếu người dùng đã nhập đủ thông tin, form sẽ được gửi đi.                     Gửi                         Để tự động kiểm tra dữ liệu người dùng nhập vào form, bạn có thể sử dụng các thuộc tính sau:                       required: Bắt buộc người dùng nhập dữ liệu                           minlength: Số ký tự tối thiểu                           maxlength: Số ký tự tối đa                           pattern: Một biểu thức chính quy                                               Đối với nội dung là số, bạn có thể sử dụng các thuộc tính sau:                       min: Giá trị tối thiểu                           max: Giá trị tối đa                                               Đồng thời nhớ thêm thuộc tính type cho phần tử input."
    },
    {
        "title": "javascript form validation",
        "content": "javascript form validation                                       Trong javaScript, form validation là một cách để kiểm tra dữ liệu người dùng nhập vào form.                                       Ví dụ                      <form id=\"myForm\" onsubmit=\"return validateForm()\">     <input type=\"text\" id=\"name\" placeholder=\"Nhập tên\">     <input type=\"email\" id=\"email\" placeholder=\"Nhập email\">     <button type=\"submit\">Gửi</button> </form> <p id=\"result\"></p> function validateForm() {     let name = document.getElementById('name').value;     let email = document.getElementById('email').value;     if (name === '') {         alert('Vui lòng nhập tên');         return false;     }     if (email === '') {         alert('Vui lòng nhập email');         return false;     }     return true; }                      Trong ví dụ trên, hàm validateForm() sẽ kiểm tra xem người dùng đã nhập đủ thông tin hay chưa.                                       Nếu người dùng không nhập đủ thông tin, sẽ có thông báo lỗi xuất hiện.                                       Nếu người dùng đã nhập đủ thông tin, form sẽ được gửi đi.                     Gửi                         Để tự động kiểm tra dữ liệu người dùng nhập vào form, bạn có thể sử dụng các thuộc tính sau:                       required: Bắt buộc người dùng nhập dữ liệu                           minlength: Số ký tự tối thiểu                           maxlength: Số ký tự tối đa                           pattern: Một biểu thức chính quy                                               Đối với nội dung là số, bạn có thể sử dụng các thuộc tính sau:                       min: Giá trị tối thiểu                           max: Giá trị tối đa                                               Đồng thời nhớ thêm thuộc tính type cho phần tử input."
    },
    {
        "title": "DOM - CSS",
        "content": "DOM - CSS                               CSS là một cách để thay đổi kiểu CSS của một phần tử HTML.                               Để thay đổi kiểu CSS của một phần tử HTML, bạn có thể sử dụng các phương thức sau:                   style: Thay đổi kiểu CSS của một phần tử                       classList: Thêm, xóa hoặc kiểm tra một class của một phần tử                                              Thay đổi kiểu CSS                                       Ví dụ                  let element = document.getElementById('demo'); element.style.color = 'red';                      Trong ví dụ trên, màu chữ của phần tử có id là demo sẽ được thay đổi thành màu đỏ.                                         Thêm, xóa hoặc kiểm tra một class                                       Ví dụ                  let element = document.getElementById('demo'); element.classList.add('new-class'); element.classList.remove('old-class'); element.classList.toggle('active'); element.classList.contains('new-class');  Trong đó: add thêm một class, remove xóa một class, toggle thêm hoặc xóa một class, contains kiểm tra một class."
    },
    {
        "title": "Thay đổi kiểu CSS",
        "content": "Thay đổi kiểu CSS                                       Ví dụ                  let element = document.getElementById('demo'); element.style.color = 'red';                      Trong ví dụ trên, màu chữ của phần tử có id là demo sẽ được thay đổi thành màu đỏ."
    },
    {
        "title": "Thêm, xóa hoặc kiểm tra một class",
        "content": "Thêm, xóa hoặc kiểm tra một class                                       Ví dụ                  let element = document.getElementById('demo'); element.classList.add('new-class'); element.classList.remove('old-class'); element.classList.toggle('active'); element.classList.contains('new-class');  Trong đó: add thêm một class, remove xóa một class, toggle thêm hoặc xóa một class, contains kiểm tra một class."
    },
    {
        "title": "DOM - ANIMATION",
        "content": "DOM - ANIMATION                               animation là một cách để tạo hiệu ứng chuyển động cho phần tử HTML.                               Để tạo hiệu ứng chuyển động cho phần tử HTML, bạn có thể sử dụng các phương thức sau:                   setInterval(): Thực thi một hàm sau một khoảng thời gian nhất định                       setTimeout(): Thực thi một hàm sau một khoảng thời gian nhất định                                              setInterval()                                       Ví dụ                  let element = document.getElementById('demo'); let pos = 0; let id = setInterval(frame, 5); function frame() {     if (pos === 350) {         clearInterval(id);     } else {         pos++;         element.style.top = pos + 'px';         element.style.left = pos + 'px';     } }                      Trong ví dụ trên, phần tử có id là demo sẽ di chuyển từ vị trí ban đầu đến vị trí mới.                                         setTimeout()                                       Ví dụ                  let element = document.getElementById('demo'); setTimeout(function() {     element.style.color = 'red'; }, 3000);                      Trong ví dụ trên, màu chữ của phần tử có id là demo sẽ được thay đổi thành màu đỏ sau 3 giây."
    },
    {
        "title": "setInterval()",
        "content": "setInterval()                                       Ví dụ                  let element = document.getElementById('demo'); let pos = 0; let id = setInterval(frame, 5); function frame() {     if (pos === 350) {         clearInterval(id);     } else {         pos++;         element.style.top = pos + 'px';         element.style.left = pos + 'px';     } }                      Trong ví dụ trên, phần tử có id là demo sẽ di chuyển từ vị trí ban đầu đến vị trí mới."
    },
    {
        "title": "setTimeout()",
        "content": "setTimeout()                                       Ví dụ                  let element = document.getElementById('demo'); setTimeout(function() {     element.style.color = 'red'; }, 3000);                      Trong ví dụ trên, màu chữ của phần tử có id là demo sẽ được thay đổi thành màu đỏ sau 3 giây."
    },
    {
        "title": "DOM - EVENTS",
        "content": "DOM - EVENTS                               Trong javaScript, events là một cách để tương tác với người dùng.                               Để tạo sự kiện cho một phần tử HTML, bạn có thể sử dụng các phương thức sau:                   addEventListener(): Thêm một sự kiện cho một phần tử                       removeEventListener(): Xóa một sự kiện cho một phần tử                                              addEventListener()                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', function() {     alert('Hello, world!'); });                      Trong ví dụ trên, khi click vào phần tử có id là demo, sẽ có thông báo 'Hello, world!' xuất hiện.                                         removeEventListener()                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', myFunction); function myFunction() {     alert('Hello, world!'); } element.removeEventListener('click', myFunction);                      Trong ví dụ trên, khi click vào phần tử có id là demo, sẽ có thông báo 'Hello, world!' xuất hiện.                                       Sau đó, sự kiện click sẽ bị xóa."
    },
    {
        "title": "addEventListener()",
        "content": "addEventListener()                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', function() {     alert('Hello, world!'); });                      Trong ví dụ trên, khi click vào phần tử có id là demo, sẽ có thông báo 'Hello, world!' xuất hiện."
    },
    {
        "title": "removeEventListener()",
        "content": "removeEventListener()                                       Ví dụ                  let element = document.getElementById('demo'); element.addEventListener('click', myFunction); function myFunction() {     alert('Hello, world!'); } element.removeEventListener('click', myFunction);                      Trong ví dụ trên, khi click vào phần tử có id là demo, sẽ có thông báo 'Hello, world!' xuất hiện.                                       Sau đó, sự kiện click sẽ bị xóa."
    },
    {
        "title": "Điều hướng các phần tử HTML trong DOM",
        "content": "Điều hướng các phần tử HTML trong DOM                               Các phần tử trong DOM được sắp xếp theo một cấu trúc cây. với các node cha và node con.                               Có một số phương thức để điều hướng các phần tử HTML trong DOM.                   parentNode: Trả về node cha của một phần tử                       childNodes: Trả về một mảng các node con của một phần tử                       firstChild: Trả về node con đầu tiên của một phần tử                       lastChild: Trả về node con cuối cùng của một phần tử                       nextSibling: Trả về node kế tiếp của một phần tử                       previousSibling: Trả về node trước đó của một phần tử"
    },
    {
        "title": "Colelction & Node list trong DOM",
        "content": "Colelction & Node list trong DOM                               Trong DOM, có hai loại tập hợp phần tử HTML: HTMLCollection và NodeList.                                    HTMLCollection                   HTMLCollection là một tập hợp các phần tử HTML.                                       Ví dụ                  let elements = document.getElementsByTagName('p'); for (let i = 0; i < elements.length; i++) {     elements[i].style.color = 'red'; }                      Trong ví dụ trên, tất cả các phần tử <p> sẽ được thay đổi màu chữ thành màu đỏ.                                         NodeList                   NodeList là một tập hợp các phần tử HTML.                                       Ví dụ                  let elements = document.querySelectorAll('p'); for (let i = 0; i < elements.length; i++) {     elements[i].style.color = 'red'; }                      Trong ví dụ trên, tất cả các phần tử <p> sẽ được thay đổi màu chữ thành màu đỏ.                    HTMLCollection vs NodeList   HTMLCollection là một tập hợp các phần tử HTML                       NodeList là một tập hợp các phần tử HTML                       HTMLCollection là một tập hợp động                       NodeList là một tập hợp tĩnh                       HTMLCollection không hỗ trợ phương thức forEach()   NodeList hỗ trợ phương thức forEach()"
    },
    {
        "title": "HTMLCollection",
        "content": "HTMLCollection                   HTMLCollection là một tập hợp các phần tử HTML.                                       Ví dụ                  let elements = document.getElementsByTagName('p'); for (let i = 0; i < elements.length; i++) {     elements[i].style.color = 'red'; }                      Trong ví dụ trên, tất cả các phần tử <p> sẽ được thay đổi màu chữ thành màu đỏ."
    },
    {
        "title": "NodeList",
        "content": "NodeList                   NodeList là một tập hợp các phần tử HTML.                                       Ví dụ                  let elements = document.querySelectorAll('p'); for (let i = 0; i < elements.length; i++) {     elements[i].style.color = 'red'; }                      Trong ví dụ trên, tất cả các phần tử <p> sẽ được thay đổi màu chữ thành màu đỏ."
    },
    {
        "title": "javaScript - BOM",
        "content": "javaScript - BOM                               Trong javaScript, BOM (Browser Object Model) là một cách để tương tác với trình duyệt.                                    window                   window là một đối tượng toàn cục trong javaScript.                                       Ví dụ                  window.alert('Hello, world!');                      Trong ví dụ trên, sẽ có thông báo 'Hello, world!' xuất hiện.                                         window size                                       Để lấy kích thước của cửa sổ trình duyệt, bạn có thể sử dụng các thuộc tính sau:                       window.innerHeight: Chiều cao của cửa sổ trình duyệt                           window.innerWidth: Chiều rộng của cửa sổ trình duyệt                             Lưu ý: Kích thước của cửa sổ trình duyệt có thể thay đổi khi người dùng thay đổi kích thước cửa sổ.                     Kích thước không bao gồm thanh công cụ, thanh trượt và các phần khác của trình duyệt.                                         window methods                                       một vài phương thức của window:                                                   window.open(URL, name, specs, replace): Mở một cửa sổ mới                                                       window.close(): Đóng cửa sổ hiện tại                                                       window.moveTo(x, y): Di chuyển cửa sổ đến vị trí mới                                                       window.resizeTo(width, height): Thay đổi kích thước cửa sổ.                                                   window screen                                       Để lấy thông tin về màn hình, bạn có thể sử dụng các thuộc tính sau:                       window.screen.height: Chiều cao của màn hình                           window.screen.width: Chiều rộng của màn hình                           window.screen.availHeight: Chiều cao của màn hình không bao gồm thanh công cụ                           window.screen.availWidth: Chiều rộng của màn hình không bao gồm thanh công cụ                           window.screen.colorDepth: Độ sâu màu                           window.screen.pixelDepth: Độ sâu pixel                                                  window location                                       Để lấy thông tin về URL, bạn có thể sử dụng các thuộc tính sau:                       window.location.href: URL của trang                           window.location.hostname: Tên miền của trang                           window.location.pathname: Đường dẫn của trang                           window.location.protocol: Giao thức của trang                           window.location.port: Cổng của trang                           window.location.assign(URL): Chuyển hướng đến một URL mới                           window.location.reload(): Tải lại trang                           window.location.replace(URL): Thay thế trang hiện tại bằng một URL mới                                                  window history                                       Để lấy thông tin về lịch sử trình duyệt, bạn có thể sử dụng các phương thức sau:                       window.history.back(): Quay lại trang trước                           window.history.forward(): Đi đến trang tiếp theo                                                   window navigator                                       Để lấy thông tin về trình duyệt, bạn có thể sử dụng các thuộc tính sau:                       window.navigator.appCodeName: Tên mã ứng dụng                           window.navigator.appName: Tên ứng dụng                           window.navigator.appVersion: Phiên bản ứng dụng                           window.navigator.cookieEnabled: Kiểm tra cookie có được kích hoạt hay không                           window.navigator.language: Ngôn ngữ trình duyệt                           window.navigator.platform: Nền tảng trình duyệt                           window.navigator.userAgent: Thông tin về trình duyệt                                                   window popup boxes                                       Để tạo hộp thoại popup, bạn có thể sử dụng các phương thức sau:                       window.alert(): Thông báo                           window.confirm(): Xác nhận -> trả về giá trị true hoặc false                           window.prompt(\"Tiêu đề\", \"văn bản mặc định\"): Nhập dữ liệu -> trả về giá trị người dùng nhập"
    },
    {
        "title": "window",
        "content": "window                   window là một đối tượng toàn cục trong javaScript.                                       Ví dụ                  window.alert('Hello, world!');                      Trong ví dụ trên, sẽ có thông báo 'Hello, world!' xuất hiện."
    },
    {
        "title": "window size",
        "content": "window size                                       Để lấy kích thước của cửa sổ trình duyệt, bạn có thể sử dụng các thuộc tính sau:                       window.innerHeight: Chiều cao của cửa sổ trình duyệt                           window.innerWidth: Chiều rộng của cửa sổ trình duyệt                             Lưu ý: Kích thước của cửa sổ trình duyệt có thể thay đổi khi người dùng thay đổi kích thước cửa sổ.                     Kích thước không bao gồm thanh công cụ, thanh trượt và các phần khác của trình duyệt."
    },
    {
        "title": "window methods",
        "content": "window methods                                       một vài phương thức của window:                                                   window.open(URL, name, specs, replace): Mở một cửa sổ mới                                                       window.close(): Đóng cửa sổ hiện tại                                                       window.moveTo(x, y): Di chuyển cửa sổ đến vị trí mới                                                       window.resizeTo(width, height): Thay đổi kích thước cửa sổ."
    },
    {
        "title": "window screen",
        "content": "window screen                                       Để lấy thông tin về màn hình, bạn có thể sử dụng các thuộc tính sau:                       window.screen.height: Chiều cao của màn hình                           window.screen.width: Chiều rộng của màn hình                           window.screen.availHeight: Chiều cao của màn hình không bao gồm thanh công cụ                           window.screen.availWidth: Chiều rộng của màn hình không bao gồm thanh công cụ                           window.screen.colorDepth: Độ sâu màu                           window.screen.pixelDepth: Độ sâu pixel"
    },
    {
        "title": "window location",
        "content": "window location                                       Để lấy thông tin về URL, bạn có thể sử dụng các thuộc tính sau:                       window.location.href: URL của trang                           window.location.hostname: Tên miền của trang                           window.location.pathname: Đường dẫn của trang                           window.location.protocol: Giao thức của trang                           window.location.port: Cổng của trang                           window.location.assign(URL): Chuyển hướng đến một URL mới                           window.location.reload(): Tải lại trang                           window.location.replace(URL): Thay thế trang hiện tại bằng một URL mới"
    },
    {
        "title": "window history",
        "content": "window history                                       Để lấy thông tin về lịch sử trình duyệt, bạn có thể sử dụng các phương thức sau:                       window.history.back(): Quay lại trang trước                           window.history.forward(): Đi đến trang tiếp theo"
    },
    {
        "title": "window navigator",
        "content": "window navigator                                       Để lấy thông tin về trình duyệt, bạn có thể sử dụng các thuộc tính sau:                       window.navigator.appCodeName: Tên mã ứng dụng                           window.navigator.appName: Tên ứng dụng                           window.navigator.appVersion: Phiên bản ứng dụng                           window.navigator.cookieEnabled: Kiểm tra cookie có được kích hoạt hay không                           window.navigator.language: Ngôn ngữ trình duyệt                           window.navigator.platform: Nền tảng trình duyệt                           window.navigator.userAgent: Thông tin về trình duyệt"
    },
    {
        "title": "window popup boxes",
        "content": "window popup boxes                                       Để tạo hộp thoại popup, bạn có thể sử dụng các phương thức sau:                       window.alert(): Thông báo                           window.confirm(): Xác nhận -> trả về giá trị true hoặc false                           window.prompt(\"Tiêu đề\", \"văn bản mặc định\"): Nhập dữ liệu -> trả về giá trị người dùng nhập"
    }
]